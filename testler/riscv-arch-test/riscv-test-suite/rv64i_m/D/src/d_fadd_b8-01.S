
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 11:53:35 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fadd.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V FD extension for the fadd_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fadd_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f21, rs2==f21, rd==f21, fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and rm_val == 0  
// opcode: fadd.d ; op1:f21; op2:f21; dest:f21; op1val:0x3fc3e9fc19d60908; op2val:0x3fc3e9fc19d60908; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f21, f21, f21, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f30, rs2==f9, rd==f9, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and rm_val == 4  
// opcode: fadd.d ; op1:f30; op2:f9; dest:f9; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f9, f30, f9, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_2:
// rs1 == rd != rs2, rs1==f22, rs2==f28, rd==f22, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and rm_val == 3  
// opcode: fadd.d ; op1:f22; op2:f28; dest:f22; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f22, f22, f28, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_3:
// rs1 == rs2 != rd, rs1==f12, rs2==f12, rd==f15, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and rm_val == 2  
// opcode: fadd.d ; op1:f12; op2:f12; dest:f15; op1val:0x3fefc04b2f200426; op2val:0x3fefc04b2f200426; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f15, f12, f12, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f17, rs2==f1, rd==f3, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and rm_val == 1  
// opcode: fadd.d ; op1:f17; op2:f1; dest:f3; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f3, f17, f1, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_5:
// rs1==f27, rs2==f3, rd==f12, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and rm_val == 0  
// opcode: fadd.d ; op1:f27; op2:f3; dest:f12; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f27, f3, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6:
// rs1==f8, rs2==f11, rd==f10, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and rm_val == 4  
// opcode: fadd.d ; op1:f8; op2:f11; dest:f10; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f10, f8, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_7:
// rs1==f24, rs2==f18, rd==f8, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and rm_val == 3  
// opcode: fadd.d ; op1:f24; op2:f18; dest:f8; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f8, f24, f18, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_8:
// rs1==f10, rs2==f30, rd==f24, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f30; dest:f24; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f24, f10, f30, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_9:
// rs1==f14, rs2==f25, rd==f6, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and rm_val == 1  
// opcode: fadd.d ; op1:f14; op2:f25; dest:f6; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f6, f14, f25, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_10:
// rs1==f2, rs2==f29, rd==f19, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x343b84468445c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x343b84468445c and rm_val == 0  
// opcode: fadd.d ; op1:f2; op2:f29; dest:f19; op1val:0x3fd343b84468445c; op2val:0xbfd343b84468445c; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f19, f2, f29, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_11:
// rs1==f9, rs2==f0, rd==f7, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and rm_val == 4  
// opcode: fadd.d ; op1:f9; op2:f0; dest:f7; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f7, f9, f0, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_12:
// rs1==f6, rs2==f14, rd==f25, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and rm_val == 3  
// opcode: fadd.d ; op1:f6; op2:f14; dest:f25; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f25, f6, f14, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_13:
// rs1==f25, rs2==f2, rd==f13, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and rm_val == 2  
// opcode: fadd.d ; op1:f25; op2:f2; dest:f13; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f13, f25, f2, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_14:
// rs1==f26, rs2==f24, rd==f18, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and rm_val == 1  
// opcode: fadd.d ; op1:f26; op2:f24; dest:f18; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f18, f26, f24, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_15:
// rs1==f3, rs2==f19, rd==f17, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x97bc82ad232bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x97bc82ad232bd and rm_val == 0  
// opcode: fadd.d ; op1:f3; op2:f19; dest:f17; op1val:0x3fe97bc82ad232bd; op2val:0xbfe97bc82ad232bd; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f17, f3, f19, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_16:
// rs1==f5, rs2==f20, rd==f29, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and rm_val == 4  
// opcode: fadd.d ; op1:f5; op2:f20; dest:f29; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f29, f5, f20, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_17:
// rs1==f28, rs2==f8, rd==f26, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and rm_val == 3  
// opcode: fadd.d ; op1:f28; op2:f8; dest:f26; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f26, f28, f8, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_18:
// rs1==f19, rs2==f7, rd==f30, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and rm_val == 2  
// opcode: fadd.d ; op1:f19; op2:f7; dest:f30; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f30, f19, f7, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_19:
// rs1==f29, rs2==f31, rd==f16, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and rm_val == 1  
// opcode: fadd.d ; op1:f29; op2:f31; dest:f16; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f16, f29, f31, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_20:
// rs1==f4, rs2==f16, rd==f11, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7366b474ed968 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7366b474ed968 and rm_val == 0  
// opcode: fadd.d ; op1:f4; op2:f16; dest:f11; op1val:0x3fd7366b474ed968; op2val:0xbfd7366b474ed968; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f11, f4, f16, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_21:
// rs1==f7, rs2==f5, rd==f20, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and rm_val == 4  
// opcode: fadd.d ; op1:f7; op2:f5; dest:f20; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f20, f7, f5, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_22:
// rs1==f20, rs2==f26, rd==f23, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and rm_val == 3  
// opcode: fadd.d ; op1:f20; op2:f26; dest:f23; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f23, f20, f26, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_23:
// rs1==f0, rs2==f27, rd==f14, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and rm_val == 2  
// opcode: fadd.d ; op1:f0; op2:f27; dest:f14; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f14, f0, f27, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_24:
// rs1==f16, rs2==f15, rd==f4, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and rm_val == 1  
// opcode: fadd.d ; op1:f16; op2:f15; dest:f4; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f4, f16, f15, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_25:
// rs1==f15, rs2==f22, rd==f27, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb70164e941a8f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb70164e941a8f and rm_val == 0  
// opcode: fadd.d ; op1:f15; op2:f22; dest:f27; op1val:0x3feb70164e941a8f; op2val:0xbfeb70164e941a8f; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f27, f15, f22, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_26:
// rs1==f1, rs2==f10, rd==f28, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and rm_val == 4  
// opcode: fadd.d ; op1:f1; op2:f10; dest:f28; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f28, f1, f10, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_27:
// rs1==f11, rs2==f4, rd==f31, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and rm_val == 3  
// opcode: fadd.d ; op1:f11; op2:f4; dest:f31; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f31, f11, f4, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_28:
// rs1==f13, rs2==f23, rd==f1, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and rm_val == 2  
// opcode: fadd.d ; op1:f13; op2:f23; dest:f1; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f1, f13, f23, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_29:
// rs1==f31, rs2==f6, rd==f0, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and rm_val == 1  
// opcode: fadd.d ; op1:f31; op2:f6; dest:f0; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f0, f31, f6, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_30:
// rs1==f18, rs2==f17, rd==f2, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x17d5ca6a3715b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x17d5ca6a3715b and rm_val == 0  
// opcode: fadd.d ; op1:f18; op2:f17; dest:f2; op1val:0x3fe17d5ca6a3715b; op2val:0xbfe17d5ca6a3715b; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f2, f18, f17, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_31:
// rs1==f23, rs2==f13, rd==f5, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and rm_val == 4  
// opcode: fadd.d ; op1:f23; op2:f13; dest:f5; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f5, f23, f13, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22f60e34d11b1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x22f60e34d11b1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22f60e34d11b1; op2val:0xbfe22f60e34d11b1; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33d3837422b91 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x33d3837422b91 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33d3837422b91; op2val:0xbfe33d3837422b91; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa27e804c22884 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa27e804c22884 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca27e804c22884; op2val:0xbfca27e804c22884; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc46c0bb27d794 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc46c0bb27d794 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc46c0bb27d794; op2val:0xbfdc46c0bb27d794; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa0bbaee431ca4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa0bbaee431ca4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca0bbaee431ca4; op2val:0xbfca0bbaee431ca4; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee7d3fa2c217 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee7d3fa2c217 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee7d3fa2c217; op2val:0xbfe0ee7d3fa2c217; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x978e962837c30 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x978e962837c30 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe978e962837c30; op2val:0xbfe978e962837c30; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1657d98ca36fa and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1657d98ca36fa and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1657d98ca36fa; op2val:0xbfd1657d98ca36fa; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ec88b3f75ec1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ec88b3f75ec1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ec88b3f75ec1; op2val:0xbfe2ec88b3f75ec1; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xa25981e2177c0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xa25981e2177c0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faa25981e2177c0; op2val:0xbfaa25981e2177c0; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c41b657808c9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1c41b657808c9 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c41b657808c9; op2val:0xbfe1c41b657808c9; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x73bf2cd29da4a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x73bf2cd29da4a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd73bf2cd29da4a; op2val:0xbfd73bf2cd29da4a; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb7269eda2bcd7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb7269eda2bcd7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb7269eda2bcd7; op2val:0xbfeb7269eda2bcd7; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcc01114aa7f56 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcc01114aa7f56 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcc01114aa7f56; op2val:0xbfdcc01114aa7f56; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda8411778cfae and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xda8411778cfae and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda8411778cfae; op2val:0xbfeda8411778cfae; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf57a8526cbf63 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf57a8526cbf63 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef57a8526cbf63; op2val:0xbfef57a8526cbf63; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8512d08e5cad and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8512d08e5cad and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8512d08e5cad; op2val:0xbfee8512d08e5cad; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6afa3f2829958 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6afa3f2829958 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6afa3f2829958; op2val:0xbfe6afa3f2829958; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x83aaa5b0da9bd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x83aaa5b0da9bd and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe83aaa5b0da9bd; op2val:0xbfe83aaa5b0da9bd; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x909bd1c6f5700 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x909bd1c6f5700 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc909bd1c6f5700; op2val:0xbfc909bd1c6f5700; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa31f35b4c6010 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa31f35b4c6010 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba31f35b4c6010; op2val:0xbfba31f35b4c6010; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xad35d1d89b3d2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xad35d1d89b3d2 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdad35d1d89b3d2; op2val:0xbfdad35d1d89b3d2; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xcde95d6a03380 and fs2 == 1 and fe2 == 0x3f7 and fm2 == 0xcde95d6a03380 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7cde95d6a03380; op2val:0xbf7cde95d6a03380; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x74d2835625624 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x74d2835625624 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd74d2835625624; op2val:0xbfd74d2835625624; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0187483e41018 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x0187483e41018 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0187483e41018; op2val:0xbfb0187483e41018; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0da26502807f8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0da26502807f8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0da26502807f8; op2val:0xbfe0da26502807f8; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x1246332ae28f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x1246332ae28f0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa1246332ae28f0; op2val:0xbfa1246332ae28f0; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_170:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4e7786f7957b0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x4e7786f7957b0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4e7786f7957b0; op2val:0xbfa4e7786f7957b0; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc674aea17dd8e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc674aea17dd8e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec674aea17dd8e; op2val:0xbfec674aea17dd8e; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x206889dbad440 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x206889dbad440 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc206889dbad440; op2val:0xbfc206889dbad440; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf36112c44d337 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf36112c44d337 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef36112c44d337; op2val:0xbfef36112c44d337; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc524ded3b2e1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc524ded3b2e1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefc524ded3b2e1; op2val:0xbfefc524ded3b2e1; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf9c1686579700 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xf9c1686579700 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf9c1686579700; op2val:0xbfaf9c1686579700; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9725a915d2a42 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9725a915d2a42 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9725a915d2a42; op2val:0xbfe9725a915d2a42; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_202:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_203:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_204:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_205:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb47d67b6a28b8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb47d67b6a28b8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb47d67b6a28b8; op2val:0xbfbb47d67b6a28b8; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_206:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_207:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_208:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_209:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_210:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x72ac9da25ac50 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x72ac9da25ac50 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc72ac9da25ac50; op2val:0xbfc72ac9da25ac50; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfae5f78adcdb1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfae5f78adcdb1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefae5f78adcdb1; op2val:0xbfefae5f78adcdb1; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0f56e69e43a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf0f56e69e43a4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0f56e69e43a4; op2val:0xbfef0f56e69e43a4; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdbfdc6b83b57d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdbfdc6b83b57d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedbfdc6b83b57d; op2val:0xbfedbfdc6b83b57d; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_226:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_227:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_228:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_229:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_230:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1c1dbf5fab43c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1c1dbf5fab43c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1c1dbf5fab43c; op2val:0xbfd1c1dbf5fab43c; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_231:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_232:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_233:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_234:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_235:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a9e96459a3c0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4a9e96459a3c0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a9e96459a3c0; op2val:0xbfb4a9e96459a3c0; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_236:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_237:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_238:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_239:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_240:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x411b9cca9f1ae and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x411b9cca9f1ae and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd411b9cca9f1ae; op2val:0xbfd411b9cca9f1ae; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf047fa8d5aa39 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf047fa8d5aa39 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef047fa8d5aa39; op2val:0xbfef047fa8d5aa39; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcf381fd806190 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xcf381fd806190 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccf381fd806190; op2val:0xbfccf381fd806190; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2b3113bbf9129 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2b3113bbf9129 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2b3113bbf9129; op2val:0xbfe2b3113bbf9129; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_256:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_257:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_258:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_259:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_260:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x3be191d4f9c08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x3be191d4f9c08 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb3be191d4f9c08; op2val:0xbfb3be191d4f9c08; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x25e73a46ec0f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x25e73a46ec0f2 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe25e73a46ec0f2; op2val:0xbfe25e73a46ec0f2; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63ae33037d2a3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x63ae33037d2a3 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63ae33037d2a3; op2val:0xbfe63ae33037d2a3; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_271:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_272:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_273:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_274:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_275:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x34bbc73cf7054 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x34bbc73cf7054 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd34bbc73cf7054; op2val:0xbfd34bbc73cf7054; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_276:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_277:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_278:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_279:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_280:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xc796f0bec1ca8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc796f0bec1ca8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbc796f0bec1ca8; op2val:0xbfbc796f0bec1ca8; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd023e28e50670 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd023e28e50670 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed023e28e50670; op2val:0xbfed023e28e50670; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_286:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_287:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_288:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_289:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_290:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb67ae48fe340e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb67ae48fe340e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb67ae48fe340e; op2val:0xbfdb67ae48fe340e; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_291:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_292:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_293:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_294:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_295:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xc455e9eb748f0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xc455e9eb748f0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fac455e9eb748f0; op2val:0xbfac455e9eb748f0; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07155e2fa7c02 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x07155e2fa7c02 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07155e2fa7c02; op2val:0xbfe07155e2fa7c02; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe924d3c646d1d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe924d3c646d1d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee924d3c646d1d; op2val:0xbfee924d3c646d1d; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_306:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_307:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_308:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_309:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_310:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xaefbd55e345e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xaefbd55e345e8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcaefbd55e345e8; op2val:0xbfcaefbd55e345e8; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_315:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf27331cf3cdd0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf27331cf3cdd0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf27331cf3cdd0; op2val:0xbfcf27331cf3cdd0; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_316:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_317:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_318:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_319:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_320:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbe3af59ba428c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbe3af59ba428c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbe3af59ba428c; op2val:0xbfcbe3af59ba428c; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_321:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_322:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_323:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_324:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_325:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb7517701108e4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xb7517701108e4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb7517701108e4; op2val:0xbfcb7517701108e4; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_326:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_327:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_328:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_329:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_330:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x849b33e0e1f14 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x849b33e0e1f14 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc849b33e0e1f14; op2val:0xbfc849b33e0e1f14; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_331:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_332:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_333:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_334:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_335:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x050c840ade358 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x050c840ade358 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc050c840ade358; op2val:0xbfc050c840ade358; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_336:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_337:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_338:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_339:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_340:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9af2feb4c94ac and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9af2feb4c94ac and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9af2feb4c94ac; op2val:0xbfc9af2feb4c94ac; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbeeb8d82a8716 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbeeb8d82a8716 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febeeb8d82a8716; op2val:0xbfebeeb8d82a8716; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_346:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_347:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_348:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_349:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_350:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x83089dda1002e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x83089dda1002e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd83089dda1002e; op2val:0xbfd83089dda1002e; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc058a1c1f3f37 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc058a1c1f3f37 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec058a1c1f3f37; op2val:0xbfec058a1c1f3f37; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_356:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_357:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_358:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_359:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_360:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x788309087574e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x788309087574e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd788309087574e; op2val:0xbfd788309087574e; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_361:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_362:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_363:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_364:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_365:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f3cc5264b9d6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f3cc5264b9d6 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f3cc5264b9d6; op2val:0xbfd8f3cc5264b9d6; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04f4d1b8e56d3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x04f4d1b8e56d3 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04f4d1b8e56d3; op2val:0xbfe04f4d1b8e56d3; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bb1268ddc7f2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3bb1268ddc7f2 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bb1268ddc7f2; op2val:0xbfe3bb1268ddc7f2; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_376:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_377:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_378:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_379:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcdad41acedd26 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xcdad41acedd26 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcdad41acedd26; op2val:0xbfdcdad41acedd26; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7aea1dd68a12a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7aea1dd68a12a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7aea1dd68a12a; op2val:0xbfd7aea1dd68a12a; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xef60afd9b572e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xef60afd9b572e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feef60afd9b572e; op2val:0xbfeef60afd9b572e; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ee79c0e32d14 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0ee79c0e32d14 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ee79c0e32d14; op2val:0xbfe0ee79c0e32d14; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a04af62a1ac0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3a04af62a1ac0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a04af62a1ac0; op2val:0xbfe3a04af62a1ac0; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2d7f083dbf9d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2d7f083dbf9d5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2d7f083dbf9d5; op2val:0xbfe2d7f083dbf9d5; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb27f230c243bc and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb27f230c243bc and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb27f230c243bc; op2val:0xbfeb27f230c243bc; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_411:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_412:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_413:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_414:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_415:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x219945f58d7ce and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x219945f58d7ce and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd219945f58d7ce; op2val:0xbfd219945f58d7ce; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x042ebb870adf0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x042ebb870adf0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe042ebb870adf0; op2val:0xbfe042ebb870adf0; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9a14a131e1f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed9a14a131e1f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9a14a131e1f; op2val:0xbfeed9a14a131e1f; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_426:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_427:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_428:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_429:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_430:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c480eaa7d5c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x5c480eaa7d5c8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c480eaa7d5c8; op2val:0xbfc5c480eaa7d5c8; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbecfce70b503f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbecfce70b503f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febecfce70b503f; op2val:0xbfebecfce70b503f; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe01f9eb584604 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe01f9eb584604 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee01f9eb584604; op2val:0xbfee01f9eb584604; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2f1108a769ed6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2f1108a769ed6 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2f1108a769ed6; op2val:0xbfe2f1108a769ed6; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_446:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_447:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_448:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_449:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_450:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xd360c4b32ddf0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xd360c4b32ddf0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fad360c4b32ddf0; op2val:0xbfad360c4b32ddf0; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde66f1e06a550 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde66f1e06a550 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede66f1e06a550; op2val:0xbfede66f1e06a550; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8fa45b70180c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf8fa45b70180c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8fa45b70180c; op2val:0xbfdf8fa45b70180c; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xffe0739097a0a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffe0739097a0a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feffe0739097a0a; op2val:0xbfeffe0739097a0a; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_466:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_467:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_468:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_469:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_470:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9d92fefac1b4c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9d92fefac1b4c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9d92fefac1b4c; op2val:0xbfc9d92fefac1b4c; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_472:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_473:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_474:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_475:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa789c8e21a57c and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa789c8e21a57c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda789c8e21a57c; op2val:0xbfda789c8e21a57c; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_476:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_477:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_478:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_479:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_480:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabf31c071baf8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xabf31c071baf8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabf31c071baf8; op2val:0xbfcabf31c071baf8; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_481:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_482:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_483:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_484:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_485:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x64f92c07070fc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x64f92c07070fc and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc64f92c07070fc; op2val:0xbfc64f92c07070fc; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xdbbbd40ca77ca and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xdbbbd40ca77ca and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fddbbbd40ca77ca; op2val:0xbfddbbbd40ca77ca; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_491:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_492:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_493:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_494:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_495:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x81ec127da2ad0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x81ec127da2ad0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb81ec127da2ad0; op2val:0xbfb81ec127da2ad0; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_496:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_497:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_498:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_499:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_500:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x363a9ec73cbc0 and fs2 == 1 and fe2 == 0x3f8 and fm2 == 0x363a9ec73cbc0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8363a9ec73cbc0; op2val:0xbf8363a9ec73cbc0; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_501:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_502:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_503:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_504:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_505:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8f227e7b6475c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x8f227e7b6475c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8f227e7b6475c; op2val:0xbfc8f227e7b6475c; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_506:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_507:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_508:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_510:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb45ac5f465aee and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb45ac5f465aee and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb45ac5f465aee; op2val:0xbfdb45ac5f465aee; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_511:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_512:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_513:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_514:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_515:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x952226f0bd0d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x952226f0bd0d0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb952226f0bd0d0; op2val:0xbfb952226f0bd0d0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_516:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_517:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_518:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_519:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_520:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x013e3283c4340 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x013e3283c4340 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa013e3283c4340; op2val:0xbfa013e3283c4340; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_521:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_522:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_523:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_524:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_525:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb3cdee88674b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb3cdee88674b0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb3cdee88674b0; op2val:0xbfeb3cdee88674b0; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_526:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_527:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_528:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_529:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_530:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x56bc55c8d6933 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x56bc55c8d6933 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe56bc55c8d6933; op2val:0xbfe56bc55c8d6933; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_531:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_532:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_533:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_534:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_535:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf82c8bcf6e341 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf82c8bcf6e341 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef82c8bcf6e341; op2val:0xbfef82c8bcf6e341; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_536:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_537:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_538:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_539:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_540:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cc0eaf7a5fbe and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8cc0eaf7a5fbe and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cc0eaf7a5fbe; op2val:0xbfe8cc0eaf7a5fbe; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_541:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_542:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_543:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_544:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_545:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0c809d15a0db8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0c809d15a0db8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0c809d15a0db8; op2val:0xbfc0c809d15a0db8; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_546:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_547:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_548:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_549:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_550:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde062d0ccdb01 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde062d0ccdb01 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede062d0ccdb01; op2val:0xbfede062d0ccdb01; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x20a218a595902 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x20a218a595902 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd20a218a595902; op2val:0xbfd20a218a595902; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_556:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_557:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_558:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_559:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_560:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x42e6be9ef9858 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x42e6be9ef9858 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc42e6be9ef9858; op2val:0xbfc42e6be9ef9858; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_561:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_562:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_563:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_564:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_565:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7c79f9596f383 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7c79f9596f383 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7c79f9596f383; op2val:0xbfe7c79f9596f383; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_566:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_567:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_568:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_569:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_570:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xedd71a9e64a40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xedd71a9e64a40 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feedd71a9e64a40; op2val:0xbfeedd71a9e64a40; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_571:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_572:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_573:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_574:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_575:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9da9bf5d0d198 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9da9bf5d0d198 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9da9bf5d0d198; op2val:0xbfb9da9bf5d0d198; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_576:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_577:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_578:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_579:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_580:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51cea492d78d7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x51cea492d78d7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51cea492d78d7; op2val:0xbfe51cea492d78d7; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8f984b08cab90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8f984b08cab90 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8f984b08cab90; op2val:0xbfd8f984b08cab90; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_586:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_587:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_588:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_589:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_590:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x51d9a79009dd0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x51d9a79009dd0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd51d9a79009dd0; op2val:0xbfd51d9a79009dd0; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_591:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_592:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_593:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_594:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_595:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x00cc5b001dc4e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x00cc5b001dc4e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe00cc5b001dc4e; op2val:0xbfe00cc5b001dc4e; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_596:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_597:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_598:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_599:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_600:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x53c6de3974a78 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x53c6de3974a78 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb53c6de3974a78; op2val:0xbfb53c6de3974a78; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_601:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_602:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_603:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_604:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_605:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf51e5ef521850 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xf51e5ef521850 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf51e5ef521850; op2val:0xbfbf51e5ef521850; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_606:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_607:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_608:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_609:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_610:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x302cf917250d4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x302cf917250d4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe302cf917250d4; op2val:0xbfe302cf917250d4; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_611:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_612:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_613:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_614:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_615:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x16b46c18c7260 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0x16b46c18c7260 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f916b46c18c7260; op2val:0xbf916b46c18c7260; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_616:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_617:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_618:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_619:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_620:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2844d394bd65 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb2844d394bd65 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2844d394bd65; op2val:0xbfeb2844d394bd65; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_621:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_622:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_623:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_624:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_625:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e729828dadb2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3e729828dadb2 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e729828dadb2; op2val:0xbfe3e729828dadb2; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_626:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_627:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_628:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_629:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_630:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51106394dbf5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51106394dbf5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51106394dbf5; op2val:0xbfeb51106394dbf5; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_631:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_632:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_633:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_634:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_6)

inst_635:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xaa4cf4cf6dab0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xaa4cf4cf6dab0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faaa4cf4cf6dab0; op2val:0xbfaaa4cf4cf6dab0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_636:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_637:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_638:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_639:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_640:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95e5b0d6f9e6a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95e5b0d6f9e6a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95e5b0d6f9e6a; op2val:0xbfe95e5b0d6f9e6a; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_641:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_642:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_643:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_644:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_645:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc31e30e02fb81 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc31e30e02fb81 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec31e30e02fb81; op2val:0xbfec31e30e02fb81; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_646:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_647:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_648:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_649:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_650:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x18c656cfd80ca and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x18c656cfd80ca and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe18c656cfd80ca; op2val:0xbfe18c656cfd80ca; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_651:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_652:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_653:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_654:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_655:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3125d2fc76fb8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x3125d2fc76fb8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3125d2fc76fb8; op2val:0xbfd3125d2fc76fb8; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_656:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_657:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_658:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_659:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_660:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdf4e02cb64ab2 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xdf4e02cb64ab2 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedf4e02cb64ab2; op2val:0xbfedf4e02cb64ab2; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_661:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_662:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_663:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_664:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_665:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2336ff73b72c5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2336ff73b72c5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2336ff73b72c5; op2val:0xbfe2336ff73b72c5; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_666:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_667:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_668:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_669:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_670:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7a6925da8b9ff and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7a6925da8b9ff and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7a6925da8b9ff; op2val:0xbfe7a6925da8b9ff; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_671:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_672:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_673:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_674:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_675:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x436a0f31e942f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x436a0f31e942f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe436a0f31e942f; op2val:0xbfe436a0f31e942f; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_676:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_677:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_678:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_679:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_680:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4864e86431094 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4864e86431094 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4864e86431094; op2val:0xbfd4864e86431094; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_681:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_682:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_683:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_684:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_685:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05d3c18d8cad5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x05d3c18d8cad5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05d3c18d8cad5; op2val:0xbfe05d3c18d8cad5; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_686:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_687:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_688:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_689:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_690:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec8a495ae726e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xec8a495ae726e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec8a495ae726e; op2val:0xbfdec8a495ae726e; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_691:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_692:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_693:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_694:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_695:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfbfaf3f9b91d5 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfbfaf3f9b91d5 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefbfaf3f9b91d5; op2val:0xbfefbfaf3f9b91d5; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_696:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_697:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_698:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_699:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_700:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x002230e3b4592 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x002230e3b4592 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd002230e3b4592; op2val:0xbfd002230e3b4592; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_701:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_702:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_703:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_704:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_705:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xde4aeacc4d745 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xde4aeacc4d745 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fede4aeacc4d745; op2val:0xbfede4aeacc4d745; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_706:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_707:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_708:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_709:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_710:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xa0cce81168960 and fs2 == 1 and fe2 == 0x3f9 and fm2 == 0xa0cce81168960 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9a0cce81168960; op2val:0xbf9a0cce81168960; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_711:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_712:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_713:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_714:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_715:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7e375537bee0a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7e375537bee0a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7e375537bee0a; op2val:0xbfd7e375537bee0a; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_716:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_717:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_718:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_719:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_720:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb089dbb04ccc0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xb089dbb04ccc0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb089dbb04ccc0; op2val:0xbfbb089dbb04ccc0; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_721:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_722:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_723:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_724:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_725:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x656cf46a8e04a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x656cf46a8e04a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe656cf46a8e04a; op2val:0xbfe656cf46a8e04a; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_726:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_727:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_728:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_729:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_730:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x339d4ac04a3c4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x339d4ac04a3c4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd339d4ac04a3c4; op2val:0xbfd339d4ac04a3c4; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_731:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_732:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_733:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_734:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_735:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x500ce5f80b100 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x500ce5f80b100 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe500ce5f80b100; op2val:0xbfe500ce5f80b100; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_736:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_737:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_738:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_739:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_740:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x45f14f33be81c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x45f14f33be81c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc45f14f33be81c; op2val:0xbfc45f14f33be81c; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_741:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_742:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_743:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_744:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_745:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x76237f09a3c90 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x76237f09a3c90 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb76237f09a3c90; op2val:0xbfb76237f09a3c90; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_746:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_747:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_748:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_749:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_750:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ba99bf90bdaf and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2ba99bf90bdaf and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ba99bf90bdaf; op2val:0xbfe2ba99bf90bdaf; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_751:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_752:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_753:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_754:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_755:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3193d04a86308 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x3193d04a86308 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3193d04a86308; op2val:0xbfe3193d04a86308; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_756:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_757:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_758:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_759:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_760:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe8658522bb3ea and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xe8658522bb3ea and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde8658522bb3ea; op2val:0xbfde8658522bb3ea; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_761:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_7)

inst_762:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_764:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_765:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe74af12c4bb2b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe74af12c4bb2b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee74af12c4bb2b; op2val:0xbfee74af12c4bb2b; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0b3b1b913f21d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0b3b1b913f21d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0b3b1b913f21d; op2val:0xbfe0b3b1b913f21d; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_771:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_772:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_773:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_774:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_775:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce5a21ef67ed0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce5a21ef67ed0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce5a21ef67ed0; op2val:0xbfdce5a21ef67ed0; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6bc29ca8e6e80 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6bc29ca8e6e80 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6bc29ca8e6e80; op2val:0xbfe6bc29ca8e6e80; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xac1a78766ff7c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xac1a78766ff7c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feac1a78766ff7c; op2val:0xbfeac1a78766ff7c; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_786:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_787:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_788:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_789:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_790:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8491a87b6f506 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8491a87b6f506 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8491a87b6f506; op2val:0xbfd8491a87b6f506; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_791:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_792:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_793:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_794:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_795:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2041aff401648 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2041aff401648 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2041aff401648; op2val:0xbfd2041aff401648; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x554b7eea66380 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x554b7eea66380 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe554b7eea66380; op2val:0xbfe554b7eea66380; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfb71d77723858 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfb71d77723858 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefb71d77723858; op2val:0xbfefb71d77723858; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x95957527f683e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x95957527f683e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe95957527f683e; op2val:0xbfe95957527f683e; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x414e54883ace8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x414e54883ace8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe414e54883ace8; op2val:0xbfe414e54883ace8; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_816:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_817:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_818:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_819:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_820:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x8e7fcd1529f20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x8e7fcd1529f20 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb8e7fcd1529f20; op2val:0xbfb8e7fcd1529f20; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_821:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_822:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_823:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_824:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_825:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x60e8d1c0b4b1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x60e8d1c0b4b1a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd60e8d1c0b4b1a; op2val:0xbfd60e8d1c0b4b1a; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_826:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_827:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_828:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_829:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_830:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x00e2cd04f74da and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x00e2cd04f74da and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd00e2cd04f74da; op2val:0xbfd00e2cd04f74da; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_831:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_832:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_833:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_834:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_835:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x713fe44d167d8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x713fe44d167d8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb713fe44d167d8; op2val:0xbfb713fe44d167d8; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_836:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_837:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_838:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_839:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_840:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xb64046884cff0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0xb64046884cff0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fab64046884cff0; op2val:0xbfab64046884cff0; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_841:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_842:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_843:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_844:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_845:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x46a8c85ec3276 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x46a8c85ec3276 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd46a8c85ec3276; op2val:0xbfd46a8c85ec3276; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf67d6cfd4aff0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf67d6cfd4aff0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef67d6cfd4aff0; op2val:0xbfef67d6cfd4aff0; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_851:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_852:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_853:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_854:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_855:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x066c40d8769c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x066c40d8769c8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc066c40d8769c8; op2val:0xbfc066c40d8769c8; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_856:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_857:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_858:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_859:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_860:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6599142d7295a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6599142d7295a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6599142d7295a; op2val:0xbfd6599142d7295a; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbbb04d162bf56 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xbbb04d162bf56 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febbb04d162bf56; op2val:0xbfebbb04d162bf56; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_866:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_867:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_868:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_869:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_870:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa948d7e25c484 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa948d7e25c484 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca948d7e25c484; op2val:0xbfca948d7e25c484; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7358b50582f8d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7358b50582f8d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7358b50582f8d; op2val:0xbfe7358b50582f8d; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x34e43d17d4c2d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x34e43d17d4c2d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe34e43d17d4c2d; op2val:0xbfe34e43d17d4c2d; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccb51de18fae1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xccb51de18fae1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccb51de18fae1; op2val:0xbfeccb51de18fae1; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_886:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_887:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_888:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_8)

inst_889:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_890:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x70a61a13eef5f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x70a61a13eef5f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe70a61a13eef5f; op2val:0xbfe70a61a13eef5f; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_891:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_892:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_893:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_894:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_895:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6726f6e697040 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x6726f6e697040 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6726f6e697040; op2val:0xbfd6726f6e697040; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcdef35f3cf813 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcdef35f3cf813 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecdef35f3cf813; op2val:0xbfecdef35f3cf813; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_901:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_902:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_903:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_904:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_905:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6b0bcb530144c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x6b0bcb530144c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6b0bcb530144c; op2val:0xbfc6b0bcb530144c; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_906:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_907:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_908:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_909:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_910:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2175c79f643a2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2175c79f643a2 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2175c79f643a2; op2val:0xbfd2175c79f643a2; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e1e07bfc8699 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x5e1e07bfc8699 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e1e07bfc8699; op2val:0xbfe5e1e07bfc8699; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x324510c33a9d0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x324510c33a9d0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe324510c33a9d0; op2val:0xbfe324510c33a9d0; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_921:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_922:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_923:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_924:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_925:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1908476f4b104 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1908476f4b104 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1908476f4b104; op2val:0xbfd1908476f4b104; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_926:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_927:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_928:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_929:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_930:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x77b79482be294 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x77b79482be294 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd77b79482be294; op2val:0xbfd77b79482be294; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9fbe4b5ce45c0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9fbe4b5ce45c0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9fbe4b5ce45c0; op2val:0xbfe9fbe4b5ce45c0; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_936:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_937:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_938:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_939:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_940:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xffeee00d38b08 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xffeee00d38b08 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbffeee00d38b08; op2val:0xbfbffeee00d38b08; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10f3803ccf24a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x10f3803ccf24a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10f3803ccf24a; op2val:0xbfe10f3803ccf24a; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x02c60f6b23bc3 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x02c60f6b23bc3 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe02c60f6b23bc3; op2val:0xbfe02c60f6b23bc3; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_951:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_952:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_953:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_954:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_955:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf4c466fffb77c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf4c466fffb77c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf4c466fffb77c; op2val:0xbfcf4c466fffb77c; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x06851f85e2acd and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x06851f85e2acd and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe06851f85e2acd; op2val:0xbfe06851f85e2acd; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_961:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_962:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_963:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_964:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_965:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaf43b4a36ec2c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xaf43b4a36ec2c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaf43b4a36ec2c; op2val:0xbfeaf43b4a36ec2c; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bfacc3be9497 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1bfacc3be9497 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bfacc3be9497; op2val:0xbfe1bfacc3be9497; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_971:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_972:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_973:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_974:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_975:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x59e952253f4a6 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x59e952253f4a6 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd59e952253f4a6; op2val:0xbfd59e952253f4a6; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_976:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_977:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_978:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_979:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_980:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x315393375d110 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x315393375d110 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd315393375d110; op2val:0xbfd315393375d110; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd2ecbdfb28b and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd2ecbdfb28b and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd2ecbdfb28b; op2val:0xbfe2bd2ecbdfb28b; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_986:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_987:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_988:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_989:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_990:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xfe440aa706f00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xfe440aa706f00 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbfe440aa706f00; op2val:0xbfbfe440aa706f00; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_991:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_992:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_993:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_994:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_995:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x734d9246a3808 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x734d9246a3808 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd734d9246a3808; op2val:0xbfd734d9246a3808; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54c94d35c140c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x54c94d35c140c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54c94d35c140c; op2val:0xbfe54c94d35c140c; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_1001:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_1002:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_1003:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_1004:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_1005:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff383799f273a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff383799f273a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff383799f273a; op2val:0xbfeff383799f273a; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2bd167caf341d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x2bd167caf341d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2bd167caf341d; op2val:0xbfe2bd167caf341d; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_1011:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_1012:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_1013:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_1014:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_1015:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2334ae58482b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2334ae58482b4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2334ae58482b4; op2val:0xbfd2334ae58482b4; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_9)

inst_1016:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_1018:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_1019:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_1020:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x770acd92b7858 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x770acd92b7858 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd770acd92b7858; op2val:0xbfd770acd92b7858; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4816c7da38e40 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4816c7da38e40 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4816c7da38e40; op2val:0xbfe4816c7da38e40; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ba91758f389a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ba91758f389a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ba91758f389a; op2val:0xbfe4ba91758f389a; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x850da08f38a96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x850da08f38a96 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe850da08f38a96; op2val:0xbfe850da08f38a96; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe89a781d29de9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe89a781d29de9 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee89a781d29de9; op2val:0xbfee89a781d29de9; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_1041:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_1042:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_1043:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_1044:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_1045:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x08a0b9f5e0e90 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x08a0b9f5e0e90 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd08a0b9f5e0e90; op2val:0xbfd08a0b9f5e0e90; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_1046:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_1047:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_1048:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_1049:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_1050:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc1f20427931ec and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xc1f20427931ec and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc1f20427931ec; op2val:0xbfdc1f20427931ec; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_1051:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_1052:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_1053:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_1054:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_1055:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4c784c57a6770 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x4c784c57a6770 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4c784c57a6770; op2val:0xbfc4c784c57a6770; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x608a265677dfb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x608a265677dfb and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe608a265677dfb; op2val:0xbfe608a265677dfb; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_1061:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_1062:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_1063:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_1064:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_1065:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb93a829006666 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb93a829006666 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb93a829006666; op2val:0xbfdb93a829006666; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e871d1465e5c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e871d1465e5c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e871d1465e5c; op2val:0xbfe0e871d1465e5c; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d8903d566b6e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x1d8903d566b6e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d8903d566b6e; op2val:0xbfe1d8903d566b6e; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_1076:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_1077:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_1078:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_1079:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_1080:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fa5e8b87f95c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7fa5e8b87f95c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fa5e8b87f95c; op2val:0xbfe7fa5e8b87f95c; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_1081:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_1082:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_1083:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_1084:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_1085:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3c9207d68a2dc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3c9207d68a2dc and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3c9207d68a2dc; op2val:0xbfc3c9207d68a2dc; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe247258d86c96 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe247258d86c96 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee247258d86c96; op2val:0xbfee247258d86c96; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_1091:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_1092:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_1093:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_1094:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_1095:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4f374fe5f6820 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4f374fe5f6820 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4f374fe5f6820; op2val:0xbfd4f374fe5f6820; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_1096:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_1097:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_1098:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_1099:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_1100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4de5c0dc474c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x4de5c0dc474c8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4de5c0dc474c8; op2val:0xbfb4de5c0dc474c8; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_1101:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_1102:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_1103:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_1104:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_1105:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x12d7e4c3cff50 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x12d7e4c3cff50 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd12d7e4c3cff50; op2val:0xbfd12d7e4c3cff50; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99ee09af59fa1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x99ee09af59fa1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99ee09af59fa1; op2val:0xbfe99ee09af59fa1; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc540d133e4a4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc540d133e4a4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc540d133e4a4; op2val:0xbfecc540d133e4a4; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_1116:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_1117:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_1118:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_1119:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_1120:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfc46b644350b4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xfc46b644350b4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfc46b644350b4; op2val:0xbfdfc46b644350b4; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4ca644e417739 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x4ca644e417739 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4ca644e417739; op2val:0xbfe4ca644e417739; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8eef773b64d0e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8eef773b64d0e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8eef773b64d0e; op2val:0xbfe8eef773b64d0e; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc0829ca80923 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xcc0829ca80923 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc0829ca80923; op2val:0xbfecc0829ca80923; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf455d79d2b3f4 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xf455d79d2b3f4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef455d79d2b3f4; op2val:0xbfef455d79d2b3f4; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1141:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_10)

inst_1143:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_1144:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_1145:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x98122bf05cbdc and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x98122bf05cbdc and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc98122bf05cbdc; op2val:0xbfc98122bf05cbdc; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc090d021543c6 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc090d021543c6 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec090d021543c6; op2val:0xbfec090d021543c6; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1151:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_1152:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_1153:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_1154:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_1155:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x3f3b541e02f10 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x3f3b541e02f10 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa3f3b541e02f10; op2val:0xbfa3f3b541e02f10; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed5e05d93f6b7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xed5e05d93f6b7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed5e05d93f6b7; op2val:0xbfeed5e05d93f6b7; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x427d048aa24b0 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x427d048aa24b0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe427d048aa24b0; op2val:0xbfe427d048aa24b0; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1166:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_1167:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_1168:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_1169:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_1170:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb23963f0add1a and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb23963f0add1a and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb23963f0add1a; op2val:0xbfdb23963f0add1a; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1171:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_1172:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_1173:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_1174:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_1175:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x75c29567de8e8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x75c29567de8e8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd75c29567de8e8; op2val:0xbfd75c29567de8e8; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1176:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_1177:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_1178:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_1179:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_1180:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4713a47687452 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x4713a47687452 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4713a47687452; op2val:0xbfd4713a47687452; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1181:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_1182:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_1183:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_1184:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_1185:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x70930c20807d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x70930c20807d0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb70930c20807d0; op2val:0xbfb70930c20807d0; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe8d7148bb44d1 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xe8d7148bb44d1 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee8d7148bb44d1; op2val:0xbfee8d7148bb44d1; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_1192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_1193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_1194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_1195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb51080094264f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xb51080094264f and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb51080094264f; op2val:0xbfeb51080094264f; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1196:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_1197:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_1198:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_1199:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_1200:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x79028df01427c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x79028df01427c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc79028df01427c; op2val:0xbfc79028df01427c; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1201:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_1202:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_1203:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_1204:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_1205:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa4b1aed45b4e8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa4b1aed45b4e8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca4b1aed45b4e8; op2val:0xbfca4b1aed45b4e8; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc406f952dbd28 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc406f952dbd28 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec406f952dbd28; op2val:0xbfec406f952dbd28; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8390d5bef66e7 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x8390d5bef66e7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8390d5bef66e7; op2val:0xbfe8390d5bef66e7; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1216:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_1217:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_1218:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_1219:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_1220:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7abaa7d515db8 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x7abaa7d515db8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7abaa7d515db8; op2val:0xbfd7abaa7d515db8; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1221:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_1222:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_1223:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_1224:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_1225:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c8295f13c384 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c8295f13c384 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c8295f13c384; op2val:0xbfd8c8295f13c384; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_1227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_1228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_1229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_1230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa7452da4838f8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xa7452da4838f8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca7452da4838f8; op2val:0xbfca7452da4838f8; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1231:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_1232:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_1233:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_1234:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_1235:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0xea7e132f81500 and fs2 == 1 and fe2 == 0x3f6 and fm2 == 0xea7e132f81500 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f6ea7e132f81500; op2val:0xbf6ea7e132f81500; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x194fcae078559 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x194fcae078559 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe194fcae078559; op2val:0xbfe194fcae078559; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1241:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_1242:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_1243:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_1244:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_1245:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9b86b25282b70 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x9b86b25282b70 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9b86b25282b70; op2val:0xbfa9b86b25282b70; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1246:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_1247:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_1248:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_1249:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_1250:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xadeb9ea41bf00 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xadeb9ea41bf00 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbadeb9ea41bf00; op2val:0xbfbadeb9ea41bf00; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1251:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_1252:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_1253:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_1254:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_1255:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x81c8cec3b628c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x81c8cec3b628c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc81c8cec3b628c; op2val:0xbfc81c8cec3b628c; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1256:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_1257:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_1258:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_1259:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_1260:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dca303cdac2e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2dca303cdac2e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dca303cdac2e; op2val:0xbfd2dca303cdac2e; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1261:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_1262:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_1263:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_1264:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_1265:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd66cf92883200 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xd66cf92883200 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd66cf92883200; op2val:0xbfdd66cf92883200; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1266:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_1267:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_1268:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_1269:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_11)

inst_1270:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa1153899f25d0 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xa1153899f25d0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba1153899f25d0; op2val:0xbfba1153899f25d0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1271:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_1272:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_1273:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_1274:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_1275:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x39d4d3ec372c8 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x39d4d3ec372c8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb39d4d3ec372c8; op2val:0xbfb39d4d3ec372c8; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1276:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_1277:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_1278:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_1279:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_1280:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf06d5adea99c8 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xf06d5adea99c8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf06d5adea99c8; op2val:0xbfcf06d5adea99c8; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_1282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_1283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_1284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_1285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0c04213b941b8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0c04213b941b8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0c04213b941b8; op2val:0xbfe0c04213b941b8; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1286:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_1287:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_1288:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_1289:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_1290:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8c85300264c54 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x8c85300264c54 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8c85300264c54; op2val:0xbfd8c85300264c54; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9f08198b6d14d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9f08198b6d14d and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9f08198b6d14d; op2val:0xbfe9f08198b6d14d; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1296:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_1297:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_1298:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_1299:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_1300:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb2888a6102a20 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xb2888a6102a20 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb2888a6102a20; op2val:0xbfdb2888a6102a20; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1301:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_1302:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_1303:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_1304:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_1305:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d66fa19dd440 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x9d66fa19dd440 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d66fa19dd440; op2val:0xbfd9d66fa19dd440; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1306:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_1307:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_1308:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_1309:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_1310:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa647b65b2e0c0 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xa647b65b2e0c0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda647b65b2e0c0; op2val:0xbfda647b65b2e0c0; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1311:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_1312:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_1313:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_1314:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_1315:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x283c10cd62fb0 and fs2 == 1 and fe2 == 0x3fa and fm2 == 0x283c10cd62fb0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa283c10cd62fb0; op2val:0xbfa283c10cd62fb0; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1316:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_1317:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_1318:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_1319:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_1320:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7bf8cc13e7714 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x7bf8cc13e7714 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7bf8cc13e7714; op2val:0xbfc7bf8cc13e7714; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1321:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_1322:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_1323:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_1324:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_1325:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2c7b2a700633e and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x2c7b2a700633e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2c7b2a700633e; op2val:0xbfd2c7b2a700633e; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc82991ecb5189 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xc82991ecb5189 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec82991ecb5189; op2val:0xbfec82991ecb5189; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1331:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_1332:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_1333:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_1334:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_1335:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf7de688042774 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf7de688042774 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf7de688042774; op2val:0xbfdf7de688042774; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_1337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_1338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_1339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_1340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6cfce406f0ee and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xd6cfce406f0ee and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6cfce406f0ee; op2val:0xbfed6cfce406f0ee; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1341:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_1342:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_1343:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_1344:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_1345:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9316a474fe9c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x9316a474fe9c4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9316a474fe9c4; op2val:0xbfc9316a474fe9c4; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85d4220c95feb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x85d4220c95feb and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85d4220c95feb; op2val:0xbfe85d4220c95feb; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_1352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_1353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_1354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_1355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9e2c74454f8fb and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x9e2c74454f8fb and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9e2c74454f8fb; op2val:0xbfe9e2c74454f8fb; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_1357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_1358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_1359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_1360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x597ed052f7855 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x597ed052f7855 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe597ed052f7855; op2val:0xbfe597ed052f7855; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1361:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_1362:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_1363:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_1364:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_1365:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f2646aab7a80 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x0f2646aab7a80 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f2646aab7a80; op2val:0xbfc0f2646aab7a80; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1366:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_1367:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_1368:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_1369:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_1370:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xff6a3558d6ada and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xff6a3558d6ada and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feff6a3558d6ada; op2val:0xbfeff6a3558d6ada; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1371:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_1372:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_1373:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_1374:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_1375:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x66b7ad37071c4 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x66b7ad37071c4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc66b7ad37071c4; op2val:0xbfc66b7ad37071c4; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1376:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_1377:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_1378:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_1379:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_1380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1f05bc1477e42 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x1f05bc1477e42 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1f05bc1477e42; op2val:0xbfd1f05bc1477e42; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_1382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_1383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_1384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_1385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xce21c50ac0b16 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xce21c50ac0b16 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdce21c50ac0b16; op2val:0xbfdce21c50ac0b16; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7aa0c07c039c8 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x7aa0c07c039c8 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7aa0c07c039c8; op2val:0xbfe7aa0c07c039c8; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bc55fe3aae98 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bc55fe3aae98 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bc55fe3aae98; op2val:0xbfe0bc55fe3aae98; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1396:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_12)

inst_1397:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_1398:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_1399:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_1400:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x644e85974eb18 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x644e85974eb18 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb644e85974eb18; op2val:0xbfb644e85974eb18; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21b43aabc36ef and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x21b43aabc36ef and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21b43aabc36ef; op2val:0xbfe21b43aabc36ef; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0e434f5c2c034 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0e434f5c2c034 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0e434f5c2c034; op2val:0xbfe0e434f5c2c034; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1411:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_1412:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_1413:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_1414:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_1415:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9e5bbe4c8eb20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x9e5bbe4c8eb20 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9e5bbe4c8eb20; op2val:0xbfb9e5bbe4c8eb20; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x61345679addc9 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x61345679addc9 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe61345679addc9; op2val:0xbfe61345679addc9; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1421:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_1422:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_1423:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_1424:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_1425:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x84acd365e9bf0 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x84acd365e9bf0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc84acd365e9bf0; op2val:0xbfc84acd365e9bf0; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1426:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_1427:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_1428:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_1429:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_1430:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x71ade8ef53d20 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x71ade8ef53d20 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb71ade8ef53d20; op2val:0xbfb71ade8ef53d20; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_1432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_1433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_1434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_1435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x86ca4719ad2d4 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0x86ca4719ad2d4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd86ca4719ad2d4; op2val:0xbfd86ca4719ad2d4; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6fb2f3370e67c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6fb2f3370e67c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6fb2f3370e67c; op2val:0xbfe6fb2f3370e67c; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1441:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_1442:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_1443:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_1444:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_1445:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x785e9f9028468 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0x785e9f9028468 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb785e9f9028468; op2val:0xbfb785e9f9028468; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bfb7be915b82 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x0bfb7be915b82 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bfb7be915b82; op2val:0xbfe0bfb7be915b82; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1451:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_1452:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_1453:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_1454:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_1455:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbac7ce2b8ec2c and fs2 == 1 and fe2 == 0x3fc and fm2 == 0xbac7ce2b8ec2c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbac7ce2b8ec2c; op2val:0xbfcbac7ce2b8ec2c; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1456:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_1457:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_1458:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_1459:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_1460:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf4746641cd1f2 and fs2 == 1 and fe2 == 0x3fd and fm2 == 0xf4746641cd1f2 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf4746641cd1f2; op2val:0xbfdf4746641cd1f2; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x28aad77d68b44 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x28aad77d68b44 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe28aad77d68b44; op2val:0xbfe28aad77d68b44; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1466:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and rm_val == 4  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_1467:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and rm_val == 3  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_1468:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_1469:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and rm_val == 1  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_1470:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3e9fc19d60908 and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x3e9fc19d60908 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3e9fc19d60908; op2val:0xbfc3e9fc19d60908; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_1471:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfc04b2f200426 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfc04b2f200426 and rm_val == 2  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefc04b2f200426; op2val:0xbfefc04b2f200426; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x3fc3e9fc19d60908
.dword 0x3fc3e9fc19d60908
.dword 0x3fefc04b2f200426
.dword 0xbfefc04b2f200426
.dword 0x3fefc04b2f200426
.dword 0xbfefc04b2f200426
.dword 0x3fefc04b2f200426
.dword 0x3fefc04b2f200426
.dword 0x3fefc04b2f200426
.dword 0xbfefc04b2f200426
.dword 0x3fefc04b2f200426
.dword 0xbfefc04b2f200426
.dword 0x3fd343b84468445c
.dword 0xbfd343b84468445c
.dword 0x3fd343b84468445c
.dword 0xbfd343b84468445c
.dword 0x3fd343b84468445c
.dword 0xbfd343b84468445c
.dword 0x3fd343b84468445c
.dword 0xbfd343b84468445c
.dword 0x3fd343b84468445c
.dword 0xbfd343b84468445c
.dword 0x3fe97bc82ad232bd
.dword 0xbfe97bc82ad232bd
.dword 0x3fe97bc82ad232bd
.dword 0xbfe97bc82ad232bd
.dword 0x3fe97bc82ad232bd
.dword 0xbfe97bc82ad232bd
.dword 0x3fe97bc82ad232bd
.dword 0xbfe97bc82ad232bd
.dword 0x3fe97bc82ad232bd
.dword 0xbfe97bc82ad232bd
.dword 0x3fd7366b474ed968
.dword 0xbfd7366b474ed968
.dword 0x3fd7366b474ed968
.dword 0xbfd7366b474ed968
.dword 0x3fd7366b474ed968
.dword 0xbfd7366b474ed968
.dword 0x3fd7366b474ed968
.dword 0xbfd7366b474ed968
.dword 0x3fd7366b474ed968
.dword 0xbfd7366b474ed968
.dword 0x3feb70164e941a8f
.dword 0xbfeb70164e941a8f
.dword 0x3feb70164e941a8f
.dword 0xbfeb70164e941a8f
.dword 0x3feb70164e941a8f
.dword 0xbfeb70164e941a8f
.dword 0x3feb70164e941a8f
.dword 0xbfeb70164e941a8f
.dword 0x3feb70164e941a8f
.dword 0xbfeb70164e941a8f
.dword 0x3fe17d5ca6a3715b
.dword 0xbfe17d5ca6a3715b
.dword 0x3fe17d5ca6a3715b
.dword 0xbfe17d5ca6a3715b
.dword 0x3fe17d5ca6a3715b
.dword 0xbfe17d5ca6a3715b
.dword 0x3fe17d5ca6a3715b
.dword 0xbfe17d5ca6a3715b
.dword 0x3fe17d5ca6a3715b
.dword 0xbfe17d5ca6a3715b
.dword 0x3fe22f60e34d11b1
.dword 0xbfe22f60e34d11b1
.dword 0x3fe22f60e34d11b1
.dword 0xbfe22f60e34d11b1
.dword 0x3fe22f60e34d11b1
.dword 0xbfe22f60e34d11b1
.dword 0x3fe22f60e34d11b1
.dword 0xbfe22f60e34d11b1
.dword 0x3fe22f60e34d11b1
.dword 0xbfe22f60e34d11b1
.dword 0x3fe33d3837422b91
.dword 0xbfe33d3837422b91
.dword 0x3fe33d3837422b91
.dword 0xbfe33d3837422b91
.dword 0x3fe33d3837422b91
.dword 0xbfe33d3837422b91
.dword 0x3fe33d3837422b91
.dword 0xbfe33d3837422b91
.dword 0x3fe33d3837422b91
.dword 0xbfe33d3837422b91
.dword 0x3fca27e804c22884
.dword 0xbfca27e804c22884
.dword 0x3fca27e804c22884
.dword 0xbfca27e804c22884
.dword 0x3fca27e804c22884
.dword 0xbfca27e804c22884
.dword 0x3fca27e804c22884
.dword 0xbfca27e804c22884
.dword 0x3fca27e804c22884
.dword 0xbfca27e804c22884
.dword 0x3fdc46c0bb27d794
.dword 0xbfdc46c0bb27d794
.dword 0x3fdc46c0bb27d794
.dword 0xbfdc46c0bb27d794
.dword 0x3fdc46c0bb27d794
.dword 0xbfdc46c0bb27d794
.dword 0x3fdc46c0bb27d794
.dword 0xbfdc46c0bb27d794
.dword 0x3fdc46c0bb27d794
.dword 0xbfdc46c0bb27d794
.dword 0x3fca0bbaee431ca4
.dword 0xbfca0bbaee431ca4
.dword 0x3fca0bbaee431ca4
.dword 0xbfca0bbaee431ca4
.dword 0x3fca0bbaee431ca4
.dword 0xbfca0bbaee431ca4
.dword 0x3fca0bbaee431ca4
.dword 0xbfca0bbaee431ca4
.dword 0x3fca0bbaee431ca4
.dword 0xbfca0bbaee431ca4
.dword 0x3fe0ee7d3fa2c217
.dword 0xbfe0ee7d3fa2c217
.dword 0x3fe0ee7d3fa2c217
.dword 0xbfe0ee7d3fa2c217
.dword 0x3fe0ee7d3fa2c217
.dword 0xbfe0ee7d3fa2c217
.dword 0x3fe0ee7d3fa2c217
.dword 0xbfe0ee7d3fa2c217
.dword 0x3fe0ee7d3fa2c217
.dword 0xbfe0ee7d3fa2c217
.dword 0x3fe978e962837c30
.dword 0xbfe978e962837c30
.dword 0x3fe978e962837c30
.dword 0xbfe978e962837c30
.dword 0x3fe978e962837c30
.dword 0xbfe978e962837c30
.dword 0x3fe978e962837c30
.dword 0xbfe978e962837c30
.dword 0x3fe978e962837c30
.dword 0xbfe978e962837c30
.dword 0x3fd1657d98ca36fa
.dword 0xbfd1657d98ca36fa
.dword 0x3fd1657d98ca36fa
.dword 0xbfd1657d98ca36fa
.dword 0x3fd1657d98ca36fa
.dword 0xbfd1657d98ca36fa
.dword 0x3fd1657d98ca36fa
.dword 0xbfd1657d98ca36fa
.dword 0x3fd1657d98ca36fa
.dword 0xbfd1657d98ca36fa
.dword 0x3fe2ec88b3f75ec1
.dword 0xbfe2ec88b3f75ec1
.dword 0x3fe2ec88b3f75ec1
.dword 0xbfe2ec88b3f75ec1
.dword 0x3fe2ec88b3f75ec1
.dword 0xbfe2ec88b3f75ec1
.dword 0x3fe2ec88b3f75ec1
.dword 0xbfe2ec88b3f75ec1
.dword 0x3fe2ec88b3f75ec1
.dword 0xbfe2ec88b3f75ec1
.dword 0x3faa25981e2177c0
.dword 0xbfaa25981e2177c0
.dword 0x3faa25981e2177c0
.dword 0xbfaa25981e2177c0
.dword 0x3faa25981e2177c0
.dword 0xbfaa25981e2177c0
.dword 0x3faa25981e2177c0
.dword 0xbfaa25981e2177c0
.dword 0x3faa25981e2177c0
.dword 0xbfaa25981e2177c0
.dword 0x3fe1c41b657808c9
.dword 0xbfe1c41b657808c9
.dword 0x3fe1c41b657808c9
.dword 0xbfe1c41b657808c9
.dword 0x3fe1c41b657808c9
.dword 0xbfe1c41b657808c9
.dword 0x3fe1c41b657808c9
.dword 0xbfe1c41b657808c9
.dword 0x3fe1c41b657808c9
.dword 0xbfe1c41b657808c9
.dword 0x3fd73bf2cd29da4a
.dword 0xbfd73bf2cd29da4a
.dword 0x3fd73bf2cd29da4a
.dword 0xbfd73bf2cd29da4a
.dword 0x3fd73bf2cd29da4a
.dword 0xbfd73bf2cd29da4a
.dword 0x3fd73bf2cd29da4a
.dword 0xbfd73bf2cd29da4a
.dword 0x3fd73bf2cd29da4a
.dword 0xbfd73bf2cd29da4a
.dword 0x3feb7269eda2bcd7
.dword 0xbfeb7269eda2bcd7
.dword 0x3feb7269eda2bcd7
.dword 0xbfeb7269eda2bcd7
.dword 0x3feb7269eda2bcd7
.dword 0xbfeb7269eda2bcd7
.dword 0x3feb7269eda2bcd7
.dword 0xbfeb7269eda2bcd7
.dword 0x3feb7269eda2bcd7
.dword 0xbfeb7269eda2bcd7
.dword 0x3fdcc01114aa7f56
.dword 0xbfdcc01114aa7f56
.dword 0x3fdcc01114aa7f56
.dword 0xbfdcc01114aa7f56
.dword 0x3fdcc01114aa7f56
.dword 0xbfdcc01114aa7f56
.dword 0x3fdcc01114aa7f56
.dword 0xbfdcc01114aa7f56
.dword 0x3fdcc01114aa7f56
.dword 0xbfdcc01114aa7f56
.dword 0x3feda8411778cfae
.dword 0xbfeda8411778cfae
.dword 0x3feda8411778cfae
.dword 0xbfeda8411778cfae
.dword 0x3feda8411778cfae
.dword 0xbfeda8411778cfae
.dword 0x3feda8411778cfae
.dword 0xbfeda8411778cfae
.dword 0x3feda8411778cfae
.dword 0xbfeda8411778cfae
.dword 0x3fef57a8526cbf63
.dword 0xbfef57a8526cbf63
.dword 0x3fef57a8526cbf63
.dword 0xbfef57a8526cbf63
.dword 0x3fef57a8526cbf63
.dword 0xbfef57a8526cbf63
.dword 0x3fef57a8526cbf63
.dword 0xbfef57a8526cbf63
.dword 0x3fef57a8526cbf63
.dword 0xbfef57a8526cbf63
.dword 0x3fee8512d08e5cad
.dword 0xbfee8512d08e5cad
.dword 0x3fee8512d08e5cad
.dword 0xbfee8512d08e5cad
.dword 0x3fee8512d08e5cad
.dword 0xbfee8512d08e5cad
.dword 0x3fee8512d08e5cad
.dword 0xbfee8512d08e5cad
.dword 0x3fee8512d08e5cad
.dword 0xbfee8512d08e5cad
.dword 0x3fe6afa3f2829958
.dword 0xbfe6afa3f2829958
.dword 0x3fe6afa3f2829958
.dword 0xbfe6afa3f2829958
.dword 0x3fe6afa3f2829958
.dword 0xbfe6afa3f2829958
.dword 0x3fe6afa3f2829958
.dword 0xbfe6afa3f2829958
.dword 0x3fe6afa3f2829958
.dword 0xbfe6afa3f2829958
.dword 0x3fe83aaa5b0da9bd
.dword 0xbfe83aaa5b0da9bd
.dword 0x3fe83aaa5b0da9bd
.dword 0xbfe83aaa5b0da9bd
.dword 0x3fe83aaa5b0da9bd
.dword 0xbfe83aaa5b0da9bd
.dword 0x3fe83aaa5b0da9bd
.dword 0xbfe83aaa5b0da9bd
.dword 0x3fe83aaa5b0da9bd
.dword 0xbfe83aaa5b0da9bd
.dword 0x3fc909bd1c6f5700
.dword 0xbfc909bd1c6f5700
.dword 0x3fc909bd1c6f5700
.dword 0xbfc909bd1c6f5700
.dword 0x3fc909bd1c6f5700
.dword 0xbfc909bd1c6f5700
.dword 0x3fc909bd1c6f5700
.dword 0xbfc909bd1c6f5700
.dword 0x3fc909bd1c6f5700
.dword 0xbfc909bd1c6f5700
.dword 0x3fba31f35b4c6010
.dword 0xbfba31f35b4c6010
.dword 0x3fba31f35b4c6010
.dword 0xbfba31f35b4c6010
.dword 0x3fba31f35b4c6010
.dword 0xbfba31f35b4c6010
.dword 0x3fba31f35b4c6010
.dword 0xbfba31f35b4c6010
.dword 0x3fba31f35b4c6010
.dword 0xbfba31f35b4c6010
.dword 0x3fdad35d1d89b3d2
.dword 0xbfdad35d1d89b3d2
.dword 0x3fdad35d1d89b3d2
.dword 0xbfdad35d1d89b3d2
.dword 0x3fdad35d1d89b3d2
.dword 0xbfdad35d1d89b3d2
.dword 0x3fdad35d1d89b3d2
.dword 0xbfdad35d1d89b3d2
.dword 0x3fdad35d1d89b3d2
.dword 0xbfdad35d1d89b3d2
.dword 0x3f7cde95d6a03380
.dword 0xbf7cde95d6a03380
.dword 0x3f7cde95d6a03380
.dword 0xbf7cde95d6a03380
.dword 0x3f7cde95d6a03380
.dword 0xbf7cde95d6a03380
.dword 0x3f7cde95d6a03380
.dword 0xbf7cde95d6a03380
.dword 0x3f7cde95d6a03380
.dword 0xbf7cde95d6a03380
.dword 0x3fd74d2835625624
.dword 0xbfd74d2835625624
.dword 0x3fd74d2835625624
.dword 0xbfd74d2835625624
.dword 0x3fd74d2835625624
.dword 0xbfd74d2835625624
.dword 0x3fd74d2835625624
.dword 0xbfd74d2835625624
.dword 0x3fd74d2835625624
.dword 0xbfd74d2835625624
.dword 0x3fb0187483e41018
.dword 0xbfb0187483e41018
.dword 0x3fb0187483e41018
.dword 0xbfb0187483e41018
.dword 0x3fb0187483e41018
.dword 0xbfb0187483e41018
.dword 0x3fb0187483e41018
.dword 0xbfb0187483e41018
.dword 0x3fb0187483e41018
.dword 0xbfb0187483e41018
.dword 0x3fe0da26502807f8
.dword 0xbfe0da26502807f8
.dword 0x3fe0da26502807f8
.dword 0xbfe0da26502807f8
.dword 0x3fe0da26502807f8
.dword 0xbfe0da26502807f8
.dword 0x3fe0da26502807f8
.dword 0xbfe0da26502807f8
.dword 0x3fe0da26502807f8
.dword 0xbfe0da26502807f8
.dword 0x3fa1246332ae28f0
.dword 0xbfa1246332ae28f0
.dword 0x3fa1246332ae28f0
.dword 0xbfa1246332ae28f0
.dword 0x3fa1246332ae28f0
.dword 0xbfa1246332ae28f0
.dword 0x3fa1246332ae28f0
.dword 0xbfa1246332ae28f0
.dword 0x3fa1246332ae28f0
.dword 0xbfa1246332ae28f0
.dword 0x3fa4e7786f7957b0
.dword 0xbfa4e7786f7957b0
.dword 0x3fa4e7786f7957b0
.dword 0xbfa4e7786f7957b0
.dword 0x3fa4e7786f7957b0
.dword 0xbfa4e7786f7957b0
.dword 0x3fa4e7786f7957b0
.dword 0xbfa4e7786f7957b0
.dword 0x3fa4e7786f7957b0
.dword 0xbfa4e7786f7957b0
.dword 0x3fec674aea17dd8e
.dword 0xbfec674aea17dd8e
.dword 0x3fec674aea17dd8e
.dword 0xbfec674aea17dd8e
.dword 0x3fec674aea17dd8e
.dword 0xbfec674aea17dd8e
.dword 0x3fec674aea17dd8e
.dword 0xbfec674aea17dd8e
.dword 0x3fec674aea17dd8e
.dword 0xbfec674aea17dd8e
.dword 0x3fc206889dbad440
.dword 0xbfc206889dbad440
.dword 0x3fc206889dbad440
.dword 0xbfc206889dbad440
.dword 0x3fc206889dbad440
.dword 0xbfc206889dbad440
.dword 0x3fc206889dbad440
.dword 0xbfc206889dbad440
.dword 0x3fc206889dbad440
.dword 0xbfc206889dbad440
.dword 0x3fef36112c44d337
.dword 0xbfef36112c44d337
.dword 0x3fef36112c44d337
.dword 0xbfef36112c44d337
.dword 0x3fef36112c44d337
.dword 0xbfef36112c44d337
.dword 0x3fef36112c44d337
.dword 0xbfef36112c44d337
.dword 0x3fef36112c44d337
.dword 0xbfef36112c44d337
.dword 0x3fefc524ded3b2e1
.dword 0xbfefc524ded3b2e1
.dword 0x3fefc524ded3b2e1
.dword 0xbfefc524ded3b2e1
.dword 0x3fefc524ded3b2e1
.dword 0xbfefc524ded3b2e1
.dword 0x3fefc524ded3b2e1
.dword 0xbfefc524ded3b2e1
.dword 0x3fefc524ded3b2e1
.dword 0xbfefc524ded3b2e1
.dword 0x3faf9c1686579700
.dword 0xbfaf9c1686579700
.dword 0x3faf9c1686579700
.dword 0xbfaf9c1686579700
.dword 0x3faf9c1686579700
.dword 0xbfaf9c1686579700
.dword 0x3faf9c1686579700
.dword 0xbfaf9c1686579700
.dword 0x3faf9c1686579700
.dword 0xbfaf9c1686579700
.dword 0x3fe9725a915d2a42
.dword 0xbfe9725a915d2a42
.dword 0x3fe9725a915d2a42
.dword 0xbfe9725a915d2a42
.dword 0x3fe9725a915d2a42
.dword 0xbfe9725a915d2a42
.dword 0x3fe9725a915d2a42
.dword 0xbfe9725a915d2a42
.dword 0x3fe9725a915d2a42
.dword 0xbfe9725a915d2a42
.dword 0x3fbb47d67b6a28b8
.dword 0xbfbb47d67b6a28b8
.dword 0x3fbb47d67b6a28b8
.dword 0xbfbb47d67b6a28b8
.dword 0x3fbb47d67b6a28b8
.dword 0xbfbb47d67b6a28b8
.dword 0x3fbb47d67b6a28b8
.dword 0xbfbb47d67b6a28b8
.dword 0x3fbb47d67b6a28b8
.dword 0xbfbb47d67b6a28b8
.dword 0x3fc72ac9da25ac50
.dword 0xbfc72ac9da25ac50
.dword 0x3fc72ac9da25ac50
.dword 0xbfc72ac9da25ac50
.dword 0x3fc72ac9da25ac50
.dword 0xbfc72ac9da25ac50
.dword 0x3fc72ac9da25ac50
.dword 0xbfc72ac9da25ac50
.dword 0x3fc72ac9da25ac50
.dword 0xbfc72ac9da25ac50
.dword 0x3fefae5f78adcdb1
.dword 0xbfefae5f78adcdb1
.dword 0x3fefae5f78adcdb1
.dword 0xbfefae5f78adcdb1
.dword 0x3fefae5f78adcdb1
.dword 0xbfefae5f78adcdb1
.dword 0x3fefae5f78adcdb1
.dword 0xbfefae5f78adcdb1
.dword 0x3fefae5f78adcdb1
.dword 0xbfefae5f78adcdb1
.dword 0x3fef0f56e69e43a4
.dword 0xbfef0f56e69e43a4
.dword 0x3fef0f56e69e43a4
.dword 0xbfef0f56e69e43a4
.dword 0x3fef0f56e69e43a4
.dword 0xbfef0f56e69e43a4
.dword 0x3fef0f56e69e43a4
.dword 0xbfef0f56e69e43a4
.dword 0x3fef0f56e69e43a4
.dword 0xbfef0f56e69e43a4
.dword 0x3fedbfdc6b83b57d
.dword 0xbfedbfdc6b83b57d
.dword 0x3fedbfdc6b83b57d
.dword 0xbfedbfdc6b83b57d
.dword 0x3fedbfdc6b83b57d
.dword 0xbfedbfdc6b83b57d
.dword 0x3fedbfdc6b83b57d
.dword 0xbfedbfdc6b83b57d
.dword 0x3fedbfdc6b83b57d
.dword 0xbfedbfdc6b83b57d
.dword 0x3fd1c1dbf5fab43c
.dword 0xbfd1c1dbf5fab43c
.dword 0x3fd1c1dbf5fab43c
.dword 0xbfd1c1dbf5fab43c
.dword 0x3fd1c1dbf5fab43c
.dword 0xbfd1c1dbf5fab43c
.dword 0x3fd1c1dbf5fab43c
.dword 0xbfd1c1dbf5fab43c
.dword 0x3fd1c1dbf5fab43c
.dword 0xbfd1c1dbf5fab43c
.dword 0x3fb4a9e96459a3c0
.dword 0xbfb4a9e96459a3c0
.dword 0x3fb4a9e96459a3c0
.dword 0xbfb4a9e96459a3c0
.dword 0x3fb4a9e96459a3c0
.dword 0xbfb4a9e96459a3c0
.dword 0x3fb4a9e96459a3c0
.dword 0xbfb4a9e96459a3c0
.dword 0x3fb4a9e96459a3c0
.dword 0xbfb4a9e96459a3c0
.dword 0x3fd411b9cca9f1ae
.dword 0xbfd411b9cca9f1ae
.dword 0x3fd411b9cca9f1ae
.dword 0xbfd411b9cca9f1ae
.dword 0x3fd411b9cca9f1ae
.dword 0xbfd411b9cca9f1ae
.dword 0x3fd411b9cca9f1ae
.dword 0xbfd411b9cca9f1ae
.dword 0x3fd411b9cca9f1ae
.dword 0xbfd411b9cca9f1ae
.dword 0x3fef047fa8d5aa39
.dword 0xbfef047fa8d5aa39
.dword 0x3fef047fa8d5aa39
.dword 0xbfef047fa8d5aa39
.dword 0x3fef047fa8d5aa39
.dword 0xbfef047fa8d5aa39
.dword 0x3fef047fa8d5aa39
.dword 0xbfef047fa8d5aa39
.dword 0x3fef047fa8d5aa39
.dword 0xbfef047fa8d5aa39
.dword 0x3fccf381fd806190
.dword 0xbfccf381fd806190
.dword 0x3fccf381fd806190
.dword 0xbfccf381fd806190
.dword 0x3fccf381fd806190
.dword 0xbfccf381fd806190
.dword 0x3fccf381fd806190
.dword 0xbfccf381fd806190
.dword 0x3fccf381fd806190
.dword 0xbfccf381fd806190
.dword 0x3fe2b3113bbf9129
.dword 0xbfe2b3113bbf9129
.dword 0x3fe2b3113bbf9129
.dword 0xbfe2b3113bbf9129
.dword 0x3fe2b3113bbf9129
.dword 0xbfe2b3113bbf9129
.dword 0x3fe2b3113bbf9129
.dword 0xbfe2b3113bbf9129
.dword 0x3fe2b3113bbf9129
.dword 0xbfe2b3113bbf9129
.dword 0x3fb3be191d4f9c08
.dword 0xbfb3be191d4f9c08
.dword 0x3fb3be191d4f9c08
.dword 0xbfb3be191d4f9c08
.dword 0x3fb3be191d4f9c08
.dword 0xbfb3be191d4f9c08
.dword 0x3fb3be191d4f9c08
.dword 0xbfb3be191d4f9c08
.dword 0x3fb3be191d4f9c08
.dword 0xbfb3be191d4f9c08
.dword 0x3fe25e73a46ec0f2
.dword 0xbfe25e73a46ec0f2
.dword 0x3fe25e73a46ec0f2
.dword 0xbfe25e73a46ec0f2
.dword 0x3fe25e73a46ec0f2
.dword 0xbfe25e73a46ec0f2
.dword 0x3fe25e73a46ec0f2
.dword 0xbfe25e73a46ec0f2
.dword 0x3fe25e73a46ec0f2
.dword 0xbfe25e73a46ec0f2
.dword 0x3fe63ae33037d2a3
.dword 0xbfe63ae33037d2a3
.dword 0x3fe63ae33037d2a3
.dword 0xbfe63ae33037d2a3
.dword 0x3fe63ae33037d2a3
.dword 0xbfe63ae33037d2a3
.dword 0x3fe63ae33037d2a3
.dword 0xbfe63ae33037d2a3
.dword 0x3fe63ae33037d2a3
.dword 0xbfe63ae33037d2a3
.dword 0x3fd34bbc73cf7054
.dword 0xbfd34bbc73cf7054
.dword 0x3fd34bbc73cf7054
.dword 0xbfd34bbc73cf7054
.dword 0x3fd34bbc73cf7054
.dword 0xbfd34bbc73cf7054
.dword 0x3fd34bbc73cf7054
.dword 0xbfd34bbc73cf7054
.dword 0x3fd34bbc73cf7054
.dword 0xbfd34bbc73cf7054
.dword 0x3fbc796f0bec1ca8
.dword 0xbfbc796f0bec1ca8
.dword 0x3fbc796f0bec1ca8
.dword 0xbfbc796f0bec1ca8
.dword 0x3fbc796f0bec1ca8
.dword 0xbfbc796f0bec1ca8
.dword 0x3fbc796f0bec1ca8
.dword 0xbfbc796f0bec1ca8
.dword 0x3fbc796f0bec1ca8
.dword 0xbfbc796f0bec1ca8
.dword 0x3fed023e28e50670
.dword 0xbfed023e28e50670
.dword 0x3fed023e28e50670
.dword 0xbfed023e28e50670
.dword 0x3fed023e28e50670
.dword 0xbfed023e28e50670
.dword 0x3fed023e28e50670
.dword 0xbfed023e28e50670
.dword 0x3fed023e28e50670
.dword 0xbfed023e28e50670
.dword 0x3fdb67ae48fe340e
.dword 0xbfdb67ae48fe340e
.dword 0x3fdb67ae48fe340e
.dword 0xbfdb67ae48fe340e
.dword 0x3fdb67ae48fe340e
.dword 0xbfdb67ae48fe340e
.dword 0x3fdb67ae48fe340e
.dword 0xbfdb67ae48fe340e
.dword 0x3fdb67ae48fe340e
.dword 0xbfdb67ae48fe340e
.dword 0x3fac455e9eb748f0
.dword 0xbfac455e9eb748f0
.dword 0x3fac455e9eb748f0
.dword 0xbfac455e9eb748f0
.dword 0x3fac455e9eb748f0
.dword 0xbfac455e9eb748f0
.dword 0x3fac455e9eb748f0
.dword 0xbfac455e9eb748f0
.dword 0x3fac455e9eb748f0
.dword 0xbfac455e9eb748f0
.dword 0x3fe07155e2fa7c02
.dword 0xbfe07155e2fa7c02
.dword 0x3fe07155e2fa7c02
.dword 0xbfe07155e2fa7c02
.dword 0x3fe07155e2fa7c02
.dword 0xbfe07155e2fa7c02
.dword 0x3fe07155e2fa7c02
.dword 0xbfe07155e2fa7c02
.dword 0x3fe07155e2fa7c02
.dword 0xbfe07155e2fa7c02
.dword 0x3fee924d3c646d1d
.dword 0xbfee924d3c646d1d
.dword 0x3fee924d3c646d1d
.dword 0xbfee924d3c646d1d
.dword 0x3fee924d3c646d1d
.dword 0xbfee924d3c646d1d
.dword 0x3fee924d3c646d1d
.dword 0xbfee924d3c646d1d
.dword 0x3fee924d3c646d1d
.dword 0xbfee924d3c646d1d
.dword 0x3fcaefbd55e345e8
.dword 0xbfcaefbd55e345e8
.dword 0x3fcaefbd55e345e8
.dword 0xbfcaefbd55e345e8
.dword 0x3fcaefbd55e345e8
.dword 0xbfcaefbd55e345e8
.dword 0x3fcaefbd55e345e8
.dword 0xbfcaefbd55e345e8
.dword 0x3fcaefbd55e345e8
.dword 0xbfcaefbd55e345e8
.dword 0x3fcf27331cf3cdd0
.dword 0xbfcf27331cf3cdd0
.dword 0x3fcf27331cf3cdd0
.dword 0xbfcf27331cf3cdd0
.dword 0x3fcf27331cf3cdd0
.dword 0xbfcf27331cf3cdd0
.dword 0x3fcf27331cf3cdd0
.dword 0xbfcf27331cf3cdd0
.dword 0x3fcf27331cf3cdd0
.dword 0xbfcf27331cf3cdd0
.dword 0x3fcbe3af59ba428c
.dword 0xbfcbe3af59ba428c
.dword 0x3fcbe3af59ba428c
.dword 0xbfcbe3af59ba428c
.dword 0x3fcbe3af59ba428c
.dword 0xbfcbe3af59ba428c
.dword 0x3fcbe3af59ba428c
.dword 0xbfcbe3af59ba428c
.dword 0x3fcbe3af59ba428c
.dword 0xbfcbe3af59ba428c
.dword 0x3fcb7517701108e4
.dword 0xbfcb7517701108e4
.dword 0x3fcb7517701108e4
.dword 0xbfcb7517701108e4
.dword 0x3fcb7517701108e4
.dword 0xbfcb7517701108e4
.dword 0x3fcb7517701108e4
.dword 0xbfcb7517701108e4
.dword 0x3fcb7517701108e4
.dword 0xbfcb7517701108e4
.dword 0x3fc849b33e0e1f14
.dword 0xbfc849b33e0e1f14
.dword 0x3fc849b33e0e1f14
.dword 0xbfc849b33e0e1f14
.dword 0x3fc849b33e0e1f14
.dword 0xbfc849b33e0e1f14
.dword 0x3fc849b33e0e1f14
.dword 0xbfc849b33e0e1f14
.dword 0x3fc849b33e0e1f14
.dword 0xbfc849b33e0e1f14
.dword 0x3fc050c840ade358
.dword 0xbfc050c840ade358
.dword 0x3fc050c840ade358
.dword 0xbfc050c840ade358
.dword 0x3fc050c840ade358
.dword 0xbfc050c840ade358
.dword 0x3fc050c840ade358
.dword 0xbfc050c840ade358
.dword 0x3fc050c840ade358
.dword 0xbfc050c840ade358
.dword 0x3fc9af2feb4c94ac
.dword 0xbfc9af2feb4c94ac
.dword 0x3fc9af2feb4c94ac
.dword 0xbfc9af2feb4c94ac
.dword 0x3fc9af2feb4c94ac
.dword 0xbfc9af2feb4c94ac
.dword 0x3fc9af2feb4c94ac
.dword 0xbfc9af2feb4c94ac
.dword 0x3fc9af2feb4c94ac
.dword 0xbfc9af2feb4c94ac
.dword 0x3febeeb8d82a8716
.dword 0xbfebeeb8d82a8716
.dword 0x3febeeb8d82a8716
.dword 0xbfebeeb8d82a8716
.dword 0x3febeeb8d82a8716
.dword 0xbfebeeb8d82a8716
.dword 0x3febeeb8d82a8716
.dword 0xbfebeeb8d82a8716
.dword 0x3febeeb8d82a8716
.dword 0xbfebeeb8d82a8716
.dword 0x3fd83089dda1002e
.dword 0xbfd83089dda1002e
.dword 0x3fd83089dda1002e
.dword 0xbfd83089dda1002e
.dword 0x3fd83089dda1002e
.dword 0xbfd83089dda1002e
.dword 0x3fd83089dda1002e
.dword 0xbfd83089dda1002e
.dword 0x3fd83089dda1002e
.dword 0xbfd83089dda1002e
.dword 0x3fec058a1c1f3f37
.dword 0xbfec058a1c1f3f37
.dword 0x3fec058a1c1f3f37
.dword 0xbfec058a1c1f3f37
.dword 0x3fec058a1c1f3f37
.dword 0xbfec058a1c1f3f37
.dword 0x3fec058a1c1f3f37
.dword 0xbfec058a1c1f3f37
.dword 0x3fec058a1c1f3f37
.dword 0xbfec058a1c1f3f37
.dword 0x3fd788309087574e
.dword 0xbfd788309087574e
.dword 0x3fd788309087574e
.dword 0xbfd788309087574e
.dword 0x3fd788309087574e
.dword 0xbfd788309087574e
.dword 0x3fd788309087574e
.dword 0xbfd788309087574e
.dword 0x3fd788309087574e
.dword 0xbfd788309087574e
.dword 0x3fd8f3cc5264b9d6
.dword 0xbfd8f3cc5264b9d6
.dword 0x3fd8f3cc5264b9d6
.dword 0xbfd8f3cc5264b9d6
.dword 0x3fd8f3cc5264b9d6
.dword 0xbfd8f3cc5264b9d6
.dword 0x3fd8f3cc5264b9d6
.dword 0xbfd8f3cc5264b9d6
.dword 0x3fd8f3cc5264b9d6
.dword 0xbfd8f3cc5264b9d6
.dword 0x3fe04f4d1b8e56d3
.dword 0xbfe04f4d1b8e56d3
.dword 0x3fe04f4d1b8e56d3
.dword 0xbfe04f4d1b8e56d3
.dword 0x3fe04f4d1b8e56d3
.dword 0xbfe04f4d1b8e56d3
.dword 0x3fe04f4d1b8e56d3
.dword 0xbfe04f4d1b8e56d3
.dword 0x3fe04f4d1b8e56d3
.dword 0xbfe04f4d1b8e56d3
.dword 0x3fe3bb1268ddc7f2
.dword 0xbfe3bb1268ddc7f2
.dword 0x3fe3bb1268ddc7f2
.dword 0xbfe3bb1268ddc7f2
.dword 0x3fe3bb1268ddc7f2
.dword 0xbfe3bb1268ddc7f2
.dword 0x3fe3bb1268ddc7f2
.dword 0xbfe3bb1268ddc7f2
.dword 0x3fe3bb1268ddc7f2
.dword 0xbfe3bb1268ddc7f2
.dword 0x3fdcdad41acedd26
.dword 0xbfdcdad41acedd26
.dword 0x3fdcdad41acedd26
.dword 0xbfdcdad41acedd26
.dword 0x3fdcdad41acedd26
.dword 0xbfdcdad41acedd26
.dword 0x3fdcdad41acedd26
.dword 0xbfdcdad41acedd26
.dword 0x3fdcdad41acedd26
.dword 0xbfdcdad41acedd26
.dword 0x3fd7aea1dd68a12a
.dword 0xbfd7aea1dd68a12a
.dword 0x3fd7aea1dd68a12a
.dword 0xbfd7aea1dd68a12a
.dword 0x3fd7aea1dd68a12a
.dword 0xbfd7aea1dd68a12a
.dword 0x3fd7aea1dd68a12a
.dword 0xbfd7aea1dd68a12a
.dword 0x3fd7aea1dd68a12a
.dword 0xbfd7aea1dd68a12a
.dword 0x3feef60afd9b572e
.dword 0xbfeef60afd9b572e
.dword 0x3feef60afd9b572e
.dword 0xbfeef60afd9b572e
.dword 0x3feef60afd9b572e
.dword 0xbfeef60afd9b572e
.dword 0x3feef60afd9b572e
.dword 0xbfeef60afd9b572e
.dword 0x3feef60afd9b572e
.dword 0xbfeef60afd9b572e
.dword 0x3fe0ee79c0e32d14
.dword 0xbfe0ee79c0e32d14
.dword 0x3fe0ee79c0e32d14
.dword 0xbfe0ee79c0e32d14
.dword 0x3fe0ee79c0e32d14
.dword 0xbfe0ee79c0e32d14
.dword 0x3fe0ee79c0e32d14
.dword 0xbfe0ee79c0e32d14
.dword 0x3fe0ee79c0e32d14
.dword 0xbfe0ee79c0e32d14
.dword 0x3fe3a04af62a1ac0
.dword 0xbfe3a04af62a1ac0
.dword 0x3fe3a04af62a1ac0
.dword 0xbfe3a04af62a1ac0
.dword 0x3fe3a04af62a1ac0
.dword 0xbfe3a04af62a1ac0
.dword 0x3fe3a04af62a1ac0
.dword 0xbfe3a04af62a1ac0
.dword 0x3fe3a04af62a1ac0
.dword 0xbfe3a04af62a1ac0
.dword 0x3fe2d7f083dbf9d5
.dword 0xbfe2d7f083dbf9d5
.dword 0x3fe2d7f083dbf9d5
.dword 0xbfe2d7f083dbf9d5
.dword 0x3fe2d7f083dbf9d5
.dword 0xbfe2d7f083dbf9d5
.dword 0x3fe2d7f083dbf9d5
.dword 0xbfe2d7f083dbf9d5
.dword 0x3fe2d7f083dbf9d5
.dword 0xbfe2d7f083dbf9d5
.dword 0x3feb27f230c243bc
.dword 0xbfeb27f230c243bc
.dword 0x3feb27f230c243bc
.dword 0xbfeb27f230c243bc
.dword 0x3feb27f230c243bc
.dword 0xbfeb27f230c243bc
.dword 0x3feb27f230c243bc
.dword 0xbfeb27f230c243bc
.dword 0x3feb27f230c243bc
.dword 0xbfeb27f230c243bc
.dword 0x3fd219945f58d7ce
.dword 0xbfd219945f58d7ce
.dword 0x3fd219945f58d7ce
.dword 0xbfd219945f58d7ce
.dword 0x3fd219945f58d7ce
.dword 0xbfd219945f58d7ce
.dword 0x3fd219945f58d7ce
.dword 0xbfd219945f58d7ce
.dword 0x3fd219945f58d7ce
.dword 0xbfd219945f58d7ce
.dword 0x3fe042ebb870adf0
.dword 0xbfe042ebb870adf0
.dword 0x3fe042ebb870adf0
.dword 0xbfe042ebb870adf0
.dword 0x3fe042ebb870adf0
.dword 0xbfe042ebb870adf0
.dword 0x3fe042ebb870adf0
.dword 0xbfe042ebb870adf0
.dword 0x3fe042ebb870adf0
.dword 0xbfe042ebb870adf0
.dword 0x3feed9a14a131e1f
.dword 0xbfeed9a14a131e1f
.dword 0x3feed9a14a131e1f
.dword 0xbfeed9a14a131e1f
.dword 0x3feed9a14a131e1f
.dword 0xbfeed9a14a131e1f
.dword 0x3feed9a14a131e1f
.dword 0xbfeed9a14a131e1f
.dword 0x3feed9a14a131e1f
.dword 0xbfeed9a14a131e1f
.dword 0x3fc5c480eaa7d5c8
.dword 0xbfc5c480eaa7d5c8
.dword 0x3fc5c480eaa7d5c8
.dword 0xbfc5c480eaa7d5c8
.dword 0x3fc5c480eaa7d5c8
.dword 0xbfc5c480eaa7d5c8
.dword 0x3fc5c480eaa7d5c8
.dword 0xbfc5c480eaa7d5c8
.dword 0x3fc5c480eaa7d5c8
.dword 0xbfc5c480eaa7d5c8
.dword 0x3febecfce70b503f
.dword 0xbfebecfce70b503f
.dword 0x3febecfce70b503f
.dword 0xbfebecfce70b503f
.dword 0x3febecfce70b503f
.dword 0xbfebecfce70b503f
.dword 0x3febecfce70b503f
.dword 0xbfebecfce70b503f
.dword 0x3febecfce70b503f
.dword 0xbfebecfce70b503f
.dword 0x3fee01f9eb584604
.dword 0xbfee01f9eb584604
.dword 0x3fee01f9eb584604
.dword 0xbfee01f9eb584604
.dword 0x3fee01f9eb584604
.dword 0xbfee01f9eb584604
.dword 0x3fee01f9eb584604
.dword 0xbfee01f9eb584604
.dword 0x3fee01f9eb584604
.dword 0xbfee01f9eb584604
.dword 0x3fe2f1108a769ed6
.dword 0xbfe2f1108a769ed6
.dword 0x3fe2f1108a769ed6
.dword 0xbfe2f1108a769ed6
.dword 0x3fe2f1108a769ed6
.dword 0xbfe2f1108a769ed6
.dword 0x3fe2f1108a769ed6
.dword 0xbfe2f1108a769ed6
.dword 0x3fe2f1108a769ed6
.dword 0xbfe2f1108a769ed6
.dword 0x3fad360c4b32ddf0
.dword 0xbfad360c4b32ddf0
.dword 0x3fad360c4b32ddf0
.dword 0xbfad360c4b32ddf0
.dword 0x3fad360c4b32ddf0
.dword 0xbfad360c4b32ddf0
.dword 0x3fad360c4b32ddf0
.dword 0xbfad360c4b32ddf0
.dword 0x3fad360c4b32ddf0
.dword 0xbfad360c4b32ddf0
.dword 0x3fede66f1e06a550
.dword 0xbfede66f1e06a550
.dword 0x3fede66f1e06a550
.dword 0xbfede66f1e06a550
.dword 0x3fede66f1e06a550
.dword 0xbfede66f1e06a550
.dword 0x3fede66f1e06a550
.dword 0xbfede66f1e06a550
.dword 0x3fede66f1e06a550
.dword 0xbfede66f1e06a550
.dword 0x3fdf8fa45b70180c
.dword 0xbfdf8fa45b70180c
.dword 0x3fdf8fa45b70180c
.dword 0xbfdf8fa45b70180c
.dword 0x3fdf8fa45b70180c
.dword 0xbfdf8fa45b70180c
.dword 0x3fdf8fa45b70180c
.dword 0xbfdf8fa45b70180c
.dword 0x3fdf8fa45b70180c
.dword 0xbfdf8fa45b70180c
.dword 0x3feffe0739097a0a
.dword 0xbfeffe0739097a0a
.dword 0x3feffe0739097a0a
.dword 0xbfeffe0739097a0a
.dword 0x3feffe0739097a0a
.dword 0xbfeffe0739097a0a
.dword 0x3feffe0739097a0a
.dword 0xbfeffe0739097a0a
.dword 0x3feffe0739097a0a
.dword 0xbfeffe0739097a0a
.dword 0x3fc9d92fefac1b4c
.dword 0xbfc9d92fefac1b4c
.dword 0x3fc9d92fefac1b4c
.dword 0xbfc9d92fefac1b4c
.dword 0x3fc9d92fefac1b4c
.dword 0xbfc9d92fefac1b4c
.dword 0x3fc9d92fefac1b4c
.dword 0xbfc9d92fefac1b4c
.dword 0x3fc9d92fefac1b4c
.dword 0xbfc9d92fefac1b4c
.dword 0x3fda789c8e21a57c
.dword 0xbfda789c8e21a57c
.dword 0x3fda789c8e21a57c
.dword 0xbfda789c8e21a57c
.dword 0x3fda789c8e21a57c
.dword 0xbfda789c8e21a57c
.dword 0x3fda789c8e21a57c
.dword 0xbfda789c8e21a57c
.dword 0x3fda789c8e21a57c
.dword 0xbfda789c8e21a57c
.dword 0x3fcabf31c071baf8
.dword 0xbfcabf31c071baf8
.dword 0x3fcabf31c071baf8
.dword 0xbfcabf31c071baf8
.dword 0x3fcabf31c071baf8
.dword 0xbfcabf31c071baf8
.dword 0x3fcabf31c071baf8
.dword 0xbfcabf31c071baf8
.dword 0x3fcabf31c071baf8
.dword 0xbfcabf31c071baf8
.dword 0x3fc64f92c07070fc
.dword 0xbfc64f92c07070fc
.dword 0x3fc64f92c07070fc
.dword 0xbfc64f92c07070fc
.dword 0x3fc64f92c07070fc
.dword 0xbfc64f92c07070fc
.dword 0x3fc64f92c07070fc
.dword 0xbfc64f92c07070fc
.dword 0x3fc64f92c07070fc
.dword 0xbfc64f92c07070fc
.dword 0x3fddbbbd40ca77ca
.dword 0xbfddbbbd40ca77ca
.dword 0x3fddbbbd40ca77ca
.dword 0xbfddbbbd40ca77ca
.dword 0x3fddbbbd40ca77ca
.dword 0xbfddbbbd40ca77ca
.dword 0x3fddbbbd40ca77ca
.dword 0xbfddbbbd40ca77ca
.dword 0x3fddbbbd40ca77ca
.dword 0xbfddbbbd40ca77ca
.dword 0x3fb81ec127da2ad0
.dword 0xbfb81ec127da2ad0
.dword 0x3fb81ec127da2ad0
.dword 0xbfb81ec127da2ad0
.dword 0x3fb81ec127da2ad0
.dword 0xbfb81ec127da2ad0
.dword 0x3fb81ec127da2ad0
.dword 0xbfb81ec127da2ad0
.dword 0x3fb81ec127da2ad0
.dword 0xbfb81ec127da2ad0
.dword 0x3f8363a9ec73cbc0
.dword 0xbf8363a9ec73cbc0
.dword 0x3f8363a9ec73cbc0
.dword 0xbf8363a9ec73cbc0
.dword 0x3f8363a9ec73cbc0
.dword 0xbf8363a9ec73cbc0
.dword 0x3f8363a9ec73cbc0
.dword 0xbf8363a9ec73cbc0
.dword 0x3f8363a9ec73cbc0
.dword 0xbf8363a9ec73cbc0
.dword 0x3fc8f227e7b6475c
.dword 0xbfc8f227e7b6475c
.dword 0x3fc8f227e7b6475c
.dword 0xbfc8f227e7b6475c
.dword 0x3fc8f227e7b6475c
.dword 0xbfc8f227e7b6475c
.dword 0x3fc8f227e7b6475c
.dword 0xbfc8f227e7b6475c
.dword 0x3fc8f227e7b6475c
.dword 0xbfc8f227e7b6475c
.dword 0x3fdb45ac5f465aee
.dword 0xbfdb45ac5f465aee
.dword 0x3fdb45ac5f465aee
.dword 0xbfdb45ac5f465aee
.dword 0x3fdb45ac5f465aee
.dword 0xbfdb45ac5f465aee
.dword 0x3fdb45ac5f465aee
.dword 0xbfdb45ac5f465aee
.dword 0x3fdb45ac5f465aee
.dword 0xbfdb45ac5f465aee
.dword 0x3fb952226f0bd0d0
.dword 0xbfb952226f0bd0d0
.dword 0x3fb952226f0bd0d0
.dword 0xbfb952226f0bd0d0
.dword 0x3fb952226f0bd0d0
.dword 0xbfb952226f0bd0d0
.dword 0x3fb952226f0bd0d0
.dword 0xbfb952226f0bd0d0
.dword 0x3fb952226f0bd0d0
.dword 0xbfb952226f0bd0d0
.dword 0x3fa013e3283c4340
.dword 0xbfa013e3283c4340
.dword 0x3fa013e3283c4340
.dword 0xbfa013e3283c4340
.dword 0x3fa013e3283c4340
.dword 0xbfa013e3283c4340
.dword 0x3fa013e3283c4340
.dword 0xbfa013e3283c4340
.dword 0x3fa013e3283c4340
.dword 0xbfa013e3283c4340
.dword 0x3feb3cdee88674b0
.dword 0xbfeb3cdee88674b0
.dword 0x3feb3cdee88674b0
.dword 0xbfeb3cdee88674b0
.dword 0x3feb3cdee88674b0
.dword 0xbfeb3cdee88674b0
.dword 0x3feb3cdee88674b0
.dword 0xbfeb3cdee88674b0
.dword 0x3feb3cdee88674b0
.dword 0xbfeb3cdee88674b0
.dword 0x3fe56bc55c8d6933
.dword 0xbfe56bc55c8d6933
.dword 0x3fe56bc55c8d6933
.dword 0xbfe56bc55c8d6933
.dword 0x3fe56bc55c8d6933
.dword 0xbfe56bc55c8d6933
.dword 0x3fe56bc55c8d6933
.dword 0xbfe56bc55c8d6933
.dword 0x3fe56bc55c8d6933
.dword 0xbfe56bc55c8d6933
.dword 0x3fef82c8bcf6e341
.dword 0xbfef82c8bcf6e341
.dword 0x3fef82c8bcf6e341
.dword 0xbfef82c8bcf6e341
.dword 0x3fef82c8bcf6e341
.dword 0xbfef82c8bcf6e341
.dword 0x3fef82c8bcf6e341
.dword 0xbfef82c8bcf6e341
.dword 0x3fef82c8bcf6e341
.dword 0xbfef82c8bcf6e341
.dword 0x3fe8cc0eaf7a5fbe
.dword 0xbfe8cc0eaf7a5fbe
.dword 0x3fe8cc0eaf7a5fbe
.dword 0xbfe8cc0eaf7a5fbe
.dword 0x3fe8cc0eaf7a5fbe
.dword 0xbfe8cc0eaf7a5fbe
.dword 0x3fe8cc0eaf7a5fbe
.dword 0xbfe8cc0eaf7a5fbe
.dword 0x3fe8cc0eaf7a5fbe
.dword 0xbfe8cc0eaf7a5fbe
.dword 0x3fc0c809d15a0db8
.dword 0xbfc0c809d15a0db8
.dword 0x3fc0c809d15a0db8
.dword 0xbfc0c809d15a0db8
.dword 0x3fc0c809d15a0db8
.dword 0xbfc0c809d15a0db8
.dword 0x3fc0c809d15a0db8
.dword 0xbfc0c809d15a0db8
.dword 0x3fc0c809d15a0db8
.dword 0xbfc0c809d15a0db8
.dword 0x3fede062d0ccdb01
.dword 0xbfede062d0ccdb01
.dword 0x3fede062d0ccdb01
.dword 0xbfede062d0ccdb01
.dword 0x3fede062d0ccdb01
.dword 0xbfede062d0ccdb01
.dword 0x3fede062d0ccdb01
.dword 0xbfede062d0ccdb01
.dword 0x3fede062d0ccdb01
.dword 0xbfede062d0ccdb01
.dword 0x3fd20a218a595902
.dword 0xbfd20a218a595902
.dword 0x3fd20a218a595902
.dword 0xbfd20a218a595902
.dword 0x3fd20a218a595902
.dword 0xbfd20a218a595902
.dword 0x3fd20a218a595902
.dword 0xbfd20a218a595902
.dword 0x3fd20a218a595902
.dword 0xbfd20a218a595902
.dword 0x3fc42e6be9ef9858
.dword 0xbfc42e6be9ef9858
.dword 0x3fc42e6be9ef9858
.dword 0xbfc42e6be9ef9858
.dword 0x3fc42e6be9ef9858
.dword 0xbfc42e6be9ef9858
.dword 0x3fc42e6be9ef9858
.dword 0xbfc42e6be9ef9858
.dword 0x3fc42e6be9ef9858
.dword 0xbfc42e6be9ef9858
.dword 0x3fe7c79f9596f383
.dword 0xbfe7c79f9596f383
.dword 0x3fe7c79f9596f383
.dword 0xbfe7c79f9596f383
.dword 0x3fe7c79f9596f383
.dword 0xbfe7c79f9596f383
.dword 0x3fe7c79f9596f383
.dword 0xbfe7c79f9596f383
.dword 0x3fe7c79f9596f383
.dword 0xbfe7c79f9596f383
.dword 0x3feedd71a9e64a40
.dword 0xbfeedd71a9e64a40
.dword 0x3feedd71a9e64a40
.dword 0xbfeedd71a9e64a40
.dword 0x3feedd71a9e64a40
.dword 0xbfeedd71a9e64a40
.dword 0x3feedd71a9e64a40
.dword 0xbfeedd71a9e64a40
.dword 0x3feedd71a9e64a40
.dword 0xbfeedd71a9e64a40
.dword 0x3fb9da9bf5d0d198
.dword 0xbfb9da9bf5d0d198
.dword 0x3fb9da9bf5d0d198
.dword 0xbfb9da9bf5d0d198
.dword 0x3fb9da9bf5d0d198
.dword 0xbfb9da9bf5d0d198
.dword 0x3fb9da9bf5d0d198
.dword 0xbfb9da9bf5d0d198
.dword 0x3fb9da9bf5d0d198
.dword 0xbfb9da9bf5d0d198
.dword 0x3fe51cea492d78d7
.dword 0xbfe51cea492d78d7
.dword 0x3fe51cea492d78d7
.dword 0xbfe51cea492d78d7
.dword 0x3fe51cea492d78d7
.dword 0xbfe51cea492d78d7
.dword 0x3fe51cea492d78d7
.dword 0xbfe51cea492d78d7
.dword 0x3fe51cea492d78d7
.dword 0xbfe51cea492d78d7
.dword 0x3fd8f984b08cab90
.dword 0xbfd8f984b08cab90
.dword 0x3fd8f984b08cab90
.dword 0xbfd8f984b08cab90
.dword 0x3fd8f984b08cab90
.dword 0xbfd8f984b08cab90
.dword 0x3fd8f984b08cab90
.dword 0xbfd8f984b08cab90
.dword 0x3fd8f984b08cab90
.dword 0xbfd8f984b08cab90
.dword 0x3fd51d9a79009dd0
.dword 0xbfd51d9a79009dd0
.dword 0x3fd51d9a79009dd0
.dword 0xbfd51d9a79009dd0
.dword 0x3fd51d9a79009dd0
.dword 0xbfd51d9a79009dd0
.dword 0x3fd51d9a79009dd0
.dword 0xbfd51d9a79009dd0
.dword 0x3fd51d9a79009dd0
.dword 0xbfd51d9a79009dd0
.dword 0x3fe00cc5b001dc4e
.dword 0xbfe00cc5b001dc4e
.dword 0x3fe00cc5b001dc4e
.dword 0xbfe00cc5b001dc4e
.dword 0x3fe00cc5b001dc4e
.dword 0xbfe00cc5b001dc4e
.dword 0x3fe00cc5b001dc4e
.dword 0xbfe00cc5b001dc4e
.dword 0x3fe00cc5b001dc4e
.dword 0xbfe00cc5b001dc4e
.dword 0x3fb53c6de3974a78
.dword 0xbfb53c6de3974a78
.dword 0x3fb53c6de3974a78
.dword 0xbfb53c6de3974a78
.dword 0x3fb53c6de3974a78
.dword 0xbfb53c6de3974a78
.dword 0x3fb53c6de3974a78
.dword 0xbfb53c6de3974a78
.dword 0x3fb53c6de3974a78
.dword 0xbfb53c6de3974a78
.dword 0x3fbf51e5ef521850
.dword 0xbfbf51e5ef521850
.dword 0x3fbf51e5ef521850
.dword 0xbfbf51e5ef521850
.dword 0x3fbf51e5ef521850
.dword 0xbfbf51e5ef521850
.dword 0x3fbf51e5ef521850
.dword 0xbfbf51e5ef521850
.dword 0x3fbf51e5ef521850
.dword 0xbfbf51e5ef521850
.dword 0x3fe302cf917250d4
.dword 0xbfe302cf917250d4
.dword 0x3fe302cf917250d4
.dword 0xbfe302cf917250d4
.dword 0x3fe302cf917250d4
.dword 0xbfe302cf917250d4
.dword 0x3fe302cf917250d4
.dword 0xbfe302cf917250d4
.dword 0x3fe302cf917250d4
.dword 0xbfe302cf917250d4
.dword 0x3f916b46c18c7260
.dword 0xbf916b46c18c7260
.dword 0x3f916b46c18c7260
.dword 0xbf916b46c18c7260
.dword 0x3f916b46c18c7260
.dword 0xbf916b46c18c7260
.dword 0x3f916b46c18c7260
.dword 0xbf916b46c18c7260
.dword 0x3f916b46c18c7260
.dword 0xbf916b46c18c7260
.dword 0x3feb2844d394bd65
.dword 0xbfeb2844d394bd65
.dword 0x3feb2844d394bd65
.dword 0xbfeb2844d394bd65
.dword 0x3feb2844d394bd65
.dword 0xbfeb2844d394bd65
.dword 0x3feb2844d394bd65
.dword 0xbfeb2844d394bd65
.dword 0x3feb2844d394bd65
.dword 0xbfeb2844d394bd65
.dword 0x3fe3e729828dadb2
.dword 0xbfe3e729828dadb2
.dword 0x3fe3e729828dadb2
.dword 0xbfe3e729828dadb2
.dword 0x3fe3e729828dadb2
.dword 0xbfe3e729828dadb2
.dword 0x3fe3e729828dadb2
.dword 0xbfe3e729828dadb2
.dword 0x3fe3e729828dadb2
.dword 0xbfe3e729828dadb2
.dword 0x3feb51106394dbf5
.dword 0xbfeb51106394dbf5
.dword 0x3feb51106394dbf5
.dword 0xbfeb51106394dbf5
.dword 0x3feb51106394dbf5
.dword 0xbfeb51106394dbf5
.dword 0x3feb51106394dbf5
.dword 0xbfeb51106394dbf5
.dword 0x3feb51106394dbf5
.dword 0xbfeb51106394dbf5
.dword 0x3faaa4cf4cf6dab0
.dword 0xbfaaa4cf4cf6dab0
.dword 0x3faaa4cf4cf6dab0
.dword 0xbfaaa4cf4cf6dab0
.dword 0x3faaa4cf4cf6dab0
.dword 0xbfaaa4cf4cf6dab0
.dword 0x3faaa4cf4cf6dab0
.dword 0xbfaaa4cf4cf6dab0
.dword 0x3faaa4cf4cf6dab0
.dword 0xbfaaa4cf4cf6dab0
.dword 0x3fe95e5b0d6f9e6a
.dword 0xbfe95e5b0d6f9e6a
.dword 0x3fe95e5b0d6f9e6a
.dword 0xbfe95e5b0d6f9e6a
.dword 0x3fe95e5b0d6f9e6a
.dword 0xbfe95e5b0d6f9e6a
.dword 0x3fe95e5b0d6f9e6a
.dword 0xbfe95e5b0d6f9e6a
.dword 0x3fe95e5b0d6f9e6a
.dword 0xbfe95e5b0d6f9e6a
.dword 0x3fec31e30e02fb81
.dword 0xbfec31e30e02fb81
.dword 0x3fec31e30e02fb81
.dword 0xbfec31e30e02fb81
.dword 0x3fec31e30e02fb81
.dword 0xbfec31e30e02fb81
.dword 0x3fec31e30e02fb81
.dword 0xbfec31e30e02fb81
.dword 0x3fec31e30e02fb81
.dword 0xbfec31e30e02fb81
.dword 0x3fe18c656cfd80ca
.dword 0xbfe18c656cfd80ca
.dword 0x3fe18c656cfd80ca
.dword 0xbfe18c656cfd80ca
.dword 0x3fe18c656cfd80ca
.dword 0xbfe18c656cfd80ca
.dword 0x3fe18c656cfd80ca
.dword 0xbfe18c656cfd80ca
.dword 0x3fe18c656cfd80ca
.dword 0xbfe18c656cfd80ca
.dword 0x3fd3125d2fc76fb8
.dword 0xbfd3125d2fc76fb8
.dword 0x3fd3125d2fc76fb8
.dword 0xbfd3125d2fc76fb8
.dword 0x3fd3125d2fc76fb8
.dword 0xbfd3125d2fc76fb8
.dword 0x3fd3125d2fc76fb8
.dword 0xbfd3125d2fc76fb8
.dword 0x3fd3125d2fc76fb8
.dword 0xbfd3125d2fc76fb8
.dword 0x3fedf4e02cb64ab2
.dword 0xbfedf4e02cb64ab2
.dword 0x3fedf4e02cb64ab2
.dword 0xbfedf4e02cb64ab2
.dword 0x3fedf4e02cb64ab2
.dword 0xbfedf4e02cb64ab2
.dword 0x3fedf4e02cb64ab2
.dword 0xbfedf4e02cb64ab2
.dword 0x3fedf4e02cb64ab2
.dword 0xbfedf4e02cb64ab2
.dword 0x3fe2336ff73b72c5
.dword 0xbfe2336ff73b72c5
.dword 0x3fe2336ff73b72c5
.dword 0xbfe2336ff73b72c5
.dword 0x3fe2336ff73b72c5
.dword 0xbfe2336ff73b72c5
.dword 0x3fe2336ff73b72c5
.dword 0xbfe2336ff73b72c5
.dword 0x3fe2336ff73b72c5
.dword 0xbfe2336ff73b72c5
.dword 0x3fe7a6925da8b9ff
.dword 0xbfe7a6925da8b9ff
.dword 0x3fe7a6925da8b9ff
.dword 0xbfe7a6925da8b9ff
.dword 0x3fe7a6925da8b9ff
.dword 0xbfe7a6925da8b9ff
.dword 0x3fe7a6925da8b9ff
.dword 0xbfe7a6925da8b9ff
.dword 0x3fe7a6925da8b9ff
.dword 0xbfe7a6925da8b9ff
.dword 0x3fe436a0f31e942f
.dword 0xbfe436a0f31e942f
.dword 0x3fe436a0f31e942f
.dword 0xbfe436a0f31e942f
.dword 0x3fe436a0f31e942f
.dword 0xbfe436a0f31e942f
.dword 0x3fe436a0f31e942f
.dword 0xbfe436a0f31e942f
.dword 0x3fe436a0f31e942f
.dword 0xbfe436a0f31e942f
.dword 0x3fd4864e86431094
.dword 0xbfd4864e86431094
.dword 0x3fd4864e86431094
.dword 0xbfd4864e86431094
.dword 0x3fd4864e86431094
.dword 0xbfd4864e86431094
.dword 0x3fd4864e86431094
.dword 0xbfd4864e86431094
.dword 0x3fd4864e86431094
.dword 0xbfd4864e86431094
.dword 0x3fe05d3c18d8cad5
.dword 0xbfe05d3c18d8cad5
.dword 0x3fe05d3c18d8cad5
.dword 0xbfe05d3c18d8cad5
.dword 0x3fe05d3c18d8cad5
.dword 0xbfe05d3c18d8cad5
.dword 0x3fe05d3c18d8cad5
.dword 0xbfe05d3c18d8cad5
.dword 0x3fe05d3c18d8cad5
.dword 0xbfe05d3c18d8cad5
.dword 0x3fdec8a495ae726e
.dword 0xbfdec8a495ae726e
.dword 0x3fdec8a495ae726e
.dword 0xbfdec8a495ae726e
.dword 0x3fdec8a495ae726e
.dword 0xbfdec8a495ae726e
.dword 0x3fdec8a495ae726e
.dword 0xbfdec8a495ae726e
.dword 0x3fdec8a495ae726e
.dword 0xbfdec8a495ae726e
.dword 0x3fefbfaf3f9b91d5
.dword 0xbfefbfaf3f9b91d5
.dword 0x3fefbfaf3f9b91d5
.dword 0xbfefbfaf3f9b91d5
.dword 0x3fefbfaf3f9b91d5
.dword 0xbfefbfaf3f9b91d5
.dword 0x3fefbfaf3f9b91d5
.dword 0xbfefbfaf3f9b91d5
.dword 0x3fefbfaf3f9b91d5
.dword 0xbfefbfaf3f9b91d5
.dword 0x3fd002230e3b4592
.dword 0xbfd002230e3b4592
.dword 0x3fd002230e3b4592
.dword 0xbfd002230e3b4592
.dword 0x3fd002230e3b4592
.dword 0xbfd002230e3b4592
.dword 0x3fd002230e3b4592
.dword 0xbfd002230e3b4592
.dword 0x3fd002230e3b4592
.dword 0xbfd002230e3b4592
.dword 0x3fede4aeacc4d745
.dword 0xbfede4aeacc4d745
.dword 0x3fede4aeacc4d745
.dword 0xbfede4aeacc4d745
.dword 0x3fede4aeacc4d745
.dword 0xbfede4aeacc4d745
.dword 0x3fede4aeacc4d745
.dword 0xbfede4aeacc4d745
.dword 0x3fede4aeacc4d745
.dword 0xbfede4aeacc4d745
.dword 0x3f9a0cce81168960
.dword 0xbf9a0cce81168960
.dword 0x3f9a0cce81168960
.dword 0xbf9a0cce81168960
.dword 0x3f9a0cce81168960
.dword 0xbf9a0cce81168960
.dword 0x3f9a0cce81168960
.dword 0xbf9a0cce81168960
.dword 0x3f9a0cce81168960
.dword 0xbf9a0cce81168960
.dword 0x3fd7e375537bee0a
.dword 0xbfd7e375537bee0a
.dword 0x3fd7e375537bee0a
.dword 0xbfd7e375537bee0a
.dword 0x3fd7e375537bee0a
.dword 0xbfd7e375537bee0a
.dword 0x3fd7e375537bee0a
.dword 0xbfd7e375537bee0a
.dword 0x3fd7e375537bee0a
.dword 0xbfd7e375537bee0a
.dword 0x3fbb089dbb04ccc0
.dword 0xbfbb089dbb04ccc0
.dword 0x3fbb089dbb04ccc0
.dword 0xbfbb089dbb04ccc0
.dword 0x3fbb089dbb04ccc0
.dword 0xbfbb089dbb04ccc0
.dword 0x3fbb089dbb04ccc0
.dword 0xbfbb089dbb04ccc0
.dword 0x3fbb089dbb04ccc0
.dword 0xbfbb089dbb04ccc0
.dword 0x3fe656cf46a8e04a
.dword 0xbfe656cf46a8e04a
.dword 0x3fe656cf46a8e04a
.dword 0xbfe656cf46a8e04a
.dword 0x3fe656cf46a8e04a
.dword 0xbfe656cf46a8e04a
.dword 0x3fe656cf46a8e04a
.dword 0xbfe656cf46a8e04a
.dword 0x3fe656cf46a8e04a
.dword 0xbfe656cf46a8e04a
.dword 0x3fd339d4ac04a3c4
.dword 0xbfd339d4ac04a3c4
.dword 0x3fd339d4ac04a3c4
.dword 0xbfd339d4ac04a3c4
.dword 0x3fd339d4ac04a3c4
.dword 0xbfd339d4ac04a3c4
.dword 0x3fd339d4ac04a3c4
.dword 0xbfd339d4ac04a3c4
.dword 0x3fd339d4ac04a3c4
.dword 0xbfd339d4ac04a3c4
.dword 0x3fe500ce5f80b100
.dword 0xbfe500ce5f80b100
.dword 0x3fe500ce5f80b100
.dword 0xbfe500ce5f80b100
.dword 0x3fe500ce5f80b100
.dword 0xbfe500ce5f80b100
.dword 0x3fe500ce5f80b100
.dword 0xbfe500ce5f80b100
.dword 0x3fe500ce5f80b100
.dword 0xbfe500ce5f80b100
.dword 0x3fc45f14f33be81c
.dword 0xbfc45f14f33be81c
.dword 0x3fc45f14f33be81c
.dword 0xbfc45f14f33be81c
.dword 0x3fc45f14f33be81c
.dword 0xbfc45f14f33be81c
.dword 0x3fc45f14f33be81c
.dword 0xbfc45f14f33be81c
.dword 0x3fc45f14f33be81c
.dword 0xbfc45f14f33be81c
.dword 0x3fb76237f09a3c90
.dword 0xbfb76237f09a3c90
.dword 0x3fb76237f09a3c90
.dword 0xbfb76237f09a3c90
.dword 0x3fb76237f09a3c90
.dword 0xbfb76237f09a3c90
.dword 0x3fb76237f09a3c90
.dword 0xbfb76237f09a3c90
.dword 0x3fb76237f09a3c90
.dword 0xbfb76237f09a3c90
.dword 0x3fe2ba99bf90bdaf
.dword 0xbfe2ba99bf90bdaf
.dword 0x3fe2ba99bf90bdaf
.dword 0xbfe2ba99bf90bdaf
.dword 0x3fe2ba99bf90bdaf
.dword 0xbfe2ba99bf90bdaf
.dword 0x3fe2ba99bf90bdaf
.dword 0xbfe2ba99bf90bdaf
.dword 0x3fe2ba99bf90bdaf
.dword 0xbfe2ba99bf90bdaf
.dword 0x3fe3193d04a86308
.dword 0xbfe3193d04a86308
.dword 0x3fe3193d04a86308
.dword 0xbfe3193d04a86308
.dword 0x3fe3193d04a86308
.dword 0xbfe3193d04a86308
.dword 0x3fe3193d04a86308
.dword 0xbfe3193d04a86308
.dword 0x3fe3193d04a86308
.dword 0xbfe3193d04a86308
.dword 0x3fde8658522bb3ea
.dword 0xbfde8658522bb3ea
.dword 0x3fde8658522bb3ea
.dword 0xbfde8658522bb3ea
.dword 0x3fde8658522bb3ea
.dword 0xbfde8658522bb3ea
.dword 0x3fde8658522bb3ea
.dword 0xbfde8658522bb3ea
.dword 0x3fde8658522bb3ea
.dword 0xbfde8658522bb3ea
.dword 0x3fee74af12c4bb2b
.dword 0xbfee74af12c4bb2b
.dword 0x3fee74af12c4bb2b
.dword 0xbfee74af12c4bb2b
.dword 0x3fee74af12c4bb2b
.dword 0xbfee74af12c4bb2b
.dword 0x3fee74af12c4bb2b
.dword 0xbfee74af12c4bb2b
.dword 0x3fee74af12c4bb2b
.dword 0xbfee74af12c4bb2b
.dword 0x3fe0b3b1b913f21d
.dword 0xbfe0b3b1b913f21d
.dword 0x3fe0b3b1b913f21d
.dword 0xbfe0b3b1b913f21d
.dword 0x3fe0b3b1b913f21d
.dword 0xbfe0b3b1b913f21d
.dword 0x3fe0b3b1b913f21d
.dword 0xbfe0b3b1b913f21d
.dword 0x3fe0b3b1b913f21d
.dword 0xbfe0b3b1b913f21d
.dword 0x3fdce5a21ef67ed0
.dword 0xbfdce5a21ef67ed0
.dword 0x3fdce5a21ef67ed0
.dword 0xbfdce5a21ef67ed0
.dword 0x3fdce5a21ef67ed0
.dword 0xbfdce5a21ef67ed0
.dword 0x3fdce5a21ef67ed0
.dword 0xbfdce5a21ef67ed0
.dword 0x3fdce5a21ef67ed0
.dword 0xbfdce5a21ef67ed0
.dword 0x3fe6bc29ca8e6e80
.dword 0xbfe6bc29ca8e6e80
.dword 0x3fe6bc29ca8e6e80
.dword 0xbfe6bc29ca8e6e80
.dword 0x3fe6bc29ca8e6e80
.dword 0xbfe6bc29ca8e6e80
.dword 0x3fe6bc29ca8e6e80
.dword 0xbfe6bc29ca8e6e80
.dword 0x3fe6bc29ca8e6e80
.dword 0xbfe6bc29ca8e6e80
.dword 0x3feac1a78766ff7c
.dword 0xbfeac1a78766ff7c
.dword 0x3feac1a78766ff7c
.dword 0xbfeac1a78766ff7c
.dword 0x3feac1a78766ff7c
.dword 0xbfeac1a78766ff7c
.dword 0x3feac1a78766ff7c
.dword 0xbfeac1a78766ff7c
.dword 0x3feac1a78766ff7c
.dword 0xbfeac1a78766ff7c
.dword 0x3fd8491a87b6f506
.dword 0xbfd8491a87b6f506
.dword 0x3fd8491a87b6f506
.dword 0xbfd8491a87b6f506
.dword 0x3fd8491a87b6f506
.dword 0xbfd8491a87b6f506
.dword 0x3fd8491a87b6f506
.dword 0xbfd8491a87b6f506
.dword 0x3fd8491a87b6f506
.dword 0xbfd8491a87b6f506
.dword 0x3fd2041aff401648
.dword 0xbfd2041aff401648
.dword 0x3fd2041aff401648
.dword 0xbfd2041aff401648
.dword 0x3fd2041aff401648
.dword 0xbfd2041aff401648
.dword 0x3fd2041aff401648
.dword 0xbfd2041aff401648
.dword 0x3fd2041aff401648
.dword 0xbfd2041aff401648
.dword 0x3fe554b7eea66380
.dword 0xbfe554b7eea66380
.dword 0x3fe554b7eea66380
.dword 0xbfe554b7eea66380
.dword 0x3fe554b7eea66380
.dword 0xbfe554b7eea66380
.dword 0x3fe554b7eea66380
.dword 0xbfe554b7eea66380
.dword 0x3fe554b7eea66380
.dword 0xbfe554b7eea66380
.dword 0x3fefb71d77723858
.dword 0xbfefb71d77723858
.dword 0x3fefb71d77723858
.dword 0xbfefb71d77723858
.dword 0x3fefb71d77723858
.dword 0xbfefb71d77723858
.dword 0x3fefb71d77723858
.dword 0xbfefb71d77723858
.dword 0x3fefb71d77723858
.dword 0xbfefb71d77723858
.dword 0x3fe95957527f683e
.dword 0xbfe95957527f683e
.dword 0x3fe95957527f683e
.dword 0xbfe95957527f683e
.dword 0x3fe95957527f683e
.dword 0xbfe95957527f683e
.dword 0x3fe95957527f683e
.dword 0xbfe95957527f683e
.dword 0x3fe95957527f683e
.dword 0xbfe95957527f683e
.dword 0x3fe414e54883ace8
.dword 0xbfe414e54883ace8
.dword 0x3fe414e54883ace8
.dword 0xbfe414e54883ace8
.dword 0x3fe414e54883ace8
.dword 0xbfe414e54883ace8
.dword 0x3fe414e54883ace8
.dword 0xbfe414e54883ace8
.dword 0x3fe414e54883ace8
.dword 0xbfe414e54883ace8
.dword 0x3fb8e7fcd1529f20
.dword 0xbfb8e7fcd1529f20
.dword 0x3fb8e7fcd1529f20
.dword 0xbfb8e7fcd1529f20
.dword 0x3fb8e7fcd1529f20
.dword 0xbfb8e7fcd1529f20
.dword 0x3fb8e7fcd1529f20
.dword 0xbfb8e7fcd1529f20
.dword 0x3fb8e7fcd1529f20
.dword 0xbfb8e7fcd1529f20
.dword 0x3fd60e8d1c0b4b1a
.dword 0xbfd60e8d1c0b4b1a
.dword 0x3fd60e8d1c0b4b1a
.dword 0xbfd60e8d1c0b4b1a
.dword 0x3fd60e8d1c0b4b1a
.dword 0xbfd60e8d1c0b4b1a
.dword 0x3fd60e8d1c0b4b1a
.dword 0xbfd60e8d1c0b4b1a
.dword 0x3fd60e8d1c0b4b1a
.dword 0xbfd60e8d1c0b4b1a
.dword 0x3fd00e2cd04f74da
.dword 0xbfd00e2cd04f74da
.dword 0x3fd00e2cd04f74da
.dword 0xbfd00e2cd04f74da
.dword 0x3fd00e2cd04f74da
.dword 0xbfd00e2cd04f74da
.dword 0x3fd00e2cd04f74da
.dword 0xbfd00e2cd04f74da
.dword 0x3fd00e2cd04f74da
.dword 0xbfd00e2cd04f74da
.dword 0x3fb713fe44d167d8
.dword 0xbfb713fe44d167d8
.dword 0x3fb713fe44d167d8
.dword 0xbfb713fe44d167d8
.dword 0x3fb713fe44d167d8
.dword 0xbfb713fe44d167d8
.dword 0x3fb713fe44d167d8
.dword 0xbfb713fe44d167d8
.dword 0x3fb713fe44d167d8
.dword 0xbfb713fe44d167d8
.dword 0x3fab64046884cff0
.dword 0xbfab64046884cff0
.dword 0x3fab64046884cff0
.dword 0xbfab64046884cff0
.dword 0x3fab64046884cff0
.dword 0xbfab64046884cff0
.dword 0x3fab64046884cff0
.dword 0xbfab64046884cff0
.dword 0x3fab64046884cff0
.dword 0xbfab64046884cff0
.dword 0x3fd46a8c85ec3276
.dword 0xbfd46a8c85ec3276
.dword 0x3fd46a8c85ec3276
.dword 0xbfd46a8c85ec3276
.dword 0x3fd46a8c85ec3276
.dword 0xbfd46a8c85ec3276
.dword 0x3fd46a8c85ec3276
.dword 0xbfd46a8c85ec3276
.dword 0x3fd46a8c85ec3276
.dword 0xbfd46a8c85ec3276
.dword 0x3fef67d6cfd4aff0
.dword 0xbfef67d6cfd4aff0
.dword 0x3fef67d6cfd4aff0
.dword 0xbfef67d6cfd4aff0
.dword 0x3fef67d6cfd4aff0
.dword 0xbfef67d6cfd4aff0
.dword 0x3fef67d6cfd4aff0
.dword 0xbfef67d6cfd4aff0
.dword 0x3fef67d6cfd4aff0
.dword 0xbfef67d6cfd4aff0
.dword 0x3fc066c40d8769c8
.dword 0xbfc066c40d8769c8
.dword 0x3fc066c40d8769c8
.dword 0xbfc066c40d8769c8
.dword 0x3fc066c40d8769c8
.dword 0xbfc066c40d8769c8
.dword 0x3fc066c40d8769c8
.dword 0xbfc066c40d8769c8
.dword 0x3fc066c40d8769c8
.dword 0xbfc066c40d8769c8
.dword 0x3fd6599142d7295a
.dword 0xbfd6599142d7295a
.dword 0x3fd6599142d7295a
.dword 0xbfd6599142d7295a
.dword 0x3fd6599142d7295a
.dword 0xbfd6599142d7295a
.dword 0x3fd6599142d7295a
.dword 0xbfd6599142d7295a
.dword 0x3fd6599142d7295a
.dword 0xbfd6599142d7295a
.dword 0x3febbb04d162bf56
.dword 0xbfebbb04d162bf56
.dword 0x3febbb04d162bf56
.dword 0xbfebbb04d162bf56
.dword 0x3febbb04d162bf56
.dword 0xbfebbb04d162bf56
.dword 0x3febbb04d162bf56
.dword 0xbfebbb04d162bf56
.dword 0x3febbb04d162bf56
.dword 0xbfebbb04d162bf56
.dword 0x3fca948d7e25c484
.dword 0xbfca948d7e25c484
.dword 0x3fca948d7e25c484
.dword 0xbfca948d7e25c484
.dword 0x3fca948d7e25c484
.dword 0xbfca948d7e25c484
.dword 0x3fca948d7e25c484
.dword 0xbfca948d7e25c484
.dword 0x3fca948d7e25c484
.dword 0xbfca948d7e25c484
.dword 0x3fe7358b50582f8d
.dword 0xbfe7358b50582f8d
.dword 0x3fe7358b50582f8d
.dword 0xbfe7358b50582f8d
.dword 0x3fe7358b50582f8d
.dword 0xbfe7358b50582f8d
.dword 0x3fe7358b50582f8d
.dword 0xbfe7358b50582f8d
.dword 0x3fe7358b50582f8d
.dword 0xbfe7358b50582f8d
.dword 0x3fe34e43d17d4c2d
.dword 0xbfe34e43d17d4c2d
.dword 0x3fe34e43d17d4c2d
.dword 0xbfe34e43d17d4c2d
.dword 0x3fe34e43d17d4c2d
.dword 0xbfe34e43d17d4c2d
.dword 0x3fe34e43d17d4c2d
.dword 0xbfe34e43d17d4c2d
.dword 0x3fe34e43d17d4c2d
.dword 0xbfe34e43d17d4c2d
.dword 0x3feccb51de18fae1
.dword 0xbfeccb51de18fae1
.dword 0x3feccb51de18fae1
.dword 0xbfeccb51de18fae1
.dword 0x3feccb51de18fae1
.dword 0xbfeccb51de18fae1
.dword 0x3feccb51de18fae1
.dword 0xbfeccb51de18fae1
.dword 0x3feccb51de18fae1
.dword 0xbfeccb51de18fae1
.dword 0x3fe70a61a13eef5f
.dword 0xbfe70a61a13eef5f
.dword 0x3fe70a61a13eef5f
.dword 0xbfe70a61a13eef5f
.dword 0x3fe70a61a13eef5f
.dword 0xbfe70a61a13eef5f
.dword 0x3fe70a61a13eef5f
.dword 0xbfe70a61a13eef5f
.dword 0x3fe70a61a13eef5f
.dword 0xbfe70a61a13eef5f
.dword 0x3fd6726f6e697040
.dword 0xbfd6726f6e697040
.dword 0x3fd6726f6e697040
.dword 0xbfd6726f6e697040
.dword 0x3fd6726f6e697040
.dword 0xbfd6726f6e697040
.dword 0x3fd6726f6e697040
.dword 0xbfd6726f6e697040
.dword 0x3fd6726f6e697040
.dword 0xbfd6726f6e697040
.dword 0x3fecdef35f3cf813
.dword 0xbfecdef35f3cf813
.dword 0x3fecdef35f3cf813
.dword 0xbfecdef35f3cf813
.dword 0x3fecdef35f3cf813
.dword 0xbfecdef35f3cf813
.dword 0x3fecdef35f3cf813
.dword 0xbfecdef35f3cf813
.dword 0x3fecdef35f3cf813
.dword 0xbfecdef35f3cf813
.dword 0x3fc6b0bcb530144c
.dword 0xbfc6b0bcb530144c
.dword 0x3fc6b0bcb530144c
.dword 0xbfc6b0bcb530144c
.dword 0x3fc6b0bcb530144c
.dword 0xbfc6b0bcb530144c
.dword 0x3fc6b0bcb530144c
.dword 0xbfc6b0bcb530144c
.dword 0x3fc6b0bcb530144c
.dword 0xbfc6b0bcb530144c
.dword 0x3fd2175c79f643a2
.dword 0xbfd2175c79f643a2
.dword 0x3fd2175c79f643a2
.dword 0xbfd2175c79f643a2
.dword 0x3fd2175c79f643a2
.dword 0xbfd2175c79f643a2
.dword 0x3fd2175c79f643a2
.dword 0xbfd2175c79f643a2
.dword 0x3fd2175c79f643a2
.dword 0xbfd2175c79f643a2
.dword 0x3fe5e1e07bfc8699
.dword 0xbfe5e1e07bfc8699
.dword 0x3fe5e1e07bfc8699
.dword 0xbfe5e1e07bfc8699
.dword 0x3fe5e1e07bfc8699
.dword 0xbfe5e1e07bfc8699
.dword 0x3fe5e1e07bfc8699
.dword 0xbfe5e1e07bfc8699
.dword 0x3fe5e1e07bfc8699
.dword 0xbfe5e1e07bfc8699
.dword 0x3fe324510c33a9d0
.dword 0xbfe324510c33a9d0
.dword 0x3fe324510c33a9d0
.dword 0xbfe324510c33a9d0
.dword 0x3fe324510c33a9d0
.dword 0xbfe324510c33a9d0
.dword 0x3fe324510c33a9d0
.dword 0xbfe324510c33a9d0
.dword 0x3fe324510c33a9d0
.dword 0xbfe324510c33a9d0
.dword 0x3fd1908476f4b104
.dword 0xbfd1908476f4b104
.dword 0x3fd1908476f4b104
.dword 0xbfd1908476f4b104
.dword 0x3fd1908476f4b104
.dword 0xbfd1908476f4b104
.dword 0x3fd1908476f4b104
.dword 0xbfd1908476f4b104
.dword 0x3fd1908476f4b104
.dword 0xbfd1908476f4b104
.dword 0x3fd77b79482be294
.dword 0xbfd77b79482be294
.dword 0x3fd77b79482be294
.dword 0xbfd77b79482be294
.dword 0x3fd77b79482be294
.dword 0xbfd77b79482be294
.dword 0x3fd77b79482be294
.dword 0xbfd77b79482be294
.dword 0x3fd77b79482be294
.dword 0xbfd77b79482be294
.dword 0x3fe9fbe4b5ce45c0
.dword 0xbfe9fbe4b5ce45c0
.dword 0x3fe9fbe4b5ce45c0
.dword 0xbfe9fbe4b5ce45c0
.dword 0x3fe9fbe4b5ce45c0
.dword 0xbfe9fbe4b5ce45c0
.dword 0x3fe9fbe4b5ce45c0
.dword 0xbfe9fbe4b5ce45c0
.dword 0x3fe9fbe4b5ce45c0
.dword 0xbfe9fbe4b5ce45c0
.dword 0x3fbffeee00d38b08
.dword 0xbfbffeee00d38b08
.dword 0x3fbffeee00d38b08
.dword 0xbfbffeee00d38b08
.dword 0x3fbffeee00d38b08
.dword 0xbfbffeee00d38b08
.dword 0x3fbffeee00d38b08
.dword 0xbfbffeee00d38b08
.dword 0x3fbffeee00d38b08
.dword 0xbfbffeee00d38b08
.dword 0x3fe10f3803ccf24a
.dword 0xbfe10f3803ccf24a
.dword 0x3fe10f3803ccf24a
.dword 0xbfe10f3803ccf24a
.dword 0x3fe10f3803ccf24a
.dword 0xbfe10f3803ccf24a
.dword 0x3fe10f3803ccf24a
.dword 0xbfe10f3803ccf24a
.dword 0x3fe10f3803ccf24a
.dword 0xbfe10f3803ccf24a
.dword 0x3fe02c60f6b23bc3
.dword 0xbfe02c60f6b23bc3
.dword 0x3fe02c60f6b23bc3
.dword 0xbfe02c60f6b23bc3
.dword 0x3fe02c60f6b23bc3
.dword 0xbfe02c60f6b23bc3
.dword 0x3fe02c60f6b23bc3
.dword 0xbfe02c60f6b23bc3
.dword 0x3fe02c60f6b23bc3
.dword 0xbfe02c60f6b23bc3
.dword 0x3fcf4c466fffb77c
.dword 0xbfcf4c466fffb77c
.dword 0x3fcf4c466fffb77c
.dword 0xbfcf4c466fffb77c
.dword 0x3fcf4c466fffb77c
.dword 0xbfcf4c466fffb77c
.dword 0x3fcf4c466fffb77c
.dword 0xbfcf4c466fffb77c
.dword 0x3fcf4c466fffb77c
.dword 0xbfcf4c466fffb77c
.dword 0x3fe06851f85e2acd
.dword 0xbfe06851f85e2acd
.dword 0x3fe06851f85e2acd
.dword 0xbfe06851f85e2acd
.dword 0x3fe06851f85e2acd
.dword 0xbfe06851f85e2acd
.dword 0x3fe06851f85e2acd
.dword 0xbfe06851f85e2acd
.dword 0x3fe06851f85e2acd
.dword 0xbfe06851f85e2acd
.dword 0x3feaf43b4a36ec2c
.dword 0xbfeaf43b4a36ec2c
.dword 0x3feaf43b4a36ec2c
.dword 0xbfeaf43b4a36ec2c
.dword 0x3feaf43b4a36ec2c
.dword 0xbfeaf43b4a36ec2c
.dword 0x3feaf43b4a36ec2c
.dword 0xbfeaf43b4a36ec2c
.dword 0x3feaf43b4a36ec2c
.dword 0xbfeaf43b4a36ec2c
.dword 0x3fe1bfacc3be9497
.dword 0xbfe1bfacc3be9497
.dword 0x3fe1bfacc3be9497
.dword 0xbfe1bfacc3be9497
.dword 0x3fe1bfacc3be9497
.dword 0xbfe1bfacc3be9497
.dword 0x3fe1bfacc3be9497
.dword 0xbfe1bfacc3be9497
.dword 0x3fe1bfacc3be9497
.dword 0xbfe1bfacc3be9497
.dword 0x3fd59e952253f4a6
.dword 0xbfd59e952253f4a6
.dword 0x3fd59e952253f4a6
.dword 0xbfd59e952253f4a6
.dword 0x3fd59e952253f4a6
.dword 0xbfd59e952253f4a6
.dword 0x3fd59e952253f4a6
.dword 0xbfd59e952253f4a6
.dword 0x3fd59e952253f4a6
.dword 0xbfd59e952253f4a6
.dword 0x3fd315393375d110
.dword 0xbfd315393375d110
.dword 0x3fd315393375d110
.dword 0xbfd315393375d110
.dword 0x3fd315393375d110
.dword 0xbfd315393375d110
.dword 0x3fd315393375d110
.dword 0xbfd315393375d110
.dword 0x3fd315393375d110
.dword 0xbfd315393375d110
.dword 0x3fe2bd2ecbdfb28b
.dword 0xbfe2bd2ecbdfb28b
.dword 0x3fe2bd2ecbdfb28b
.dword 0xbfe2bd2ecbdfb28b
.dword 0x3fe2bd2ecbdfb28b
.dword 0xbfe2bd2ecbdfb28b
.dword 0x3fe2bd2ecbdfb28b
.dword 0xbfe2bd2ecbdfb28b
.dword 0x3fe2bd2ecbdfb28b
.dword 0xbfe2bd2ecbdfb28b
.dword 0x3fbfe440aa706f00
.dword 0xbfbfe440aa706f00
.dword 0x3fbfe440aa706f00
.dword 0xbfbfe440aa706f00
.dword 0x3fbfe440aa706f00
.dword 0xbfbfe440aa706f00
.dword 0x3fbfe440aa706f00
.dword 0xbfbfe440aa706f00
.dword 0x3fbfe440aa706f00
.dword 0xbfbfe440aa706f00
.dword 0x3fd734d9246a3808
.dword 0xbfd734d9246a3808
.dword 0x3fd734d9246a3808
.dword 0xbfd734d9246a3808
.dword 0x3fd734d9246a3808
.dword 0xbfd734d9246a3808
.dword 0x3fd734d9246a3808
.dword 0xbfd734d9246a3808
.dword 0x3fd734d9246a3808
.dword 0xbfd734d9246a3808
.dword 0x3fe54c94d35c140c
.dword 0xbfe54c94d35c140c
.dword 0x3fe54c94d35c140c
.dword 0xbfe54c94d35c140c
.dword 0x3fe54c94d35c140c
.dword 0xbfe54c94d35c140c
.dword 0x3fe54c94d35c140c
.dword 0xbfe54c94d35c140c
.dword 0x3fe54c94d35c140c
.dword 0xbfe54c94d35c140c
.dword 0x3feff383799f273a
.dword 0xbfeff383799f273a
.dword 0x3feff383799f273a
.dword 0xbfeff383799f273a
.dword 0x3feff383799f273a
.dword 0xbfeff383799f273a
.dword 0x3feff383799f273a
.dword 0xbfeff383799f273a
.dword 0x3feff383799f273a
.dword 0xbfeff383799f273a
.dword 0x3fe2bd167caf341d
.dword 0xbfe2bd167caf341d
.dword 0x3fe2bd167caf341d
.dword 0xbfe2bd167caf341d
.dword 0x3fe2bd167caf341d
.dword 0xbfe2bd167caf341d
.dword 0x3fe2bd167caf341d
.dword 0xbfe2bd167caf341d
.dword 0x3fe2bd167caf341d
.dword 0xbfe2bd167caf341d
.dword 0x3fd2334ae58482b4
.dword 0xbfd2334ae58482b4
.dword 0x3fd2334ae58482b4
.dword 0xbfd2334ae58482b4
.dword 0x3fd2334ae58482b4
.dword 0xbfd2334ae58482b4
.dword 0x3fd2334ae58482b4
.dword 0xbfd2334ae58482b4
.dword 0x3fd2334ae58482b4
.dword 0xbfd2334ae58482b4
.dword 0x3fd770acd92b7858
.dword 0xbfd770acd92b7858
.dword 0x3fd770acd92b7858
.dword 0xbfd770acd92b7858
.dword 0x3fd770acd92b7858
.dword 0xbfd770acd92b7858
.dword 0x3fd770acd92b7858
.dword 0xbfd770acd92b7858
.dword 0x3fd770acd92b7858
.dword 0xbfd770acd92b7858
.dword 0x3fe4816c7da38e40
.dword 0xbfe4816c7da38e40
.dword 0x3fe4816c7da38e40
.dword 0xbfe4816c7da38e40
.dword 0x3fe4816c7da38e40
.dword 0xbfe4816c7da38e40
.dword 0x3fe4816c7da38e40
.dword 0xbfe4816c7da38e40
.dword 0x3fe4816c7da38e40
.dword 0xbfe4816c7da38e40
.dword 0x3fe4ba91758f389a
.dword 0xbfe4ba91758f389a
.dword 0x3fe4ba91758f389a
.dword 0xbfe4ba91758f389a
.dword 0x3fe4ba91758f389a
.dword 0xbfe4ba91758f389a
.dword 0x3fe4ba91758f389a
.dword 0xbfe4ba91758f389a
.dword 0x3fe4ba91758f389a
.dword 0xbfe4ba91758f389a
.dword 0x3fe850da08f38a96
.dword 0xbfe850da08f38a96
.dword 0x3fe850da08f38a96
.dword 0xbfe850da08f38a96
.dword 0x3fe850da08f38a96
.dword 0xbfe850da08f38a96
.dword 0x3fe850da08f38a96
.dword 0xbfe850da08f38a96
.dword 0x3fe850da08f38a96
.dword 0xbfe850da08f38a96
.dword 0x3fee89a781d29de9
.dword 0xbfee89a781d29de9
.dword 0x3fee89a781d29de9
.dword 0xbfee89a781d29de9
.dword 0x3fee89a781d29de9
.dword 0xbfee89a781d29de9
.dword 0x3fee89a781d29de9
.dword 0xbfee89a781d29de9
.dword 0x3fee89a781d29de9
.dword 0xbfee89a781d29de9
.dword 0x3fd08a0b9f5e0e90
.dword 0xbfd08a0b9f5e0e90
.dword 0x3fd08a0b9f5e0e90
.dword 0xbfd08a0b9f5e0e90
.dword 0x3fd08a0b9f5e0e90
.dword 0xbfd08a0b9f5e0e90
.dword 0x3fd08a0b9f5e0e90
.dword 0xbfd08a0b9f5e0e90
.dword 0x3fd08a0b9f5e0e90
.dword 0xbfd08a0b9f5e0e90
.dword 0x3fdc1f20427931ec
.dword 0xbfdc1f20427931ec
.dword 0x3fdc1f20427931ec
.dword 0xbfdc1f20427931ec
.dword 0x3fdc1f20427931ec
.dword 0xbfdc1f20427931ec
.dword 0x3fdc1f20427931ec
.dword 0xbfdc1f20427931ec
.dword 0x3fdc1f20427931ec
.dword 0xbfdc1f20427931ec
.dword 0x3fc4c784c57a6770
.dword 0xbfc4c784c57a6770
.dword 0x3fc4c784c57a6770
.dword 0xbfc4c784c57a6770
.dword 0x3fc4c784c57a6770
.dword 0xbfc4c784c57a6770
.dword 0x3fc4c784c57a6770
.dword 0xbfc4c784c57a6770
.dword 0x3fc4c784c57a6770
.dword 0xbfc4c784c57a6770
.dword 0x3fe608a265677dfb
.dword 0xbfe608a265677dfb
.dword 0x3fe608a265677dfb
.dword 0xbfe608a265677dfb
.dword 0x3fe608a265677dfb
.dword 0xbfe608a265677dfb
.dword 0x3fe608a265677dfb
.dword 0xbfe608a265677dfb
.dword 0x3fe608a265677dfb
.dword 0xbfe608a265677dfb
.dword 0x3fdb93a829006666
.dword 0xbfdb93a829006666
.dword 0x3fdb93a829006666
.dword 0xbfdb93a829006666
.dword 0x3fdb93a829006666
.dword 0xbfdb93a829006666
.dword 0x3fdb93a829006666
.dword 0xbfdb93a829006666
.dword 0x3fdb93a829006666
.dword 0xbfdb93a829006666
.dword 0x3fe0e871d1465e5c
.dword 0xbfe0e871d1465e5c
.dword 0x3fe0e871d1465e5c
.dword 0xbfe0e871d1465e5c
.dword 0x3fe0e871d1465e5c
.dword 0xbfe0e871d1465e5c
.dword 0x3fe0e871d1465e5c
.dword 0xbfe0e871d1465e5c
.dword 0x3fe0e871d1465e5c
.dword 0xbfe0e871d1465e5c
.dword 0x3fe1d8903d566b6e
.dword 0xbfe1d8903d566b6e
.dword 0x3fe1d8903d566b6e
.dword 0xbfe1d8903d566b6e
.dword 0x3fe1d8903d566b6e
.dword 0xbfe1d8903d566b6e
.dword 0x3fe1d8903d566b6e
.dword 0xbfe1d8903d566b6e
.dword 0x3fe1d8903d566b6e
.dword 0xbfe1d8903d566b6e
.dword 0x3fe7fa5e8b87f95c
.dword 0xbfe7fa5e8b87f95c
.dword 0x3fe7fa5e8b87f95c
.dword 0xbfe7fa5e8b87f95c
.dword 0x3fe7fa5e8b87f95c
.dword 0xbfe7fa5e8b87f95c
.dword 0x3fe7fa5e8b87f95c
.dword 0xbfe7fa5e8b87f95c
.dword 0x3fe7fa5e8b87f95c
.dword 0xbfe7fa5e8b87f95c
.dword 0x3fc3c9207d68a2dc
.dword 0xbfc3c9207d68a2dc
.dword 0x3fc3c9207d68a2dc
.dword 0xbfc3c9207d68a2dc
.dword 0x3fc3c9207d68a2dc
.dword 0xbfc3c9207d68a2dc
.dword 0x3fc3c9207d68a2dc
.dword 0xbfc3c9207d68a2dc
.dword 0x3fc3c9207d68a2dc
.dword 0xbfc3c9207d68a2dc
.dword 0x3fee247258d86c96
.dword 0xbfee247258d86c96
.dword 0x3fee247258d86c96
.dword 0xbfee247258d86c96
.dword 0x3fee247258d86c96
.dword 0xbfee247258d86c96
.dword 0x3fee247258d86c96
.dword 0xbfee247258d86c96
.dword 0x3fee247258d86c96
.dword 0xbfee247258d86c96
.dword 0x3fd4f374fe5f6820
.dword 0xbfd4f374fe5f6820
.dword 0x3fd4f374fe5f6820
.dword 0xbfd4f374fe5f6820
.dword 0x3fd4f374fe5f6820
.dword 0xbfd4f374fe5f6820
.dword 0x3fd4f374fe5f6820
.dword 0xbfd4f374fe5f6820
.dword 0x3fd4f374fe5f6820
.dword 0xbfd4f374fe5f6820
.dword 0x3fb4de5c0dc474c8
.dword 0xbfb4de5c0dc474c8
.dword 0x3fb4de5c0dc474c8
.dword 0xbfb4de5c0dc474c8
.dword 0x3fb4de5c0dc474c8
.dword 0xbfb4de5c0dc474c8
.dword 0x3fb4de5c0dc474c8
.dword 0xbfb4de5c0dc474c8
.dword 0x3fb4de5c0dc474c8
.dword 0xbfb4de5c0dc474c8
.dword 0x3fd12d7e4c3cff50
.dword 0xbfd12d7e4c3cff50
.dword 0x3fd12d7e4c3cff50
.dword 0xbfd12d7e4c3cff50
.dword 0x3fd12d7e4c3cff50
.dword 0xbfd12d7e4c3cff50
.dword 0x3fd12d7e4c3cff50
.dword 0xbfd12d7e4c3cff50
.dword 0x3fd12d7e4c3cff50
.dword 0xbfd12d7e4c3cff50
.dword 0x3fe99ee09af59fa1
.dword 0xbfe99ee09af59fa1
.dword 0x3fe99ee09af59fa1
.dword 0xbfe99ee09af59fa1
.dword 0x3fe99ee09af59fa1
.dword 0xbfe99ee09af59fa1
.dword 0x3fe99ee09af59fa1
.dword 0xbfe99ee09af59fa1
.dword 0x3fe99ee09af59fa1
.dword 0xbfe99ee09af59fa1
.dword 0x3fecc540d133e4a4
.dword 0xbfecc540d133e4a4
.dword 0x3fecc540d133e4a4
.dword 0xbfecc540d133e4a4
.dword 0x3fecc540d133e4a4
.dword 0xbfecc540d133e4a4
.dword 0x3fecc540d133e4a4
.dword 0xbfecc540d133e4a4
.dword 0x3fecc540d133e4a4
.dword 0xbfecc540d133e4a4
.dword 0x3fdfc46b644350b4
.dword 0xbfdfc46b644350b4
.dword 0x3fdfc46b644350b4
.dword 0xbfdfc46b644350b4
.dword 0x3fdfc46b644350b4
.dword 0xbfdfc46b644350b4
.dword 0x3fdfc46b644350b4
.dword 0xbfdfc46b644350b4
.dword 0x3fdfc46b644350b4
.dword 0xbfdfc46b644350b4
.dword 0x3fe4ca644e417739
.dword 0xbfe4ca644e417739
.dword 0x3fe4ca644e417739
.dword 0xbfe4ca644e417739
.dword 0x3fe4ca644e417739
.dword 0xbfe4ca644e417739
.dword 0x3fe4ca644e417739
.dword 0xbfe4ca644e417739
.dword 0x3fe4ca644e417739
.dword 0xbfe4ca644e417739
.dword 0x3fe8eef773b64d0e
.dword 0xbfe8eef773b64d0e
.dword 0x3fe8eef773b64d0e
.dword 0xbfe8eef773b64d0e
.dword 0x3fe8eef773b64d0e
.dword 0xbfe8eef773b64d0e
.dword 0x3fe8eef773b64d0e
.dword 0xbfe8eef773b64d0e
.dword 0x3fe8eef773b64d0e
.dword 0xbfe8eef773b64d0e
.dword 0x3fecc0829ca80923
.dword 0xbfecc0829ca80923
.dword 0x3fecc0829ca80923
.dword 0xbfecc0829ca80923
.dword 0x3fecc0829ca80923
.dword 0xbfecc0829ca80923
.dword 0x3fecc0829ca80923
.dword 0xbfecc0829ca80923
.dword 0x3fecc0829ca80923
.dword 0xbfecc0829ca80923
.dword 0x3fef455d79d2b3f4
.dword 0xbfef455d79d2b3f4
.dword 0x3fef455d79d2b3f4
.dword 0xbfef455d79d2b3f4
.dword 0x3fef455d79d2b3f4
.dword 0xbfef455d79d2b3f4
.dword 0x3fef455d79d2b3f4
.dword 0xbfef455d79d2b3f4
.dword 0x3fef455d79d2b3f4
.dword 0xbfef455d79d2b3f4
.dword 0x3fc98122bf05cbdc
.dword 0xbfc98122bf05cbdc
.dword 0x3fc98122bf05cbdc
.dword 0xbfc98122bf05cbdc
.dword 0x3fc98122bf05cbdc
.dword 0xbfc98122bf05cbdc
.dword 0x3fc98122bf05cbdc
.dword 0xbfc98122bf05cbdc
.dword 0x3fc98122bf05cbdc
.dword 0xbfc98122bf05cbdc
.dword 0x3fec090d021543c6
.dword 0xbfec090d021543c6
.dword 0x3fec090d021543c6
.dword 0xbfec090d021543c6
.dword 0x3fec090d021543c6
.dword 0xbfec090d021543c6
.dword 0x3fec090d021543c6
.dword 0xbfec090d021543c6
.dword 0x3fec090d021543c6
.dword 0xbfec090d021543c6
.dword 0x3fa3f3b541e02f10
.dword 0xbfa3f3b541e02f10
.dword 0x3fa3f3b541e02f10
.dword 0xbfa3f3b541e02f10
.dword 0x3fa3f3b541e02f10
.dword 0xbfa3f3b541e02f10
.dword 0x3fa3f3b541e02f10
.dword 0xbfa3f3b541e02f10
.dword 0x3fa3f3b541e02f10
.dword 0xbfa3f3b541e02f10
.dword 0x3feed5e05d93f6b7
.dword 0xbfeed5e05d93f6b7
.dword 0x3feed5e05d93f6b7
.dword 0xbfeed5e05d93f6b7
.dword 0x3feed5e05d93f6b7
.dword 0xbfeed5e05d93f6b7
.dword 0x3feed5e05d93f6b7
.dword 0xbfeed5e05d93f6b7
.dword 0x3feed5e05d93f6b7
.dword 0xbfeed5e05d93f6b7
.dword 0x3fe427d048aa24b0
.dword 0xbfe427d048aa24b0
.dword 0x3fe427d048aa24b0
.dword 0xbfe427d048aa24b0
.dword 0x3fe427d048aa24b0
.dword 0xbfe427d048aa24b0
.dword 0x3fe427d048aa24b0
.dword 0xbfe427d048aa24b0
.dword 0x3fe427d048aa24b0
.dword 0xbfe427d048aa24b0
.dword 0x3fdb23963f0add1a
.dword 0xbfdb23963f0add1a
.dword 0x3fdb23963f0add1a
.dword 0xbfdb23963f0add1a
.dword 0x3fdb23963f0add1a
.dword 0xbfdb23963f0add1a
.dword 0x3fdb23963f0add1a
.dword 0xbfdb23963f0add1a
.dword 0x3fdb23963f0add1a
.dword 0xbfdb23963f0add1a
.dword 0x3fd75c29567de8e8
.dword 0xbfd75c29567de8e8
.dword 0x3fd75c29567de8e8
.dword 0xbfd75c29567de8e8
.dword 0x3fd75c29567de8e8
.dword 0xbfd75c29567de8e8
.dword 0x3fd75c29567de8e8
.dword 0xbfd75c29567de8e8
.dword 0x3fd75c29567de8e8
.dword 0xbfd75c29567de8e8
.dword 0x3fd4713a47687452
.dword 0xbfd4713a47687452
.dword 0x3fd4713a47687452
.dword 0xbfd4713a47687452
.dword 0x3fd4713a47687452
.dword 0xbfd4713a47687452
.dword 0x3fd4713a47687452
.dword 0xbfd4713a47687452
.dword 0x3fd4713a47687452
.dword 0xbfd4713a47687452
.dword 0x3fb70930c20807d0
.dword 0xbfb70930c20807d0
.dword 0x3fb70930c20807d0
.dword 0xbfb70930c20807d0
.dword 0x3fb70930c20807d0
.dword 0xbfb70930c20807d0
.dword 0x3fb70930c20807d0
.dword 0xbfb70930c20807d0
.dword 0x3fb70930c20807d0
.dword 0xbfb70930c20807d0
.dword 0x3fee8d7148bb44d1
.dword 0xbfee8d7148bb44d1
.dword 0x3fee8d7148bb44d1
.dword 0xbfee8d7148bb44d1
.dword 0x3fee8d7148bb44d1
.dword 0xbfee8d7148bb44d1
.dword 0x3fee8d7148bb44d1
.dword 0xbfee8d7148bb44d1
.dword 0x3fee8d7148bb44d1
.dword 0xbfee8d7148bb44d1
.dword 0x3feb51080094264f
.dword 0xbfeb51080094264f
.dword 0x3feb51080094264f
.dword 0xbfeb51080094264f
.dword 0x3feb51080094264f
.dword 0xbfeb51080094264f
.dword 0x3feb51080094264f
.dword 0xbfeb51080094264f
.dword 0x3feb51080094264f
.dword 0xbfeb51080094264f
.dword 0x3fc79028df01427c
.dword 0xbfc79028df01427c
.dword 0x3fc79028df01427c
.dword 0xbfc79028df01427c
.dword 0x3fc79028df01427c
.dword 0xbfc79028df01427c
.dword 0x3fc79028df01427c
.dword 0xbfc79028df01427c
.dword 0x3fc79028df01427c
.dword 0xbfc79028df01427c
.dword 0x3fca4b1aed45b4e8
.dword 0xbfca4b1aed45b4e8
.dword 0x3fca4b1aed45b4e8
.dword 0xbfca4b1aed45b4e8
.dword 0x3fca4b1aed45b4e8
.dword 0xbfca4b1aed45b4e8
.dword 0x3fca4b1aed45b4e8
.dword 0xbfca4b1aed45b4e8
.dword 0x3fca4b1aed45b4e8
.dword 0xbfca4b1aed45b4e8
.dword 0x3fec406f952dbd28
.dword 0xbfec406f952dbd28
.dword 0x3fec406f952dbd28
.dword 0xbfec406f952dbd28
.dword 0x3fec406f952dbd28
.dword 0xbfec406f952dbd28
.dword 0x3fec406f952dbd28
.dword 0xbfec406f952dbd28
.dword 0x3fec406f952dbd28
.dword 0xbfec406f952dbd28
.dword 0x3fe8390d5bef66e7
.dword 0xbfe8390d5bef66e7
.dword 0x3fe8390d5bef66e7
.dword 0xbfe8390d5bef66e7
.dword 0x3fe8390d5bef66e7
.dword 0xbfe8390d5bef66e7
.dword 0x3fe8390d5bef66e7
.dword 0xbfe8390d5bef66e7
.dword 0x3fe8390d5bef66e7
.dword 0xbfe8390d5bef66e7
.dword 0x3fd7abaa7d515db8
.dword 0xbfd7abaa7d515db8
.dword 0x3fd7abaa7d515db8
.dword 0xbfd7abaa7d515db8
.dword 0x3fd7abaa7d515db8
.dword 0xbfd7abaa7d515db8
.dword 0x3fd7abaa7d515db8
.dword 0xbfd7abaa7d515db8
.dword 0x3fd7abaa7d515db8
.dword 0xbfd7abaa7d515db8
.dword 0x3fd8c8295f13c384
.dword 0xbfd8c8295f13c384
.dword 0x3fd8c8295f13c384
.dword 0xbfd8c8295f13c384
.dword 0x3fd8c8295f13c384
.dword 0xbfd8c8295f13c384
.dword 0x3fd8c8295f13c384
.dword 0xbfd8c8295f13c384
.dword 0x3fd8c8295f13c384
.dword 0xbfd8c8295f13c384
.dword 0x3fca7452da4838f8
.dword 0xbfca7452da4838f8
.dword 0x3fca7452da4838f8
.dword 0xbfca7452da4838f8
.dword 0x3fca7452da4838f8
.dword 0xbfca7452da4838f8
.dword 0x3fca7452da4838f8
.dword 0xbfca7452da4838f8
.dword 0x3fca7452da4838f8
.dword 0xbfca7452da4838f8
.dword 0x3f6ea7e132f81500
.dword 0xbf6ea7e132f81500
.dword 0x3f6ea7e132f81500
.dword 0xbf6ea7e132f81500
.dword 0x3f6ea7e132f81500
.dword 0xbf6ea7e132f81500
.dword 0x3f6ea7e132f81500
.dword 0xbf6ea7e132f81500
.dword 0x3f6ea7e132f81500
.dword 0xbf6ea7e132f81500
.dword 0x3fe194fcae078559
.dword 0xbfe194fcae078559
.dword 0x3fe194fcae078559
.dword 0xbfe194fcae078559
.dword 0x3fe194fcae078559
.dword 0xbfe194fcae078559
.dword 0x3fe194fcae078559
.dword 0xbfe194fcae078559
.dword 0x3fe194fcae078559
.dword 0xbfe194fcae078559
.dword 0x3fa9b86b25282b70
.dword 0xbfa9b86b25282b70
.dword 0x3fa9b86b25282b70
.dword 0xbfa9b86b25282b70
.dword 0x3fa9b86b25282b70
.dword 0xbfa9b86b25282b70
.dword 0x3fa9b86b25282b70
.dword 0xbfa9b86b25282b70
.dword 0x3fa9b86b25282b70
.dword 0xbfa9b86b25282b70
.dword 0x3fbadeb9ea41bf00
.dword 0xbfbadeb9ea41bf00
.dword 0x3fbadeb9ea41bf00
.dword 0xbfbadeb9ea41bf00
.dword 0x3fbadeb9ea41bf00
.dword 0xbfbadeb9ea41bf00
.dword 0x3fbadeb9ea41bf00
.dword 0xbfbadeb9ea41bf00
.dword 0x3fbadeb9ea41bf00
.dword 0xbfbadeb9ea41bf00
.dword 0x3fc81c8cec3b628c
.dword 0xbfc81c8cec3b628c
.dword 0x3fc81c8cec3b628c
.dword 0xbfc81c8cec3b628c
.dword 0x3fc81c8cec3b628c
.dword 0xbfc81c8cec3b628c
.dword 0x3fc81c8cec3b628c
.dword 0xbfc81c8cec3b628c
.dword 0x3fc81c8cec3b628c
.dword 0xbfc81c8cec3b628c
.dword 0x3fd2dca303cdac2e
.dword 0xbfd2dca303cdac2e
.dword 0x3fd2dca303cdac2e
.dword 0xbfd2dca303cdac2e
.dword 0x3fd2dca303cdac2e
.dword 0xbfd2dca303cdac2e
.dword 0x3fd2dca303cdac2e
.dword 0xbfd2dca303cdac2e
.dword 0x3fd2dca303cdac2e
.dword 0xbfd2dca303cdac2e
.dword 0x3fdd66cf92883200
.dword 0xbfdd66cf92883200
.dword 0x3fdd66cf92883200
.dword 0xbfdd66cf92883200
.dword 0x3fdd66cf92883200
.dword 0xbfdd66cf92883200
.dword 0x3fdd66cf92883200
.dword 0xbfdd66cf92883200
.dword 0x3fdd66cf92883200
.dword 0xbfdd66cf92883200
.dword 0x3fba1153899f25d0
.dword 0xbfba1153899f25d0
.dword 0x3fba1153899f25d0
.dword 0xbfba1153899f25d0
.dword 0x3fba1153899f25d0
.dword 0xbfba1153899f25d0
.dword 0x3fba1153899f25d0
.dword 0xbfba1153899f25d0
.dword 0x3fba1153899f25d0
.dword 0xbfba1153899f25d0
.dword 0x3fb39d4d3ec372c8
.dword 0xbfb39d4d3ec372c8
.dword 0x3fb39d4d3ec372c8
.dword 0xbfb39d4d3ec372c8
.dword 0x3fb39d4d3ec372c8
.dword 0xbfb39d4d3ec372c8
.dword 0x3fb39d4d3ec372c8
.dword 0xbfb39d4d3ec372c8
.dword 0x3fb39d4d3ec372c8
.dword 0xbfb39d4d3ec372c8
.dword 0x3fcf06d5adea99c8
.dword 0xbfcf06d5adea99c8
.dword 0x3fcf06d5adea99c8
.dword 0xbfcf06d5adea99c8
.dword 0x3fcf06d5adea99c8
.dword 0xbfcf06d5adea99c8
.dword 0x3fcf06d5adea99c8
.dword 0xbfcf06d5adea99c8
.dword 0x3fcf06d5adea99c8
.dword 0xbfcf06d5adea99c8
.dword 0x3fe0c04213b941b8
.dword 0xbfe0c04213b941b8
.dword 0x3fe0c04213b941b8
.dword 0xbfe0c04213b941b8
.dword 0x3fe0c04213b941b8
.dword 0xbfe0c04213b941b8
.dword 0x3fe0c04213b941b8
.dword 0xbfe0c04213b941b8
.dword 0x3fe0c04213b941b8
.dword 0xbfe0c04213b941b8
.dword 0x3fd8c85300264c54
.dword 0xbfd8c85300264c54
.dword 0x3fd8c85300264c54
.dword 0xbfd8c85300264c54
.dword 0x3fd8c85300264c54
.dword 0xbfd8c85300264c54
.dword 0x3fd8c85300264c54
.dword 0xbfd8c85300264c54
.dword 0x3fd8c85300264c54
.dword 0xbfd8c85300264c54
.dword 0x3fe9f08198b6d14d
.dword 0xbfe9f08198b6d14d
.dword 0x3fe9f08198b6d14d
.dword 0xbfe9f08198b6d14d
.dword 0x3fe9f08198b6d14d
.dword 0xbfe9f08198b6d14d
.dword 0x3fe9f08198b6d14d
.dword 0xbfe9f08198b6d14d
.dword 0x3fe9f08198b6d14d
.dword 0xbfe9f08198b6d14d
.dword 0x3fdb2888a6102a20
.dword 0xbfdb2888a6102a20
.dword 0x3fdb2888a6102a20
.dword 0xbfdb2888a6102a20
.dword 0x3fdb2888a6102a20
.dword 0xbfdb2888a6102a20
.dword 0x3fdb2888a6102a20
.dword 0xbfdb2888a6102a20
.dword 0x3fdb2888a6102a20
.dword 0xbfdb2888a6102a20
.dword 0x3fd9d66fa19dd440
.dword 0xbfd9d66fa19dd440
.dword 0x3fd9d66fa19dd440
.dword 0xbfd9d66fa19dd440
.dword 0x3fd9d66fa19dd440
.dword 0xbfd9d66fa19dd440
.dword 0x3fd9d66fa19dd440
.dword 0xbfd9d66fa19dd440
.dword 0x3fd9d66fa19dd440
.dword 0xbfd9d66fa19dd440
.dword 0x3fda647b65b2e0c0
.dword 0xbfda647b65b2e0c0
.dword 0x3fda647b65b2e0c0
.dword 0xbfda647b65b2e0c0
.dword 0x3fda647b65b2e0c0
.dword 0xbfda647b65b2e0c0
.dword 0x3fda647b65b2e0c0
.dword 0xbfda647b65b2e0c0
.dword 0x3fda647b65b2e0c0
.dword 0xbfda647b65b2e0c0
.dword 0x3fa283c10cd62fb0
.dword 0xbfa283c10cd62fb0
.dword 0x3fa283c10cd62fb0
.dword 0xbfa283c10cd62fb0
.dword 0x3fa283c10cd62fb0
.dword 0xbfa283c10cd62fb0
.dword 0x3fa283c10cd62fb0
.dword 0xbfa283c10cd62fb0
.dword 0x3fa283c10cd62fb0
.dword 0xbfa283c10cd62fb0
.dword 0x3fc7bf8cc13e7714
.dword 0xbfc7bf8cc13e7714
.dword 0x3fc7bf8cc13e7714
.dword 0xbfc7bf8cc13e7714
.dword 0x3fc7bf8cc13e7714
.dword 0xbfc7bf8cc13e7714
.dword 0x3fc7bf8cc13e7714
.dword 0xbfc7bf8cc13e7714
.dword 0x3fc7bf8cc13e7714
.dword 0xbfc7bf8cc13e7714
.dword 0x3fd2c7b2a700633e
.dword 0xbfd2c7b2a700633e
.dword 0x3fd2c7b2a700633e
.dword 0xbfd2c7b2a700633e
.dword 0x3fd2c7b2a700633e
.dword 0xbfd2c7b2a700633e
.dword 0x3fd2c7b2a700633e
.dword 0xbfd2c7b2a700633e
.dword 0x3fd2c7b2a700633e
.dword 0xbfd2c7b2a700633e
.dword 0x3fec82991ecb5189
.dword 0xbfec82991ecb5189
.dword 0x3fec82991ecb5189
.dword 0xbfec82991ecb5189
.dword 0x3fec82991ecb5189
.dword 0xbfec82991ecb5189
.dword 0x3fec82991ecb5189
.dword 0xbfec82991ecb5189
.dword 0x3fec82991ecb5189
.dword 0xbfec82991ecb5189
.dword 0x3fdf7de688042774
.dword 0xbfdf7de688042774
.dword 0x3fdf7de688042774
.dword 0xbfdf7de688042774
.dword 0x3fdf7de688042774
.dword 0xbfdf7de688042774
.dword 0x3fdf7de688042774
.dword 0xbfdf7de688042774
.dword 0x3fdf7de688042774
.dword 0xbfdf7de688042774
.dword 0x3fed6cfce406f0ee
.dword 0xbfed6cfce406f0ee
.dword 0x3fed6cfce406f0ee
.dword 0xbfed6cfce406f0ee
.dword 0x3fed6cfce406f0ee
.dword 0xbfed6cfce406f0ee
.dword 0x3fed6cfce406f0ee
.dword 0xbfed6cfce406f0ee
.dword 0x3fed6cfce406f0ee
.dword 0xbfed6cfce406f0ee
.dword 0x3fc9316a474fe9c4
.dword 0xbfc9316a474fe9c4
.dword 0x3fc9316a474fe9c4
.dword 0xbfc9316a474fe9c4
.dword 0x3fc9316a474fe9c4
.dword 0xbfc9316a474fe9c4
.dword 0x3fc9316a474fe9c4
.dword 0xbfc9316a474fe9c4
.dword 0x3fc9316a474fe9c4
.dword 0xbfc9316a474fe9c4
.dword 0x3fe85d4220c95feb
.dword 0xbfe85d4220c95feb
.dword 0x3fe85d4220c95feb
.dword 0xbfe85d4220c95feb
.dword 0x3fe85d4220c95feb
.dword 0xbfe85d4220c95feb
.dword 0x3fe85d4220c95feb
.dword 0xbfe85d4220c95feb
.dword 0x3fe85d4220c95feb
.dword 0xbfe85d4220c95feb
.dword 0x3fe9e2c74454f8fb
.dword 0xbfe9e2c74454f8fb
.dword 0x3fe9e2c74454f8fb
.dword 0xbfe9e2c74454f8fb
.dword 0x3fe9e2c74454f8fb
.dword 0xbfe9e2c74454f8fb
.dword 0x3fe9e2c74454f8fb
.dword 0xbfe9e2c74454f8fb
.dword 0x3fe9e2c74454f8fb
.dword 0xbfe9e2c74454f8fb
.dword 0x3fe597ed052f7855
.dword 0xbfe597ed052f7855
.dword 0x3fe597ed052f7855
.dword 0xbfe597ed052f7855
.dword 0x3fe597ed052f7855
.dword 0xbfe597ed052f7855
.dword 0x3fe597ed052f7855
.dword 0xbfe597ed052f7855
.dword 0x3fe597ed052f7855
.dword 0xbfe597ed052f7855
.dword 0x3fc0f2646aab7a80
.dword 0xbfc0f2646aab7a80
.dword 0x3fc0f2646aab7a80
.dword 0xbfc0f2646aab7a80
.dword 0x3fc0f2646aab7a80
.dword 0xbfc0f2646aab7a80
.dword 0x3fc0f2646aab7a80
.dword 0xbfc0f2646aab7a80
.dword 0x3fc0f2646aab7a80
.dword 0xbfc0f2646aab7a80
.dword 0x3feff6a3558d6ada
.dword 0xbfeff6a3558d6ada
.dword 0x3feff6a3558d6ada
.dword 0xbfeff6a3558d6ada
.dword 0x3feff6a3558d6ada
.dword 0xbfeff6a3558d6ada
.dword 0x3feff6a3558d6ada
.dword 0xbfeff6a3558d6ada
.dword 0x3feff6a3558d6ada
.dword 0xbfeff6a3558d6ada
.dword 0x3fc66b7ad37071c4
.dword 0xbfc66b7ad37071c4
.dword 0x3fc66b7ad37071c4
.dword 0xbfc66b7ad37071c4
.dword 0x3fc66b7ad37071c4
.dword 0xbfc66b7ad37071c4
.dword 0x3fc66b7ad37071c4
.dword 0xbfc66b7ad37071c4
.dword 0x3fc66b7ad37071c4
.dword 0xbfc66b7ad37071c4
.dword 0x3fd1f05bc1477e42
.dword 0xbfd1f05bc1477e42
.dword 0x3fd1f05bc1477e42
.dword 0xbfd1f05bc1477e42
.dword 0x3fd1f05bc1477e42
.dword 0xbfd1f05bc1477e42
.dword 0x3fd1f05bc1477e42
.dword 0xbfd1f05bc1477e42
.dword 0x3fd1f05bc1477e42
.dword 0xbfd1f05bc1477e42
.dword 0x3fdce21c50ac0b16
.dword 0xbfdce21c50ac0b16
.dword 0x3fdce21c50ac0b16
.dword 0xbfdce21c50ac0b16
.dword 0x3fdce21c50ac0b16
.dword 0xbfdce21c50ac0b16
.dword 0x3fdce21c50ac0b16
.dword 0xbfdce21c50ac0b16
.dword 0x3fdce21c50ac0b16
.dword 0xbfdce21c50ac0b16
.dword 0x3fe7aa0c07c039c8
.dword 0xbfe7aa0c07c039c8
.dword 0x3fe7aa0c07c039c8
.dword 0xbfe7aa0c07c039c8
.dword 0x3fe7aa0c07c039c8
.dword 0xbfe7aa0c07c039c8
.dword 0x3fe7aa0c07c039c8
.dword 0xbfe7aa0c07c039c8
.dword 0x3fe7aa0c07c039c8
.dword 0xbfe7aa0c07c039c8
.dword 0x3fe0bc55fe3aae98
.dword 0xbfe0bc55fe3aae98
.dword 0x3fe0bc55fe3aae98
.dword 0xbfe0bc55fe3aae98
.dword 0x3fe0bc55fe3aae98
.dword 0xbfe0bc55fe3aae98
.dword 0x3fe0bc55fe3aae98
.dword 0xbfe0bc55fe3aae98
.dword 0x3fe0bc55fe3aae98
.dword 0xbfe0bc55fe3aae98
.dword 0x3fb644e85974eb18
.dword 0xbfb644e85974eb18
.dword 0x3fb644e85974eb18
.dword 0xbfb644e85974eb18
.dword 0x3fb644e85974eb18
.dword 0xbfb644e85974eb18
.dword 0x3fb644e85974eb18
.dword 0xbfb644e85974eb18
.dword 0x3fb644e85974eb18
.dword 0xbfb644e85974eb18
.dword 0x3fe21b43aabc36ef
.dword 0xbfe21b43aabc36ef
.dword 0x3fe21b43aabc36ef
.dword 0xbfe21b43aabc36ef
.dword 0x3fe21b43aabc36ef
.dword 0xbfe21b43aabc36ef
.dword 0x3fe21b43aabc36ef
.dword 0xbfe21b43aabc36ef
.dword 0x3fe21b43aabc36ef
.dword 0xbfe21b43aabc36ef
.dword 0x3fe0e434f5c2c034
.dword 0xbfe0e434f5c2c034
.dword 0x3fe0e434f5c2c034
.dword 0xbfe0e434f5c2c034
.dword 0x3fe0e434f5c2c034
.dword 0xbfe0e434f5c2c034
.dword 0x3fe0e434f5c2c034
.dword 0xbfe0e434f5c2c034
.dword 0x3fe0e434f5c2c034
.dword 0xbfe0e434f5c2c034
.dword 0x3fb9e5bbe4c8eb20
.dword 0xbfb9e5bbe4c8eb20
.dword 0x3fb9e5bbe4c8eb20
.dword 0xbfb9e5bbe4c8eb20
.dword 0x3fb9e5bbe4c8eb20
.dword 0xbfb9e5bbe4c8eb20
.dword 0x3fb9e5bbe4c8eb20
.dword 0xbfb9e5bbe4c8eb20
.dword 0x3fb9e5bbe4c8eb20
.dword 0xbfb9e5bbe4c8eb20
.dword 0x3fe61345679addc9
.dword 0xbfe61345679addc9
.dword 0x3fe61345679addc9
.dword 0xbfe61345679addc9
.dword 0x3fe61345679addc9
.dword 0xbfe61345679addc9
.dword 0x3fe61345679addc9
.dword 0xbfe61345679addc9
.dword 0x3fe61345679addc9
.dword 0xbfe61345679addc9
.dword 0x3fc84acd365e9bf0
.dword 0xbfc84acd365e9bf0
.dword 0x3fc84acd365e9bf0
.dword 0xbfc84acd365e9bf0
.dword 0x3fc84acd365e9bf0
.dword 0xbfc84acd365e9bf0
.dword 0x3fc84acd365e9bf0
.dword 0xbfc84acd365e9bf0
.dword 0x3fc84acd365e9bf0
.dword 0xbfc84acd365e9bf0
.dword 0x3fb71ade8ef53d20
.dword 0xbfb71ade8ef53d20
.dword 0x3fb71ade8ef53d20
.dword 0xbfb71ade8ef53d20
.dword 0x3fb71ade8ef53d20
.dword 0xbfb71ade8ef53d20
.dword 0x3fb71ade8ef53d20
.dword 0xbfb71ade8ef53d20
.dword 0x3fb71ade8ef53d20
.dword 0xbfb71ade8ef53d20
.dword 0x3fd86ca4719ad2d4
.dword 0xbfd86ca4719ad2d4
.dword 0x3fd86ca4719ad2d4
.dword 0xbfd86ca4719ad2d4
.dword 0x3fd86ca4719ad2d4
.dword 0xbfd86ca4719ad2d4
.dword 0x3fd86ca4719ad2d4
.dword 0xbfd86ca4719ad2d4
.dword 0x3fd86ca4719ad2d4
.dword 0xbfd86ca4719ad2d4
.dword 0x3fe6fb2f3370e67c
.dword 0xbfe6fb2f3370e67c
.dword 0x3fe6fb2f3370e67c
.dword 0xbfe6fb2f3370e67c
.dword 0x3fe6fb2f3370e67c
.dword 0xbfe6fb2f3370e67c
.dword 0x3fe6fb2f3370e67c
.dword 0xbfe6fb2f3370e67c
.dword 0x3fe6fb2f3370e67c
.dword 0xbfe6fb2f3370e67c
.dword 0x3fb785e9f9028468
.dword 0xbfb785e9f9028468
.dword 0x3fb785e9f9028468
.dword 0xbfb785e9f9028468
.dword 0x3fb785e9f9028468
.dword 0xbfb785e9f9028468
.dword 0x3fb785e9f9028468
.dword 0xbfb785e9f9028468
.dword 0x3fb785e9f9028468
.dword 0xbfb785e9f9028468
.dword 0x3fe0bfb7be915b82
.dword 0xbfe0bfb7be915b82
.dword 0x3fe0bfb7be915b82
.dword 0xbfe0bfb7be915b82
.dword 0x3fe0bfb7be915b82
.dword 0xbfe0bfb7be915b82
.dword 0x3fe0bfb7be915b82
.dword 0xbfe0bfb7be915b82
.dword 0x3fe0bfb7be915b82
.dword 0xbfe0bfb7be915b82
.dword 0x3fcbac7ce2b8ec2c
.dword 0xbfcbac7ce2b8ec2c
.dword 0x3fcbac7ce2b8ec2c
.dword 0xbfcbac7ce2b8ec2c
.dword 0x3fcbac7ce2b8ec2c
.dword 0xbfcbac7ce2b8ec2c
.dword 0x3fcbac7ce2b8ec2c
.dword 0xbfcbac7ce2b8ec2c
.dword 0x3fcbac7ce2b8ec2c
.dword 0xbfcbac7ce2b8ec2c
.dword 0x3fdf4746641cd1f2
.dword 0xbfdf4746641cd1f2
.dword 0x3fdf4746641cd1f2
.dword 0xbfdf4746641cd1f2
.dword 0x3fdf4746641cd1f2
.dword 0xbfdf4746641cd1f2
.dword 0x3fdf4746641cd1f2
.dword 0xbfdf4746641cd1f2
.dword 0x3fdf4746641cd1f2
.dword 0xbfdf4746641cd1f2
.dword 0x3fe28aad77d68b44
.dword 0xbfe28aad77d68b44
.dword 0x3fe28aad77d68b44
.dword 0xbfe28aad77d68b44
.dword 0x3fe28aad77d68b44
.dword 0xbfe28aad77d68b44
.dword 0x3fe28aad77d68b44
.dword 0xbfe28aad77d68b44
.dword 0x3fe28aad77d68b44
.dword 0xbfe28aad77d68b44
.dword 0x3fc3e9fc19d60908
.dword 0xbfc3e9fc19d60908
.dword 0x3fc3e9fc19d60908
.dword 0xbfc3e9fc19d60908
.dword 0x3fc3e9fc19d60908
.dword 0xbfc3e9fc19d60908
.dword 0x3fc3e9fc19d60908
.dword 0xbfc3e9fc19d60908
.dword 0x3fc3e9fc19d60908
.dword 0xbfc3e9fc19d60908
.dword 0x3fefc04b2f200426
.dword 0xbfefc04b2f200426
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_8:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_9:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_10:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_11:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_12:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
