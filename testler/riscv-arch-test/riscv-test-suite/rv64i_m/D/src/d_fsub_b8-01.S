
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 13:40:15 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fsub.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.d instruction of the RISC-V FD extension for the fsub_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fsub_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1, rs1==f3, rs2==f14, rd==f14, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbb349c1b9229f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbb349c1b9229f and rm_val == 0  
// opcode: fsub.d ; op1:f3; op2:f14; dest:f14; op1val:0x3febb349c1b9229f; op2val:0x3febb349c1b9229f; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f14, f3, f14, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rs2 == rd, rs1==f28, rs2==f28, rd==f28, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9b3576cfffac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9b3576cfffac and rm_val == 4  
// opcode: fsub.d ; op1:f28; op2:f28; dest:f28; op1val:0x3fea9b3576cfffac; op2val:0x3fea9b3576cfffac; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f28, f28, f28, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f15, rs2==f8, rd==f3, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9b3576cfffac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9b3576cfffac and rm_val == 3  
// opcode: fsub.d ; op1:f15; op2:f8; dest:f3; op1val:0x3fea9b3576cfffac; op2val:0x3fea9b3576cfffac; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f3, f15, f8, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_3:
// rs1 == rd != rs2, rs1==f6, rs2==f24, rd==f6, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9b3576cfffac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9b3576cfffac and rm_val == 2  
// opcode: fsub.d ; op1:f6; op2:f24; dest:f6; op1val:0x3fea9b3576cfffac; op2val:0x3fea9b3576cfffac; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f6, f6, f24, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f30, rs2==f30, rd==f20, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9b3576cfffac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9b3576cfffac and rm_val == 1  
// opcode: fsub.d ; op1:f30; op2:f30; dest:f20; op1val:0x3fea9b3576cfffac; op2val:0x3fea9b3576cfffac; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f20, f30, f30, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_5:
// rs1==f0, rs2==f10, rd==f8, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9b3576cfffac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9b3576cfffac and rm_val == 0  
// opcode: fsub.d ; op1:f0; op2:f10; dest:f8; op1val:0x3fea9b3576cfffac; op2val:0x3fea9b3576cfffac; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f8, f0, f10, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6:
// rs1==f5, rs2==f19, rd==f27, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf43462389ee50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf43462389ee50 and rm_val == 4  
// opcode: fsub.d ; op1:f5; op2:f19; dest:f27; op1val:0x3fdf43462389ee50; op2val:0x3fdf43462389ee50; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f27, f5, f19, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_7:
// rs1==f13, rs2==f17, rd==f12, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf43462389ee50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf43462389ee50 and rm_val == 3  
// opcode: fsub.d ; op1:f13; op2:f17; dest:f12; op1val:0x3fdf43462389ee50; op2val:0x3fdf43462389ee50; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f13, f17, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_8:
// rs1==f4, rs2==f20, rd==f10, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf43462389ee50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf43462389ee50 and rm_val == 2  
// opcode: fsub.d ; op1:f4; op2:f20; dest:f10; op1val:0x3fdf43462389ee50; op2val:0x3fdf43462389ee50; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f10, f4, f20, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_9:
// rs1==f11, rs2==f5, rd==f26, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf43462389ee50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf43462389ee50 and rm_val == 1  
// opcode: fsub.d ; op1:f11; op2:f5; dest:f26; op1val:0x3fdf43462389ee50; op2val:0x3fdf43462389ee50; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f26, f11, f5, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_10:
// rs1==f19, rs2==f2, rd==f30, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf43462389ee50 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf43462389ee50 and rm_val == 0  
// opcode: fsub.d ; op1:f19; op2:f2; dest:f30; op1val:0x3fdf43462389ee50; op2val:0x3fdf43462389ee50; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f30, f19, f2, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_11:
// rs1==f1, rs2==f25, rd==f0, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe83ed82bacef6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe83ed82bacef6 and rm_val == 4  
// opcode: fsub.d ; op1:f1; op2:f25; dest:f0; op1val:0x3fde83ed82bacef6; op2val:0x3fde83ed82bacef6; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f0, f1, f25, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_12:
// rs1==f31, rs2==f29, rd==f7, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe83ed82bacef6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe83ed82bacef6 and rm_val == 3  
// opcode: fsub.d ; op1:f31; op2:f29; dest:f7; op1val:0x3fde83ed82bacef6; op2val:0x3fde83ed82bacef6; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f7, f31, f29, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_13:
// rs1==f12, rs2==f1, rd==f21, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe83ed82bacef6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe83ed82bacef6 and rm_val == 2  
// opcode: fsub.d ; op1:f12; op2:f1; dest:f21; op1val:0x3fde83ed82bacef6; op2val:0x3fde83ed82bacef6; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f21, f12, f1, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_14:
// rs1==f8, rs2==f26, rd==f17, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe83ed82bacef6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe83ed82bacef6 and rm_val == 1  
// opcode: fsub.d ; op1:f8; op2:f26; dest:f17; op1val:0x3fde83ed82bacef6; op2val:0x3fde83ed82bacef6; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f17, f8, f26, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_15:
// rs1==f23, rs2==f18, rd==f24, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe83ed82bacef6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe83ed82bacef6 and rm_val == 0  
// opcode: fsub.d ; op1:f23; op2:f18; dest:f24; op1val:0x3fde83ed82bacef6; op2val:0x3fde83ed82bacef6; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f24, f23, f18, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_16:
// rs1==f20, rs2==f31, rd==f22, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9a8b3d340638 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd9a8b3d340638 and rm_val == 4  
// opcode: fsub.d ; op1:f20; op2:f31; dest:f22; op1val:0x3fed9a8b3d340638; op2val:0x3fed9a8b3d340638; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f22, f20, f31, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_17:
// rs1==f24, rs2==f7, rd==f1, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9a8b3d340638 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd9a8b3d340638 and rm_val == 3  
// opcode: fsub.d ; op1:f24; op2:f7; dest:f1; op1val:0x3fed9a8b3d340638; op2val:0x3fed9a8b3d340638; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f1, f24, f7, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_18:
// rs1==f17, rs2==f9, rd==f23, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9a8b3d340638 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd9a8b3d340638 and rm_val == 2  
// opcode: fsub.d ; op1:f17; op2:f9; dest:f23; op1val:0x3fed9a8b3d340638; op2val:0x3fed9a8b3d340638; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f23, f17, f9, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_19:
// rs1==f14, rs2==f16, rd==f19, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9a8b3d340638 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd9a8b3d340638 and rm_val == 1  
// opcode: fsub.d ; op1:f14; op2:f16; dest:f19; op1val:0x3fed9a8b3d340638; op2val:0x3fed9a8b3d340638; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f19, f14, f16, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_20:
// rs1==f16, rs2==f27, rd==f11, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd9a8b3d340638 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd9a8b3d340638 and rm_val == 0  
// opcode: fsub.d ; op1:f16; op2:f27; dest:f11; op1val:0x3fed9a8b3d340638; op2val:0x3fed9a8b3d340638; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f11, f16, f27, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_21:
// rs1==f21, rs2==f4, rd==f25, fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2d72555051b0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2d72555051b0 and rm_val == 4  
// opcode: fsub.d ; op1:f21; op2:f4; dest:f25; op1val:0x3fbd2d72555051b0; op2val:0x3fbd2d72555051b0; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f25, f21, f4, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_22:
// rs1==f26, rs2==f0, rd==f4, fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2d72555051b0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2d72555051b0 and rm_val == 3  
// opcode: fsub.d ; op1:f26; op2:f0; dest:f4; op1val:0x3fbd2d72555051b0; op2val:0x3fbd2d72555051b0; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f4, f26, f0, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_23:
// rs1==f25, rs2==f11, rd==f13, fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2d72555051b0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2d72555051b0 and rm_val == 2  
// opcode: fsub.d ; op1:f25; op2:f11; dest:f13; op1val:0x3fbd2d72555051b0; op2val:0x3fbd2d72555051b0; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f13, f25, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_24:
// rs1==f9, rs2==f12, rd==f5, fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2d72555051b0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2d72555051b0 and rm_val == 1  
// opcode: fsub.d ; op1:f9; op2:f12; dest:f5; op1val:0x3fbd2d72555051b0; op2val:0x3fbd2d72555051b0; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f5, f9, f12, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_25:
// rs1==f2, rs2==f6, rd==f15, fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2d72555051b0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2d72555051b0 and rm_val == 0  
// opcode: fsub.d ; op1:f2; op2:f6; dest:f15; op1val:0x3fbd2d72555051b0; op2val:0x3fbd2d72555051b0; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f15, f2, f6, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_26:
// rs1==f18, rs2==f23, rd==f16, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x950c731e33ba5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x950c731e33ba5 and rm_val == 4  
// opcode: fsub.d ; op1:f18; op2:f23; dest:f16; op1val:0x3fe950c731e33ba5; op2val:0x3fe950c731e33ba5; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f16, f18, f23, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_27:
// rs1==f10, rs2==f22, rd==f9, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x950c731e33ba5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x950c731e33ba5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f22; dest:f9; op1val:0x3fe950c731e33ba5; op2val:0x3fe950c731e33ba5; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f9, f10, f22, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_28:
// rs1==f22, rs2==f13, rd==f18, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x950c731e33ba5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x950c731e33ba5 and rm_val == 2  
// opcode: fsub.d ; op1:f22; op2:f13; dest:f18; op1val:0x3fe950c731e33ba5; op2val:0x3fe950c731e33ba5; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f18, f22, f13, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_29:
// rs1==f27, rs2==f21, rd==f29, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x950c731e33ba5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x950c731e33ba5 and rm_val == 1  
// opcode: fsub.d ; op1:f27; op2:f21; dest:f29; op1val:0x3fe950c731e33ba5; op2val:0x3fe950c731e33ba5; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f29, f27, f21, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_30:
// rs1==f7, rs2==f15, rd==f2, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x950c731e33ba5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x950c731e33ba5 and rm_val == 0  
// opcode: fsub.d ; op1:f7; op2:f15; dest:f2; op1val:0x3fe950c731e33ba5; op2val:0x3fe950c731e33ba5; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f2, f7, f15, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_31:
// rs1==f29, rs2==f3, rd==f31, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e8ed6dcb2bb0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3e8ed6dcb2bb0 and rm_val == 4  
// opcode: fsub.d ; op1:f29; op2:f3; dest:f31; op1val:0x3fd3e8ed6dcb2bb0; op2val:0x3fd3e8ed6dcb2bb0; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f31, f29, f3, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e8ed6dcb2bb0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3e8ed6dcb2bb0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3e8ed6dcb2bb0; op2val:0x3fd3e8ed6dcb2bb0; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e8ed6dcb2bb0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3e8ed6dcb2bb0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3e8ed6dcb2bb0; op2val:0x3fd3e8ed6dcb2bb0; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e8ed6dcb2bb0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3e8ed6dcb2bb0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3e8ed6dcb2bb0; op2val:0x3fd3e8ed6dcb2bb0; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3e8ed6dcb2bb0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3e8ed6dcb2bb0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3e8ed6dcb2bb0; op2val:0x3fd3e8ed6dcb2bb0; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cfb4e7416d34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3cfb4e7416d34 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3cfb4e7416d34; op2val:0x3fd3cfb4e7416d34; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cfb4e7416d34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3cfb4e7416d34 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3cfb4e7416d34; op2val:0x3fd3cfb4e7416d34; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cfb4e7416d34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3cfb4e7416d34 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3cfb4e7416d34; op2val:0x3fd3cfb4e7416d34; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cfb4e7416d34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3cfb4e7416d34 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3cfb4e7416d34; op2val:0x3fd3cfb4e7416d34; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3cfb4e7416d34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3cfb4e7416d34 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3cfb4e7416d34; op2val:0x3fd3cfb4e7416d34; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8aa1b2516b92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf8aa1b2516b92 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8aa1b2516b92; op2val:0x3fdf8aa1b2516b92; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8aa1b2516b92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf8aa1b2516b92 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8aa1b2516b92; op2val:0x3fdf8aa1b2516b92; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8aa1b2516b92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf8aa1b2516b92 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8aa1b2516b92; op2val:0x3fdf8aa1b2516b92; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8aa1b2516b92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf8aa1b2516b92 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8aa1b2516b92; op2val:0x3fdf8aa1b2516b92; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf8aa1b2516b92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf8aa1b2516b92 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf8aa1b2516b92; op2val:0x3fdf8aa1b2516b92; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5f6468475cb34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5f6468475cb34 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5f6468475cb34; op2val:0x3fd5f6468475cb34; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5f6468475cb34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5f6468475cb34 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5f6468475cb34; op2val:0x3fd5f6468475cb34; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5f6468475cb34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5f6468475cb34 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5f6468475cb34; op2val:0x3fd5f6468475cb34; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5f6468475cb34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5f6468475cb34 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5f6468475cb34; op2val:0x3fd5f6468475cb34; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5f6468475cb34 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5f6468475cb34 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5f6468475cb34; op2val:0x3fd5f6468475cb34; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27a1427b89255 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x27a1427b89255 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe27a1427b89255; op2val:0x3fe27a1427b89255; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27a1427b89255 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x27a1427b89255 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe27a1427b89255; op2val:0x3fe27a1427b89255; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27a1427b89255 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x27a1427b89255 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe27a1427b89255; op2val:0x3fe27a1427b89255; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27a1427b89255 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x27a1427b89255 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe27a1427b89255; op2val:0x3fe27a1427b89255; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x27a1427b89255 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x27a1427b89255 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe27a1427b89255; op2val:0x3fe27a1427b89255; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf578eaf36016e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf578eaf36016e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf578eaf36016e; op2val:0x3fdf578eaf36016e; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf578eaf36016e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf578eaf36016e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf578eaf36016e; op2val:0x3fdf578eaf36016e; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf578eaf36016e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf578eaf36016e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf578eaf36016e; op2val:0x3fdf578eaf36016e; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf578eaf36016e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf578eaf36016e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf578eaf36016e; op2val:0x3fdf578eaf36016e; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf578eaf36016e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf578eaf36016e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf578eaf36016e; op2val:0x3fdf578eaf36016e; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10d7ec9f56cfc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10d7ec9f56cfc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10d7ec9f56cfc; op2val:0x3fe10d7ec9f56cfc; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10d7ec9f56cfc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10d7ec9f56cfc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10d7ec9f56cfc; op2val:0x3fe10d7ec9f56cfc; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10d7ec9f56cfc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10d7ec9f56cfc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10d7ec9f56cfc; op2val:0x3fe10d7ec9f56cfc; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10d7ec9f56cfc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10d7ec9f56cfc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10d7ec9f56cfc; op2val:0x3fe10d7ec9f56cfc; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x10d7ec9f56cfc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x10d7ec9f56cfc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe10d7ec9f56cfc; op2val:0x3fe10d7ec9f56cfc; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x56110dbd9b2ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x56110dbd9b2ec and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc56110dbd9b2ec; op2val:0x3fc56110dbd9b2ec; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x56110dbd9b2ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x56110dbd9b2ec and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc56110dbd9b2ec; op2val:0x3fc56110dbd9b2ec; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x56110dbd9b2ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x56110dbd9b2ec and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc56110dbd9b2ec; op2val:0x3fc56110dbd9b2ec; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x56110dbd9b2ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x56110dbd9b2ec and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc56110dbd9b2ec; op2val:0x3fc56110dbd9b2ec; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x56110dbd9b2ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x56110dbd9b2ec and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc56110dbd9b2ec; op2val:0x3fc56110dbd9b2ec; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd2b0fa5921612 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2b0fa5921612 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd2b0fa5921612; op2val:0x3fdd2b0fa5921612; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd2b0fa5921612 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2b0fa5921612 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd2b0fa5921612; op2val:0x3fdd2b0fa5921612; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd2b0fa5921612 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2b0fa5921612 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd2b0fa5921612; op2val:0x3fdd2b0fa5921612; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd2b0fa5921612 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2b0fa5921612 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd2b0fa5921612; op2val:0x3fdd2b0fa5921612; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd2b0fa5921612 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd2b0fa5921612 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd2b0fa5921612; op2val:0x3fdd2b0fa5921612; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2afccc4b5fc46 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2afccc4b5fc46 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2afccc4b5fc46; op2val:0x3fd2afccc4b5fc46; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2afccc4b5fc46 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2afccc4b5fc46 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2afccc4b5fc46; op2val:0x3fd2afccc4b5fc46; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2afccc4b5fc46 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2afccc4b5fc46 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2afccc4b5fc46; op2val:0x3fd2afccc4b5fc46; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2afccc4b5fc46 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2afccc4b5fc46 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2afccc4b5fc46; op2val:0x3fd2afccc4b5fc46; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2afccc4b5fc46 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2afccc4b5fc46 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2afccc4b5fc46; op2val:0x3fd2afccc4b5fc46; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4d14e0c596fb1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4d14e0c596fb1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4d14e0c596fb1; op2val:0x3fe4d14e0c596fb1; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4d14e0c596fb1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4d14e0c596fb1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4d14e0c596fb1; op2val:0x3fe4d14e0c596fb1; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4d14e0c596fb1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4d14e0c596fb1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4d14e0c596fb1; op2val:0x3fe4d14e0c596fb1; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4d14e0c596fb1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4d14e0c596fb1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4d14e0c596fb1; op2val:0x3fe4d14e0c596fb1; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4d14e0c596fb1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4d14e0c596fb1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4d14e0c596fb1; op2val:0x3fe4d14e0c596fb1; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7a366f3952fd0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7a366f3952fd0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7a366f3952fd0; op2val:0x3fc7a366f3952fd0; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7a366f3952fd0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7a366f3952fd0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7a366f3952fd0; op2val:0x3fc7a366f3952fd0; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7a366f3952fd0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7a366f3952fd0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7a366f3952fd0; op2val:0x3fc7a366f3952fd0; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7a366f3952fd0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7a366f3952fd0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7a366f3952fd0; op2val:0x3fc7a366f3952fd0; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7a366f3952fd0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7a366f3952fd0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7a366f3952fd0; op2val:0x3fc7a366f3952fd0; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ad7ced264b10 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ad7ced264b10 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3ad7ced264b10; op2val:0x3fc3ad7ced264b10; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ad7ced264b10 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ad7ced264b10 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3ad7ced264b10; op2val:0x3fc3ad7ced264b10; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ad7ced264b10 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ad7ced264b10 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3ad7ced264b10; op2val:0x3fc3ad7ced264b10; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ad7ced264b10 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ad7ced264b10 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3ad7ced264b10; op2val:0x3fc3ad7ced264b10; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x3ad7ced264b10 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3ad7ced264b10 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc3ad7ced264b10; op2val:0x3fc3ad7ced264b10; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0190993492cc8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0190993492cc8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0190993492cc8; op2val:0x3fb0190993492cc8; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0190993492cc8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0190993492cc8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0190993492cc8; op2val:0x3fb0190993492cc8; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0190993492cc8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0190993492cc8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0190993492cc8; op2val:0x3fb0190993492cc8; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0190993492cc8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0190993492cc8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0190993492cc8; op2val:0x3fb0190993492cc8; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0190993492cc8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0190993492cc8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0190993492cc8; op2val:0x3fb0190993492cc8; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ba2bbec05684 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7ba2bbec05684 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7ba2bbec05684; op2val:0x3fd7ba2bbec05684; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ba2bbec05684 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7ba2bbec05684 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7ba2bbec05684; op2val:0x3fd7ba2bbec05684; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ba2bbec05684 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7ba2bbec05684 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7ba2bbec05684; op2val:0x3fd7ba2bbec05684; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ba2bbec05684 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7ba2bbec05684 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7ba2bbec05684; op2val:0x3fd7ba2bbec05684; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7ba2bbec05684 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7ba2bbec05684 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7ba2bbec05684; op2val:0x3fd7ba2bbec05684; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b3661fd5733a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7b3661fd5733a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7b3661fd5733a; op2val:0x3fd7b3661fd5733a; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b3661fd5733a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7b3661fd5733a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7b3661fd5733a; op2val:0x3fd7b3661fd5733a; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b3661fd5733a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7b3661fd5733a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7b3661fd5733a; op2val:0x3fd7b3661fd5733a; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b3661fd5733a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7b3661fd5733a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7b3661fd5733a; op2val:0x3fd7b3661fd5733a; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7b3661fd5733a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7b3661fd5733a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7b3661fd5733a; op2val:0x3fd7b3661fd5733a; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7046ac8439336 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7046ac8439336 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7046ac8439336; op2val:0x3fd7046ac8439336; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7046ac8439336 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7046ac8439336 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7046ac8439336; op2val:0x3fd7046ac8439336; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7046ac8439336 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7046ac8439336 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7046ac8439336; op2val:0x3fd7046ac8439336; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7046ac8439336 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7046ac8439336 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7046ac8439336; op2val:0x3fd7046ac8439336; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7046ac8439336 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7046ac8439336 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7046ac8439336; op2val:0x3fd7046ac8439336; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03bc8e80ca9d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03bc8e80ca9d0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03bc8e80ca9d0; op2val:0x3fe03bc8e80ca9d0; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03bc8e80ca9d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03bc8e80ca9d0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03bc8e80ca9d0; op2val:0x3fe03bc8e80ca9d0; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03bc8e80ca9d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03bc8e80ca9d0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03bc8e80ca9d0; op2val:0x3fe03bc8e80ca9d0; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03bc8e80ca9d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03bc8e80ca9d0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03bc8e80ca9d0; op2val:0x3fe03bc8e80ca9d0; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03bc8e80ca9d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03bc8e80ca9d0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03bc8e80ca9d0; op2val:0x3fe03bc8e80ca9d0; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa229fe10a47f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa229fe10a47f0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba229fe10a47f0; op2val:0x3fba229fe10a47f0; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa229fe10a47f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa229fe10a47f0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba229fe10a47f0; op2val:0x3fba229fe10a47f0; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa229fe10a47f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa229fe10a47f0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba229fe10a47f0; op2val:0x3fba229fe10a47f0; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa229fe10a47f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa229fe10a47f0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba229fe10a47f0; op2val:0x3fba229fe10a47f0; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xa229fe10a47f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xa229fe10a47f0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fba229fe10a47f0; op2val:0x3fba229fe10a47f0; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa98bb30344092 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa98bb30344092 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda98bb30344092; op2val:0x3fda98bb30344092; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa98bb30344092 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa98bb30344092 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda98bb30344092; op2val:0x3fda98bb30344092; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa98bb30344092 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa98bb30344092 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda98bb30344092; op2val:0x3fda98bb30344092; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa98bb30344092 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa98bb30344092 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda98bb30344092; op2val:0x3fda98bb30344092; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa98bb30344092 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xa98bb30344092 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda98bb30344092; op2val:0x3fda98bb30344092; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3082ccea7ecf2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3082ccea7ecf2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3082ccea7ecf2; op2val:0x3fe3082ccea7ecf2; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3082ccea7ecf2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3082ccea7ecf2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3082ccea7ecf2; op2val:0x3fe3082ccea7ecf2; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3082ccea7ecf2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3082ccea7ecf2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3082ccea7ecf2; op2val:0x3fe3082ccea7ecf2; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3082ccea7ecf2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3082ccea7ecf2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3082ccea7ecf2; op2val:0x3fe3082ccea7ecf2; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3082ccea7ecf2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3082ccea7ecf2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3082ccea7ecf2; op2val:0x3fe3082ccea7ecf2; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38bfac9aebfdf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38bfac9aebfdf and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe38bfac9aebfdf; op2val:0x3fe38bfac9aebfdf; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38bfac9aebfdf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38bfac9aebfdf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe38bfac9aebfdf; op2val:0x3fe38bfac9aebfdf; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38bfac9aebfdf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38bfac9aebfdf and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe38bfac9aebfdf; op2val:0x3fe38bfac9aebfdf; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38bfac9aebfdf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38bfac9aebfdf and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe38bfac9aebfdf; op2val:0x3fe38bfac9aebfdf; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x38bfac9aebfdf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x38bfac9aebfdf and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe38bfac9aebfdf; op2val:0x3fe38bfac9aebfdf; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47f9d5de52e44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47f9d5de52e44 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe47f9d5de52e44; op2val:0x3fe47f9d5de52e44; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47f9d5de52e44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47f9d5de52e44 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe47f9d5de52e44; op2val:0x3fe47f9d5de52e44; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47f9d5de52e44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47f9d5de52e44 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe47f9d5de52e44; op2val:0x3fe47f9d5de52e44; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47f9d5de52e44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47f9d5de52e44 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe47f9d5de52e44; op2val:0x3fe47f9d5de52e44; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x47f9d5de52e44 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x47f9d5de52e44 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe47f9d5de52e44; op2val:0x3fe47f9d5de52e44; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8515e22a63700 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8515e22a63700 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8515e22a63700; op2val:0x3fd8515e22a63700; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8515e22a63700 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8515e22a63700 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8515e22a63700; op2val:0x3fd8515e22a63700; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8515e22a63700 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8515e22a63700 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8515e22a63700; op2val:0x3fd8515e22a63700; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8515e22a63700 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8515e22a63700 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8515e22a63700; op2val:0x3fd8515e22a63700; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8515e22a63700 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8515e22a63700 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8515e22a63700; op2val:0x3fd8515e22a63700; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63aaec1303d1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63aaec1303d1b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63aaec1303d1b; op2val:0x3fe63aaec1303d1b; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63aaec1303d1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63aaec1303d1b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63aaec1303d1b; op2val:0x3fe63aaec1303d1b; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63aaec1303d1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63aaec1303d1b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63aaec1303d1b; op2val:0x3fe63aaec1303d1b; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63aaec1303d1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63aaec1303d1b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63aaec1303d1b; op2val:0x3fe63aaec1303d1b; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63aaec1303d1b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63aaec1303d1b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63aaec1303d1b; op2val:0x3fe63aaec1303d1b; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x057f8d24d8f48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x057f8d24d8f48 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd057f8d24d8f48; op2val:0x3fd057f8d24d8f48; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x057f8d24d8f48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x057f8d24d8f48 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd057f8d24d8f48; op2val:0x3fd057f8d24d8f48; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x057f8d24d8f48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x057f8d24d8f48 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd057f8d24d8f48; op2val:0x3fd057f8d24d8f48; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x057f8d24d8f48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x057f8d24d8f48 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd057f8d24d8f48; op2val:0x3fd057f8d24d8f48; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x057f8d24d8f48 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x057f8d24d8f48 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd057f8d24d8f48; op2val:0x3fd057f8d24d8f48; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x52c0a67baba00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x52c0a67baba00 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc52c0a67baba00; op2val:0x3fc52c0a67baba00; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x52c0a67baba00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x52c0a67baba00 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc52c0a67baba00; op2val:0x3fc52c0a67baba00; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x52c0a67baba00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x52c0a67baba00 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc52c0a67baba00; op2val:0x3fc52c0a67baba00; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x52c0a67baba00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x52c0a67baba00 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc52c0a67baba00; op2val:0x3fc52c0a67baba00; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x52c0a67baba00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x52c0a67baba00 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc52c0a67baba00; op2val:0x3fc52c0a67baba00; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa963b13a20d40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa963b13a20d40 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a963b13a20d40; op2val:0x3f8a963b13a20d40; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa963b13a20d40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa963b13a20d40 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a963b13a20d40; op2val:0x3f8a963b13a20d40; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa963b13a20d40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa963b13a20d40 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a963b13a20d40; op2val:0x3f8a963b13a20d40; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa963b13a20d40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa963b13a20d40 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a963b13a20d40; op2val:0x3f8a963b13a20d40; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_170:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa963b13a20d40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa963b13a20d40 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a963b13a20d40; op2val:0x3f8a963b13a20d40; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5d58644588da8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5d58644588da8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5d58644588da8; op2val:0x3fc5d58644588da8; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5d58644588da8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5d58644588da8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5d58644588da8; op2val:0x3fc5d58644588da8; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5d58644588da8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5d58644588da8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5d58644588da8; op2val:0x3fc5d58644588da8; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5d58644588da8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5d58644588da8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5d58644588da8; op2val:0x3fc5d58644588da8; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5d58644588da8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5d58644588da8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5d58644588da8; op2val:0x3fc5d58644588da8; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9b7ad8238c104 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b7ad8238c104 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9b7ad8238c104; op2val:0x3fd9b7ad8238c104; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9b7ad8238c104 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b7ad8238c104 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9b7ad8238c104; op2val:0x3fd9b7ad8238c104; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9b7ad8238c104 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b7ad8238c104 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9b7ad8238c104; op2val:0x3fd9b7ad8238c104; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9b7ad8238c104 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b7ad8238c104 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9b7ad8238c104; op2val:0x3fd9b7ad8238c104; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9b7ad8238c104 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9b7ad8238c104 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9b7ad8238c104; op2val:0x3fd9b7ad8238c104; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe04028054b11 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfe04028054b11 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefe04028054b11; op2val:0x3fefe04028054b11; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe04028054b11 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfe04028054b11 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefe04028054b11; op2val:0x3fefe04028054b11; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe04028054b11 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfe04028054b11 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefe04028054b11; op2val:0x3fefe04028054b11; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe04028054b11 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfe04028054b11 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefe04028054b11; op2val:0x3fefe04028054b11; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfe04028054b11 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfe04028054b11 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefe04028054b11; op2val:0x3fefe04028054b11; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3eb0b0a786fe6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3eb0b0a786fe6 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3eb0b0a786fe6; op2val:0x3fe3eb0b0a786fe6; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3eb0b0a786fe6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3eb0b0a786fe6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3eb0b0a786fe6; op2val:0x3fe3eb0b0a786fe6; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3eb0b0a786fe6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3eb0b0a786fe6 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3eb0b0a786fe6; op2val:0x3fe3eb0b0a786fe6; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3eb0b0a786fe6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3eb0b0a786fe6 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3eb0b0a786fe6; op2val:0x3fe3eb0b0a786fe6; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3eb0b0a786fe6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3eb0b0a786fe6 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3eb0b0a786fe6; op2val:0x3fe3eb0b0a786fe6; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03f15e38c30bb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03f15e38c30bb and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03f15e38c30bb; op2val:0x3fe03f15e38c30bb; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03f15e38c30bb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03f15e38c30bb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03f15e38c30bb; op2val:0x3fe03f15e38c30bb; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03f15e38c30bb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03f15e38c30bb and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03f15e38c30bb; op2val:0x3fe03f15e38c30bb; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03f15e38c30bb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03f15e38c30bb and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03f15e38c30bb; op2val:0x3fe03f15e38c30bb; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x03f15e38c30bb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x03f15e38c30bb and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe03f15e38c30bb; op2val:0x3fe03f15e38c30bb; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbc3cb844d46d4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbc3cb844d46d4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbc3cb844d46d4; op2val:0x3fcbc3cb844d46d4; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbc3cb844d46d4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbc3cb844d46d4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbc3cb844d46d4; op2val:0x3fcbc3cb844d46d4; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbc3cb844d46d4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbc3cb844d46d4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbc3cb844d46d4; op2val:0x3fcbc3cb844d46d4; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbc3cb844d46d4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbc3cb844d46d4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbc3cb844d46d4; op2val:0x3fcbc3cb844d46d4; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbc3cb844d46d4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbc3cb844d46d4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbc3cb844d46d4; op2val:0x3fcbc3cb844d46d4; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63f15c5d7c2f6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63f15c5d7c2f6 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63f15c5d7c2f6; op2val:0x3fe63f15c5d7c2f6; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63f15c5d7c2f6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63f15c5d7c2f6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63f15c5d7c2f6; op2val:0x3fe63f15c5d7c2f6; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63f15c5d7c2f6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63f15c5d7c2f6 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63f15c5d7c2f6; op2val:0x3fe63f15c5d7c2f6; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63f15c5d7c2f6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63f15c5d7c2f6 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63f15c5d7c2f6; op2val:0x3fe63f15c5d7c2f6; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63f15c5d7c2f6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63f15c5d7c2f6 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63f15c5d7c2f6; op2val:0x3fe63f15c5d7c2f6; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d88f9d20cd17 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1d88f9d20cd17 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d88f9d20cd17; op2val:0x3fe1d88f9d20cd17; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d88f9d20cd17 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1d88f9d20cd17 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d88f9d20cd17; op2val:0x3fe1d88f9d20cd17; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d88f9d20cd17 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1d88f9d20cd17 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d88f9d20cd17; op2val:0x3fe1d88f9d20cd17; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d88f9d20cd17 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1d88f9d20cd17 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d88f9d20cd17; op2val:0x3fe1d88f9d20cd17; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d88f9d20cd17 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1d88f9d20cd17 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d88f9d20cd17; op2val:0x3fe1d88f9d20cd17; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_211:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2ecb0d69165a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe2ecb0d69165a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde2ecb0d69165a; op2val:0x3fde2ecb0d69165a; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_212:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2ecb0d69165a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe2ecb0d69165a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde2ecb0d69165a; op2val:0x3fde2ecb0d69165a; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_213:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2ecb0d69165a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe2ecb0d69165a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde2ecb0d69165a; op2val:0x3fde2ecb0d69165a; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_214:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2ecb0d69165a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe2ecb0d69165a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde2ecb0d69165a; op2val:0x3fde2ecb0d69165a; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_215:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe2ecb0d69165a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe2ecb0d69165a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde2ecb0d69165a; op2val:0x3fde2ecb0d69165a; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_216:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfce50d294f730 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfce50d294f730 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfce50d294f730; op2val:0x3fdfce50d294f730; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_217:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfce50d294f730 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfce50d294f730 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfce50d294f730; op2val:0x3fdfce50d294f730; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_218:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfce50d294f730 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfce50d294f730 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfce50d294f730; op2val:0x3fdfce50d294f730; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_219:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfce50d294f730 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfce50d294f730 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfce50d294f730; op2val:0x3fdfce50d294f730; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_220:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfce50d294f730 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfce50d294f730 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfce50d294f730; op2val:0x3fdfce50d294f730; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_221:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb5ae0998e6116 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb5ae0998e6116 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb5ae0998e6116; op2val:0x3fdb5ae0998e6116; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_222:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb5ae0998e6116 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb5ae0998e6116 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb5ae0998e6116; op2val:0x3fdb5ae0998e6116; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_223:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb5ae0998e6116 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb5ae0998e6116 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb5ae0998e6116; op2val:0x3fdb5ae0998e6116; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_224:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb5ae0998e6116 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb5ae0998e6116 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb5ae0998e6116; op2val:0x3fdb5ae0998e6116; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_225:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb5ae0998e6116 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb5ae0998e6116 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb5ae0998e6116; op2val:0x3fdb5ae0998e6116; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xba10597b30314 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba10597b30314 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feba10597b30314; op2val:0x3feba10597b30314; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xba10597b30314 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba10597b30314 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feba10597b30314; op2val:0x3feba10597b30314; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xba10597b30314 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba10597b30314 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feba10597b30314; op2val:0x3feba10597b30314; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xba10597b30314 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba10597b30314 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feba10597b30314; op2val:0x3feba10597b30314; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xba10597b30314 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xba10597b30314 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feba10597b30314; op2val:0x3feba10597b30314; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe9566846933dc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe9566846933dc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce9566846933dc; op2val:0x3fce9566846933dc; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe9566846933dc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe9566846933dc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce9566846933dc; op2val:0x3fce9566846933dc; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe9566846933dc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe9566846933dc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce9566846933dc; op2val:0x3fce9566846933dc; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe9566846933dc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe9566846933dc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce9566846933dc; op2val:0x3fce9566846933dc; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe9566846933dc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe9566846933dc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce9566846933dc; op2val:0x3fce9566846933dc; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_236:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1a042da0f26e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd1a042da0f26e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd1a042da0f26e; op2val:0x3fdd1a042da0f26e; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_237:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1a042da0f26e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd1a042da0f26e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd1a042da0f26e; op2val:0x3fdd1a042da0f26e; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_238:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1a042da0f26e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd1a042da0f26e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd1a042da0f26e; op2val:0x3fdd1a042da0f26e; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_239:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1a042da0f26e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd1a042da0f26e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd1a042da0f26e; op2val:0x3fdd1a042da0f26e; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_240:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd1a042da0f26e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd1a042da0f26e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd1a042da0f26e; op2val:0x3fdd1a042da0f26e; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc38c20db9072d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc38c20db9072d and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec38c20db9072d; op2val:0x3fec38c20db9072d; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc38c20db9072d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc38c20db9072d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec38c20db9072d; op2val:0x3fec38c20db9072d; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc38c20db9072d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc38c20db9072d and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec38c20db9072d; op2val:0x3fec38c20db9072d; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc38c20db9072d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc38c20db9072d and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec38c20db9072d; op2val:0x3fec38c20db9072d; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc38c20db9072d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc38c20db9072d and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec38c20db9072d; op2val:0x3fec38c20db9072d; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8a1fa4624929 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc8a1fa4624929 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8a1fa4624929; op2val:0x3fec8a1fa4624929; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8a1fa4624929 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc8a1fa4624929 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8a1fa4624929; op2val:0x3fec8a1fa4624929; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8a1fa4624929 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc8a1fa4624929 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8a1fa4624929; op2val:0x3fec8a1fa4624929; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8a1fa4624929 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc8a1fa4624929 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8a1fa4624929; op2val:0x3fec8a1fa4624929; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8a1fa4624929 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc8a1fa4624929 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8a1fa4624929; op2val:0x3fec8a1fa4624929; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bc5d1b2e4336 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3bc5d1b2e4336 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bc5d1b2e4336; op2val:0x3fe3bc5d1b2e4336; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bc5d1b2e4336 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3bc5d1b2e4336 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bc5d1b2e4336; op2val:0x3fe3bc5d1b2e4336; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bc5d1b2e4336 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3bc5d1b2e4336 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bc5d1b2e4336; op2val:0x3fe3bc5d1b2e4336; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bc5d1b2e4336 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3bc5d1b2e4336 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bc5d1b2e4336; op2val:0x3fe3bc5d1b2e4336; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3bc5d1b2e4336 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3bc5d1b2e4336 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3bc5d1b2e4336; op2val:0x3fe3bc5d1b2e4336; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_256:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd8f332ca82910 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd8f332ca82910 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd8f332ca82910; op2val:0x3fcd8f332ca82910; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_257:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd8f332ca82910 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd8f332ca82910 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd8f332ca82910; op2val:0x3fcd8f332ca82910; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_258:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd8f332ca82910 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd8f332ca82910 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd8f332ca82910; op2val:0x3fcd8f332ca82910; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_259:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd8f332ca82910 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd8f332ca82910 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd8f332ca82910; op2val:0x3fcd8f332ca82910; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_260:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd8f332ca82910 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd8f332ca82910 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd8f332ca82910; op2val:0x3fcd8f332ca82910; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_261:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04b4a5651f44b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x04b4a5651f44b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04b4a5651f44b; op2val:0x3fe04b4a5651f44b; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_262:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04b4a5651f44b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x04b4a5651f44b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04b4a5651f44b; op2val:0x3fe04b4a5651f44b; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_263:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04b4a5651f44b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x04b4a5651f44b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04b4a5651f44b; op2val:0x3fe04b4a5651f44b; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_264:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04b4a5651f44b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x04b4a5651f44b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04b4a5651f44b; op2val:0x3fe04b4a5651f44b; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_265:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x04b4a5651f44b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x04b4a5651f44b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe04b4a5651f44b; op2val:0x3fe04b4a5651f44b; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_266:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xb0460ea7fa560 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xb0460ea7fa560 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9b0460ea7fa560; op2val:0x3f9b0460ea7fa560; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_267:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xb0460ea7fa560 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xb0460ea7fa560 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9b0460ea7fa560; op2val:0x3f9b0460ea7fa560; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_268:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xb0460ea7fa560 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xb0460ea7fa560 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9b0460ea7fa560; op2val:0x3f9b0460ea7fa560; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_269:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xb0460ea7fa560 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xb0460ea7fa560 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9b0460ea7fa560; op2val:0x3f9b0460ea7fa560; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_270:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xb0460ea7fa560 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xb0460ea7fa560 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9b0460ea7fa560; op2val:0x3f9b0460ea7fa560; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_271:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabd8a12385b44 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xabd8a12385b44 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabd8a12385b44; op2val:0x3fcabd8a12385b44; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_272:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabd8a12385b44 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xabd8a12385b44 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabd8a12385b44; op2val:0x3fcabd8a12385b44; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_273:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabd8a12385b44 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xabd8a12385b44 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabd8a12385b44; op2val:0x3fcabd8a12385b44; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_274:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabd8a12385b44 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xabd8a12385b44 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabd8a12385b44; op2val:0x3fcabd8a12385b44; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_275:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xabd8a12385b44 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xabd8a12385b44 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcabd8a12385b44; op2val:0x3fcabd8a12385b44; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f8c5d4abab27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f8c5d4abab27 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f8c5d4abab27; op2val:0x3fe7f8c5d4abab27; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f8c5d4abab27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f8c5d4abab27 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f8c5d4abab27; op2val:0x3fe7f8c5d4abab27; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f8c5d4abab27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f8c5d4abab27 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f8c5d4abab27; op2val:0x3fe7f8c5d4abab27; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f8c5d4abab27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f8c5d4abab27 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f8c5d4abab27; op2val:0x3fe7f8c5d4abab27; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f8c5d4abab27 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7f8c5d4abab27 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f8c5d4abab27; op2val:0x3fe7f8c5d4abab27; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x741bc2ec165a8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x741bc2ec165a8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe741bc2ec165a8; op2val:0x3fe741bc2ec165a8; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x741bc2ec165a8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x741bc2ec165a8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe741bc2ec165a8; op2val:0x3fe741bc2ec165a8; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x741bc2ec165a8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x741bc2ec165a8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe741bc2ec165a8; op2val:0x3fe741bc2ec165a8; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x741bc2ec165a8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x741bc2ec165a8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe741bc2ec165a8; op2val:0x3fe741bc2ec165a8; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x741bc2ec165a8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x741bc2ec165a8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe741bc2ec165a8; op2val:0x3fe741bc2ec165a8; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e311ab680718 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6e311ab680718 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e311ab680718; op2val:0x3fe6e311ab680718; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e311ab680718 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6e311ab680718 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e311ab680718; op2val:0x3fe6e311ab680718; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e311ab680718 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6e311ab680718 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e311ab680718; op2val:0x3fe6e311ab680718; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e311ab680718 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6e311ab680718 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e311ab680718; op2val:0x3fe6e311ab680718; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e311ab680718 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6e311ab680718 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e311ab680718; op2val:0x3fe6e311ab680718; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_291:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x513d45bd56a30 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x513d45bd56a30 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc513d45bd56a30; op2val:0x3fc513d45bd56a30; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_292:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x513d45bd56a30 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x513d45bd56a30 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc513d45bd56a30; op2val:0x3fc513d45bd56a30; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_293:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x513d45bd56a30 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x513d45bd56a30 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc513d45bd56a30; op2val:0x3fc513d45bd56a30; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_294:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x513d45bd56a30 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x513d45bd56a30 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc513d45bd56a30; op2val:0x3fc513d45bd56a30; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_295:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x513d45bd56a30 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x513d45bd56a30 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc513d45bd56a30; op2val:0x3fc513d45bd56a30; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_296:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d69ab8371bd2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7d69ab8371bd2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7d69ab8371bd2; op2val:0x3fd7d69ab8371bd2; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_297:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d69ab8371bd2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7d69ab8371bd2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7d69ab8371bd2; op2val:0x3fd7d69ab8371bd2; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_298:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d69ab8371bd2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7d69ab8371bd2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7d69ab8371bd2; op2val:0x3fd7d69ab8371bd2; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_299:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d69ab8371bd2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7d69ab8371bd2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7d69ab8371bd2; op2val:0x3fd7d69ab8371bd2; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_300:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7d69ab8371bd2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x7d69ab8371bd2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7d69ab8371bd2; op2val:0x3fd7d69ab8371bd2; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_301:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f5922daf04f7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1f5922daf04f7 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f5922daf04f7; op2val:0x3fe1f5922daf04f7; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_302:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f5922daf04f7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1f5922daf04f7 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f5922daf04f7; op2val:0x3fe1f5922daf04f7; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_303:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f5922daf04f7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1f5922daf04f7 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f5922daf04f7; op2val:0x3fe1f5922daf04f7; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_304:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f5922daf04f7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1f5922daf04f7 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f5922daf04f7; op2val:0x3fe1f5922daf04f7; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_305:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f5922daf04f7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1f5922daf04f7 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f5922daf04f7; op2val:0x3fe1f5922daf04f7; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdf289c29291c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf289c29291c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefdf289c29291c; op2val:0x3fefdf289c29291c; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdf289c29291c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf289c29291c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefdf289c29291c; op2val:0x3fefdf289c29291c; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdf289c29291c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf289c29291c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefdf289c29291c; op2val:0x3fefdf289c29291c; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdf289c29291c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf289c29291c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefdf289c29291c; op2val:0x3fefdf289c29291c; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfdf289c29291c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xfdf289c29291c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefdf289c29291c; op2val:0x3fefdf289c29291c; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80e9c8a7c0ee1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80e9c8a7c0ee1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe80e9c8a7c0ee1; op2val:0x3fe80e9c8a7c0ee1; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80e9c8a7c0ee1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80e9c8a7c0ee1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe80e9c8a7c0ee1; op2val:0x3fe80e9c8a7c0ee1; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80e9c8a7c0ee1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80e9c8a7c0ee1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe80e9c8a7c0ee1; op2val:0x3fe80e9c8a7c0ee1; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80e9c8a7c0ee1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80e9c8a7c0ee1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe80e9c8a7c0ee1; op2val:0x3fe80e9c8a7c0ee1; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x80e9c8a7c0ee1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x80e9c8a7c0ee1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe80e9c8a7c0ee1; op2val:0x3fe80e9c8a7c0ee1; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc389b415ba358 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc389b415ba358 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec389b415ba358; op2val:0x3fec389b415ba358; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc389b415ba358 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc389b415ba358 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec389b415ba358; op2val:0x3fec389b415ba358; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc389b415ba358 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc389b415ba358 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec389b415ba358; op2val:0x3fec389b415ba358; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc389b415ba358 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc389b415ba358 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec389b415ba358; op2val:0x3fec389b415ba358; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc389b415ba358 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc389b415ba358 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec389b415ba358; op2val:0x3fec389b415ba358; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_321:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x98e7953ba419e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x98e7953ba419e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd98e7953ba419e; op2val:0x3fd98e7953ba419e; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_322:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x98e7953ba419e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x98e7953ba419e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd98e7953ba419e; op2val:0x3fd98e7953ba419e; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_323:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x98e7953ba419e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x98e7953ba419e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd98e7953ba419e; op2val:0x3fd98e7953ba419e; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_324:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x98e7953ba419e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x98e7953ba419e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd98e7953ba419e; op2val:0x3fd98e7953ba419e; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_325:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x98e7953ba419e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x98e7953ba419e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd98e7953ba419e; op2val:0x3fd98e7953ba419e; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_326:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c65df26e5820 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c65df26e5820 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c65df26e5820; op2val:0x3fa4c65df26e5820; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_327:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c65df26e5820 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c65df26e5820 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c65df26e5820; op2val:0x3fa4c65df26e5820; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_328:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c65df26e5820 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c65df26e5820 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c65df26e5820; op2val:0x3fa4c65df26e5820; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_329:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c65df26e5820 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c65df26e5820 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c65df26e5820; op2val:0x3fa4c65df26e5820; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_330:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c65df26e5820 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c65df26e5820 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c65df26e5820; op2val:0x3fa4c65df26e5820; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf51aa182a8e9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbf51aa182a8e9 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febf51aa182a8e9; op2val:0x3febf51aa182a8e9; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf51aa182a8e9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbf51aa182a8e9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febf51aa182a8e9; op2val:0x3febf51aa182a8e9; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf51aa182a8e9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbf51aa182a8e9 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febf51aa182a8e9; op2val:0x3febf51aa182a8e9; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf51aa182a8e9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbf51aa182a8e9 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febf51aa182a8e9; op2val:0x3febf51aa182a8e9; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbf51aa182a8e9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbf51aa182a8e9 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febf51aa182a8e9; op2val:0x3febf51aa182a8e9; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaba555c5c12e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xaba555c5c12e6 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaba555c5c12e6; op2val:0x3feaba555c5c12e6; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaba555c5c12e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xaba555c5c12e6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaba555c5c12e6; op2val:0x3feaba555c5c12e6; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaba555c5c12e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xaba555c5c12e6 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaba555c5c12e6; op2val:0x3feaba555c5c12e6; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaba555c5c12e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xaba555c5c12e6 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaba555c5c12e6; op2val:0x3feaba555c5c12e6; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xaba555c5c12e6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xaba555c5c12e6 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feaba555c5c12e6; op2val:0x3feaba555c5c12e6; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_341:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x940bfa18b9144 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x940bfa18b9144 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc940bfa18b9144; op2val:0x3fc940bfa18b9144; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_342:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x940bfa18b9144 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x940bfa18b9144 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc940bfa18b9144; op2val:0x3fc940bfa18b9144; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_343:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x940bfa18b9144 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x940bfa18b9144 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc940bfa18b9144; op2val:0x3fc940bfa18b9144; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_344:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x940bfa18b9144 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x940bfa18b9144 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc940bfa18b9144; op2val:0x3fc940bfa18b9144; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_345:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x940bfa18b9144 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x940bfa18b9144 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc940bfa18b9144; op2val:0x3fc940bfa18b9144; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_346:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd7bc6131267c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xd7bc6131267c0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d7bc6131267c0; op2val:0x3f9d7bc6131267c0; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_347:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd7bc6131267c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xd7bc6131267c0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d7bc6131267c0; op2val:0x3f9d7bc6131267c0; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_348:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd7bc6131267c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xd7bc6131267c0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d7bc6131267c0; op2val:0x3f9d7bc6131267c0; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_349:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd7bc6131267c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xd7bc6131267c0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d7bc6131267c0; op2val:0x3f9d7bc6131267c0; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_350:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd7bc6131267c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xd7bc6131267c0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d7bc6131267c0; op2val:0x3f9d7bc6131267c0; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_351:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c21430989b38 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1c21430989b38 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c21430989b38; op2val:0x3fe1c21430989b38; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_352:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c21430989b38 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1c21430989b38 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c21430989b38; op2val:0x3fe1c21430989b38; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_353:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c21430989b38 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1c21430989b38 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c21430989b38; op2val:0x3fe1c21430989b38; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_354:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c21430989b38 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1c21430989b38 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c21430989b38; op2val:0x3fe1c21430989b38; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_355:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c21430989b38 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1c21430989b38 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c21430989b38; op2val:0x3fe1c21430989b38; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_356:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5c730da81c88e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5c730da81c88e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5c730da81c88e; op2val:0x3fd5c730da81c88e; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_357:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5c730da81c88e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5c730da81c88e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5c730da81c88e; op2val:0x3fd5c730da81c88e; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_358:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5c730da81c88e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5c730da81c88e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5c730da81c88e; op2val:0x3fd5c730da81c88e; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_359:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5c730da81c88e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5c730da81c88e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5c730da81c88e; op2val:0x3fd5c730da81c88e; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_360:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5c730da81c88e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x5c730da81c88e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5c730da81c88e; op2val:0x3fd5c730da81c88e; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_361:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcb3fc86212ab4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcb3fc86212ab4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccb3fc86212ab4; op2val:0x3fccb3fc86212ab4; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_362:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcb3fc86212ab4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcb3fc86212ab4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccb3fc86212ab4; op2val:0x3fccb3fc86212ab4; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_363:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcb3fc86212ab4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcb3fc86212ab4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccb3fc86212ab4; op2val:0x3fccb3fc86212ab4; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_364:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcb3fc86212ab4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcb3fc86212ab4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccb3fc86212ab4; op2val:0x3fccb3fc86212ab4; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_365:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xcb3fc86212ab4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xcb3fc86212ab4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fccb3fc86212ab4; op2val:0x3fccb3fc86212ab4; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_366:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c46ec19c88e0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c46ec19c88e0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c46ec19c88e0; op2val:0x3fa4c46ec19c88e0; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_367:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c46ec19c88e0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c46ec19c88e0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c46ec19c88e0; op2val:0x3fa4c46ec19c88e0; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_368:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c46ec19c88e0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c46ec19c88e0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c46ec19c88e0; op2val:0x3fa4c46ec19c88e0; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_369:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c46ec19c88e0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c46ec19c88e0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c46ec19c88e0; op2val:0x3fa4c46ec19c88e0; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_370:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4c46ec19c88e0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4c46ec19c88e0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4c46ec19c88e0; op2val:0x3fa4c46ec19c88e0; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_371:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7706ccd0d681f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7706ccd0d681f and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7706ccd0d681f; op2val:0x3fe7706ccd0d681f; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_372:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7706ccd0d681f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7706ccd0d681f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7706ccd0d681f; op2val:0x3fe7706ccd0d681f; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_373:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7706ccd0d681f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7706ccd0d681f and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7706ccd0d681f; op2val:0x3fe7706ccd0d681f; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_374:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7706ccd0d681f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7706ccd0d681f and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7706ccd0d681f; op2val:0x3fe7706ccd0d681f; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_375:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7706ccd0d681f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7706ccd0d681f and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7706ccd0d681f; op2val:0x3fe7706ccd0d681f; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_376:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8954cbbeac444 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8954cbbeac444 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8954cbbeac444; op2val:0x3fc8954cbbeac444; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_377:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8954cbbeac444 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8954cbbeac444 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8954cbbeac444; op2val:0x3fc8954cbbeac444; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_378:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8954cbbeac444 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8954cbbeac444 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8954cbbeac444; op2val:0x3fc8954cbbeac444; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_379:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8954cbbeac444 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8954cbbeac444 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8954cbbeac444; op2val:0x3fc8954cbbeac444; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_380:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8954cbbeac444 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x8954cbbeac444 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8954cbbeac444; op2val:0x3fc8954cbbeac444; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb283b1e73ef1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb283b1e73ef1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb283b1e73ef1; op2val:0x3feeb283b1e73ef1; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb283b1e73ef1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb283b1e73ef1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb283b1e73ef1; op2val:0x3feeb283b1e73ef1; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb283b1e73ef1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb283b1e73ef1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb283b1e73ef1; op2val:0x3feeb283b1e73ef1; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb283b1e73ef1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb283b1e73ef1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb283b1e73ef1; op2val:0x3feeb283b1e73ef1; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb283b1e73ef1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb283b1e73ef1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb283b1e73ef1; op2val:0x3feeb283b1e73ef1; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xab9f939d2b73d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab9f939d2b73d and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feab9f939d2b73d; op2val:0x3feab9f939d2b73d; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xab9f939d2b73d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab9f939d2b73d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feab9f939d2b73d; op2val:0x3feab9f939d2b73d; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xab9f939d2b73d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab9f939d2b73d and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feab9f939d2b73d; op2val:0x3feab9f939d2b73d; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xab9f939d2b73d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab9f939d2b73d and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feab9f939d2b73d; op2val:0x3feab9f939d2b73d; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xab9f939d2b73d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xab9f939d2b73d and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feab9f939d2b73d; op2val:0x3feab9f939d2b73d; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dd55e276ced3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4dd55e276ced3 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4dd55e276ced3; op2val:0x3fe4dd55e276ced3; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dd55e276ced3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4dd55e276ced3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4dd55e276ced3; op2val:0x3fe4dd55e276ced3; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dd55e276ced3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4dd55e276ced3 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4dd55e276ced3; op2val:0x3fe4dd55e276ced3; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dd55e276ced3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4dd55e276ced3 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4dd55e276ced3; op2val:0x3fe4dd55e276ced3; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4dd55e276ced3 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4dd55e276ced3 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4dd55e276ced3; op2val:0x3fe4dd55e276ced3; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_396:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x460117cd9e472 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x460117cd9e472 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd460117cd9e472; op2val:0x3fd460117cd9e472; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_397:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x460117cd9e472 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x460117cd9e472 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd460117cd9e472; op2val:0x3fd460117cd9e472; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_398:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x460117cd9e472 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x460117cd9e472 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd460117cd9e472; op2val:0x3fd460117cd9e472; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_399:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x460117cd9e472 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x460117cd9e472 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd460117cd9e472; op2val:0x3fd460117cd9e472; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_400:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x460117cd9e472 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x460117cd9e472 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd460117cd9e472; op2val:0x3fd460117cd9e472; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_401:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf020b537bd3e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf020b537bd3e8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf020b537bd3e8; op2val:0x3fcf020b537bd3e8; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_402:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf020b537bd3e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf020b537bd3e8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf020b537bd3e8; op2val:0x3fcf020b537bd3e8; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_403:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf020b537bd3e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf020b537bd3e8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf020b537bd3e8; op2val:0x3fcf020b537bd3e8; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_404:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf020b537bd3e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf020b537bd3e8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf020b537bd3e8; op2val:0x3fcf020b537bd3e8; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_405:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf020b537bd3e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf020b537bd3e8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf020b537bd3e8; op2val:0x3fcf020b537bd3e8; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90944883bb4c1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x90944883bb4c1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe90944883bb4c1; op2val:0x3fe90944883bb4c1; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90944883bb4c1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x90944883bb4c1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe90944883bb4c1; op2val:0x3fe90944883bb4c1; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90944883bb4c1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x90944883bb4c1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe90944883bb4c1; op2val:0x3fe90944883bb4c1; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90944883bb4c1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x90944883bb4c1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe90944883bb4c1; op2val:0x3fe90944883bb4c1; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x90944883bb4c1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x90944883bb4c1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe90944883bb4c1; op2val:0x3fe90944883bb4c1; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5bf2a7607b6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa5bf2a7607b6a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea5bf2a7607b6a; op2val:0x3fea5bf2a7607b6a; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5bf2a7607b6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa5bf2a7607b6a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea5bf2a7607b6a; op2val:0x3fea5bf2a7607b6a; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5bf2a7607b6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa5bf2a7607b6a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea5bf2a7607b6a; op2val:0x3fea5bf2a7607b6a; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5bf2a7607b6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa5bf2a7607b6a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea5bf2a7607b6a; op2val:0x3fea5bf2a7607b6a; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa5bf2a7607b6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa5bf2a7607b6a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea5bf2a7607b6a; op2val:0x3fea5bf2a7607b6a; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_416:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4708c9f1b6c40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4708c9f1b6c40 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4708c9f1b6c40; op2val:0x3fa4708c9f1b6c40; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_417:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4708c9f1b6c40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4708c9f1b6c40 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4708c9f1b6c40; op2val:0x3fa4708c9f1b6c40; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_418:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4708c9f1b6c40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4708c9f1b6c40 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4708c9f1b6c40; op2val:0x3fa4708c9f1b6c40; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_419:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4708c9f1b6c40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4708c9f1b6c40 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4708c9f1b6c40; op2val:0x3fa4708c9f1b6c40; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_420:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x4708c9f1b6c40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x4708c9f1b6c40 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa4708c9f1b6c40; op2val:0x3fa4708c9f1b6c40; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_421:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x26582be07316c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x26582be07316c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc26582be07316c; op2val:0x3fc26582be07316c; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_422:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x26582be07316c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x26582be07316c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc26582be07316c; op2val:0x3fc26582be07316c; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_423:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x26582be07316c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x26582be07316c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc26582be07316c; op2val:0x3fc26582be07316c; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_424:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x26582be07316c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x26582be07316c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc26582be07316c; op2val:0x3fc26582be07316c; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_425:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x26582be07316c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x26582be07316c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc26582be07316c; op2val:0x3fc26582be07316c; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_426:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0de868c48224a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0de868c48224a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0de868c48224a; op2val:0x3fd0de868c48224a; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_427:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0de868c48224a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0de868c48224a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0de868c48224a; op2val:0x3fd0de868c48224a; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_428:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0de868c48224a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0de868c48224a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0de868c48224a; op2val:0x3fd0de868c48224a; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_429:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0de868c48224a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0de868c48224a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0de868c48224a; op2val:0x3fd0de868c48224a; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_430:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0de868c48224a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x0de868c48224a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0de868c48224a; op2val:0x3fd0de868c48224a; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41bbc4356db65 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41bbc4356db65 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe41bbc4356db65; op2val:0x3fe41bbc4356db65; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41bbc4356db65 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41bbc4356db65 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe41bbc4356db65; op2val:0x3fe41bbc4356db65; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41bbc4356db65 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41bbc4356db65 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe41bbc4356db65; op2val:0x3fe41bbc4356db65; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41bbc4356db65 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41bbc4356db65 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe41bbc4356db65; op2val:0x3fe41bbc4356db65; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x41bbc4356db65 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x41bbc4356db65 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe41bbc4356db65; op2val:0x3fe41bbc4356db65; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_436:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ad258d9a7d0a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ad258d9a7d0a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ad258d9a7d0a; op2val:0x3fd3ad258d9a7d0a; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_437:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ad258d9a7d0a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ad258d9a7d0a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ad258d9a7d0a; op2val:0x3fd3ad258d9a7d0a; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_438:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ad258d9a7d0a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ad258d9a7d0a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ad258d9a7d0a; op2val:0x3fd3ad258d9a7d0a; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_439:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ad258d9a7d0a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ad258d9a7d0a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ad258d9a7d0a; op2val:0x3fd3ad258d9a7d0a; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_440:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ad258d9a7d0a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ad258d9a7d0a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ad258d9a7d0a; op2val:0x3fd3ad258d9a7d0a; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_441:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdf315b97a1bb0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xdf315b97a1bb0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbdf315b97a1bb0; op2val:0x3fbdf315b97a1bb0; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_442:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdf315b97a1bb0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xdf315b97a1bb0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbdf315b97a1bb0; op2val:0x3fbdf315b97a1bb0; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_443:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdf315b97a1bb0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xdf315b97a1bb0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbdf315b97a1bb0; op2val:0x3fbdf315b97a1bb0; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_444:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdf315b97a1bb0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xdf315b97a1bb0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbdf315b97a1bb0; op2val:0x3fbdf315b97a1bb0; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_445:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xdf315b97a1bb0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xdf315b97a1bb0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbdf315b97a1bb0; op2val:0x3fbdf315b97a1bb0; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae5a3edf416cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae5a3edf416cb and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae5a3edf416cb; op2val:0x3feae5a3edf416cb; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae5a3edf416cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae5a3edf416cb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae5a3edf416cb; op2val:0x3feae5a3edf416cb; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae5a3edf416cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae5a3edf416cb and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae5a3edf416cb; op2val:0x3feae5a3edf416cb; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae5a3edf416cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae5a3edf416cb and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae5a3edf416cb; op2val:0x3feae5a3edf416cb; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae5a3edf416cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae5a3edf416cb and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae5a3edf416cb; op2val:0x3feae5a3edf416cb; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf40716ad67306 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf40716ad67306 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf40716ad67306; op2val:0x3fdf40716ad67306; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf40716ad67306 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf40716ad67306 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf40716ad67306; op2val:0x3fdf40716ad67306; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf40716ad67306 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf40716ad67306 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf40716ad67306; op2val:0x3fdf40716ad67306; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf40716ad67306 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf40716ad67306 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf40716ad67306; op2val:0x3fdf40716ad67306; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf40716ad67306 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf40716ad67306 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf40716ad67306; op2val:0x3fdf40716ad67306; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe752ad850472c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe752ad850472c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee752ad850472c; op2val:0x3fee752ad850472c; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe752ad850472c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe752ad850472c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee752ad850472c; op2val:0x3fee752ad850472c; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe752ad850472c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe752ad850472c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee752ad850472c; op2val:0x3fee752ad850472c; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe752ad850472c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe752ad850472c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee752ad850472c; op2val:0x3fee752ad850472c; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe752ad850472c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe752ad850472c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee752ad850472c; op2val:0x3fee752ad850472c; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7315a941c4f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7315a941c4f4c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7315a941c4f4c; op2val:0x3fe7315a941c4f4c; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7315a941c4f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7315a941c4f4c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7315a941c4f4c; op2val:0x3fe7315a941c4f4c; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7315a941c4f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7315a941c4f4c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7315a941c4f4c; op2val:0x3fe7315a941c4f4c; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7315a941c4f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7315a941c4f4c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7315a941c4f4c; op2val:0x3fe7315a941c4f4c; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7315a941c4f4c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7315a941c4f4c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7315a941c4f4c; op2val:0x3fe7315a941c4f4c; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_466:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7d2d008b26a78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7d2d008b26a78 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7d2d008b26a78; op2val:0x3fb7d2d008b26a78; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_467:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7d2d008b26a78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7d2d008b26a78 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7d2d008b26a78; op2val:0x3fb7d2d008b26a78; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_468:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7d2d008b26a78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7d2d008b26a78 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7d2d008b26a78; op2val:0x3fb7d2d008b26a78; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_469:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7d2d008b26a78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7d2d008b26a78 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7d2d008b26a78; op2val:0x3fb7d2d008b26a78; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_470:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7d2d008b26a78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x7d2d008b26a78 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7d2d008b26a78; op2val:0x3fb7d2d008b26a78; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_471:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2cee132a6f630 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2cee132a6f630 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2cee132a6f630; op2val:0x3fe2cee132a6f630; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_472:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2cee132a6f630 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2cee132a6f630 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2cee132a6f630; op2val:0x3fe2cee132a6f630; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_473:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2cee132a6f630 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2cee132a6f630 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2cee132a6f630; op2val:0x3fe2cee132a6f630; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_474:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2cee132a6f630 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2cee132a6f630 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2cee132a6f630; op2val:0x3fe2cee132a6f630; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_475:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2cee132a6f630 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x2cee132a6f630 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2cee132a6f630; op2val:0x3fe2cee132a6f630; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_476:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ad733c2c80da and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0ad733c2c80da and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ad733c2c80da; op2val:0x3fe0ad733c2c80da; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_477:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ad733c2c80da and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0ad733c2c80da and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ad733c2c80da; op2val:0x3fe0ad733c2c80da; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_478:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ad733c2c80da and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0ad733c2c80da and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ad733c2c80da; op2val:0x3fe0ad733c2c80da; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_479:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ad733c2c80da and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0ad733c2c80da and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ad733c2c80da; op2val:0x3fe0ad733c2c80da; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_480:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0ad733c2c80da and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0ad733c2c80da and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0ad733c2c80da; op2val:0x3fe0ad733c2c80da; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_481:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85f3c12bf80e5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x85f3c12bf80e5 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85f3c12bf80e5; op2val:0x3fe85f3c12bf80e5; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_482:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85f3c12bf80e5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x85f3c12bf80e5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85f3c12bf80e5; op2val:0x3fe85f3c12bf80e5; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_483:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85f3c12bf80e5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x85f3c12bf80e5 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85f3c12bf80e5; op2val:0x3fe85f3c12bf80e5; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_484:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85f3c12bf80e5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x85f3c12bf80e5 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85f3c12bf80e5; op2val:0x3fe85f3c12bf80e5; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_485:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x85f3c12bf80e5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x85f3c12bf80e5 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe85f3c12bf80e5; op2val:0x3fe85f3c12bf80e5; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4102b3ae319dc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4102b3ae319dc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4102b3ae319dc; op2val:0x3fd4102b3ae319dc; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4102b3ae319dc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4102b3ae319dc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4102b3ae319dc; op2val:0x3fd4102b3ae319dc; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4102b3ae319dc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4102b3ae319dc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4102b3ae319dc; op2val:0x3fd4102b3ae319dc; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4102b3ae319dc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4102b3ae319dc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4102b3ae319dc; op2val:0x3fd4102b3ae319dc; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4102b3ae319dc and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4102b3ae319dc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4102b3ae319dc; op2val:0x3fd4102b3ae319dc; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_491:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6796980a2f2b2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6796980a2f2b2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6796980a2f2b2; op2val:0x3fd6796980a2f2b2; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_492:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6796980a2f2b2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6796980a2f2b2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6796980a2f2b2; op2val:0x3fd6796980a2f2b2; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_493:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6796980a2f2b2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6796980a2f2b2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6796980a2f2b2; op2val:0x3fd6796980a2f2b2; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_494:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6796980a2f2b2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6796980a2f2b2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6796980a2f2b2; op2val:0x3fd6796980a2f2b2; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_495:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6796980a2f2b2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6796980a2f2b2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6796980a2f2b2; op2val:0x3fd6796980a2f2b2; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe29c02d764a06 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe29c02d764a06 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde29c02d764a06; op2val:0x3fde29c02d764a06; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe29c02d764a06 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe29c02d764a06 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde29c02d764a06; op2val:0x3fde29c02d764a06; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe29c02d764a06 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe29c02d764a06 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde29c02d764a06; op2val:0x3fde29c02d764a06; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe29c02d764a06 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe29c02d764a06 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde29c02d764a06; op2val:0x3fde29c02d764a06; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe29c02d764a06 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xe29c02d764a06 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde29c02d764a06; op2val:0x3fde29c02d764a06; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_501:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x886ecd20e56e2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x886ecd20e56e2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe886ecd20e56e2; op2val:0x3fe886ecd20e56e2; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_502:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x886ecd20e56e2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x886ecd20e56e2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe886ecd20e56e2; op2val:0x3fe886ecd20e56e2; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_503:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x886ecd20e56e2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x886ecd20e56e2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe886ecd20e56e2; op2val:0x3fe886ecd20e56e2; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_504:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x886ecd20e56e2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x886ecd20e56e2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe886ecd20e56e2; op2val:0x3fe886ecd20e56e2; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_505:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x886ecd20e56e2 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x886ecd20e56e2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe886ecd20e56e2; op2val:0x3fe886ecd20e56e2; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_506:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a55c34fb190 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32a55c34fb190 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe32a55c34fb190; op2val:0x3fe32a55c34fb190; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_507:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a55c34fb190 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32a55c34fb190 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe32a55c34fb190; op2val:0x3fe32a55c34fb190; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_508:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a55c34fb190 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32a55c34fb190 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe32a55c34fb190; op2val:0x3fe32a55c34fb190; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a55c34fb190 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32a55c34fb190 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe32a55c34fb190; op2val:0x3fe32a55c34fb190; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_510:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x32a55c34fb190 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x32a55c34fb190 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe32a55c34fb190; op2val:0x3fe32a55c34fb190; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_511:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e57a6b91c248 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5e57a6b91c248 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5e57a6b91c248; op2val:0x3fc5e57a6b91c248; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_512:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e57a6b91c248 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5e57a6b91c248 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5e57a6b91c248; op2val:0x3fc5e57a6b91c248; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_513:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e57a6b91c248 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5e57a6b91c248 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5e57a6b91c248; op2val:0x3fc5e57a6b91c248; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_514:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e57a6b91c248 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5e57a6b91c248 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5e57a6b91c248; op2val:0x3fc5e57a6b91c248; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_515:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5e57a6b91c248 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5e57a6b91c248 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5e57a6b91c248; op2val:0x3fc5e57a6b91c248; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_516:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbfef16f722e29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbfef16f722e29 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febfef16f722e29; op2val:0x3febfef16f722e29; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_517:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbfef16f722e29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbfef16f722e29 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febfef16f722e29; op2val:0x3febfef16f722e29; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_518:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbfef16f722e29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbfef16f722e29 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febfef16f722e29; op2val:0x3febfef16f722e29; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_519:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbfef16f722e29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbfef16f722e29 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febfef16f722e29; op2val:0x3febfef16f722e29; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_520:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbfef16f722e29 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbfef16f722e29 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febfef16f722e29; op2val:0x3febfef16f722e29; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_521:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4a44da5ae01fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a44da5ae01fb and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4a44da5ae01fb; op2val:0x3fe4a44da5ae01fb; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_522:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4a44da5ae01fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a44da5ae01fb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4a44da5ae01fb; op2val:0x3fe4a44da5ae01fb; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_523:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4a44da5ae01fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a44da5ae01fb and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4a44da5ae01fb; op2val:0x3fe4a44da5ae01fb; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_524:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4a44da5ae01fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a44da5ae01fb and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4a44da5ae01fb; op2val:0x3fe4a44da5ae01fb; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_525:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4a44da5ae01fb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4a44da5ae01fb and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4a44da5ae01fb; op2val:0x3fe4a44da5ae01fb; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_526:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b3ae7d94534 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7b3ae7d94534 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7b3ae7d94534; op2val:0x3fdb7b3ae7d94534; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_527:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b3ae7d94534 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7b3ae7d94534 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7b3ae7d94534; op2val:0x3fdb7b3ae7d94534; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_528:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b3ae7d94534 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7b3ae7d94534 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7b3ae7d94534; op2val:0x3fdb7b3ae7d94534; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_529:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b3ae7d94534 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7b3ae7d94534 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7b3ae7d94534; op2val:0x3fdb7b3ae7d94534; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_530:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7b3ae7d94534 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7b3ae7d94534 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7b3ae7d94534; op2val:0x3fdb7b3ae7d94534; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a0bef889f456 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6a0bef889f456 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a0bef889f456; op2val:0x3fd6a0bef889f456; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a0bef889f456 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6a0bef889f456 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a0bef889f456; op2val:0x3fd6a0bef889f456; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a0bef889f456 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6a0bef889f456 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a0bef889f456; op2val:0x3fd6a0bef889f456; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a0bef889f456 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6a0bef889f456 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a0bef889f456; op2val:0x3fd6a0bef889f456; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a0bef889f456 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6a0bef889f456 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a0bef889f456; op2val:0x3fd6a0bef889f456; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_536:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7beb79a0e8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7beb79a0e8ee0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7beb79a0e8ee0; op2val:0x3fe7beb79a0e8ee0; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_537:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7beb79a0e8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7beb79a0e8ee0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7beb79a0e8ee0; op2val:0x3fe7beb79a0e8ee0; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_538:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7beb79a0e8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7beb79a0e8ee0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7beb79a0e8ee0; op2val:0x3fe7beb79a0e8ee0; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_539:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7beb79a0e8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7beb79a0e8ee0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7beb79a0e8ee0; op2val:0x3fe7beb79a0e8ee0; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_540:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7beb79a0e8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7beb79a0e8ee0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7beb79a0e8ee0; op2val:0x3fe7beb79a0e8ee0; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_541:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x356570ca7a355 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x356570ca7a355 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe356570ca7a355; op2val:0x3fe356570ca7a355; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_542:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x356570ca7a355 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x356570ca7a355 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe356570ca7a355; op2val:0x3fe356570ca7a355; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_543:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x356570ca7a355 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x356570ca7a355 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe356570ca7a355; op2val:0x3fe356570ca7a355; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_544:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x356570ca7a355 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x356570ca7a355 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe356570ca7a355; op2val:0x3fe356570ca7a355; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_545:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x356570ca7a355 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x356570ca7a355 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe356570ca7a355; op2val:0x3fe356570ca7a355; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_546:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x308d787641b4c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x308d787641b4c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc308d787641b4c; op2val:0x3fc308d787641b4c; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_547:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x308d787641b4c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x308d787641b4c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc308d787641b4c; op2val:0x3fc308d787641b4c; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_548:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x308d787641b4c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x308d787641b4c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc308d787641b4c; op2val:0x3fc308d787641b4c; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_549:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x308d787641b4c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x308d787641b4c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc308d787641b4c; op2val:0x3fc308d787641b4c; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_550:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x308d787641b4c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x308d787641b4c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc308d787641b4c; op2val:0x3fc308d787641b4c; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_551:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd8c2edff8cc2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd8c2edff8cc2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcd8c2edff8cc2; op2val:0x3fdcd8c2edff8cc2; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_552:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd8c2edff8cc2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd8c2edff8cc2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcd8c2edff8cc2; op2val:0x3fdcd8c2edff8cc2; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_553:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd8c2edff8cc2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd8c2edff8cc2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcd8c2edff8cc2; op2val:0x3fdcd8c2edff8cc2; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_554:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd8c2edff8cc2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd8c2edff8cc2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcd8c2edff8cc2; op2val:0x3fdcd8c2edff8cc2; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_555:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcd8c2edff8cc2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcd8c2edff8cc2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcd8c2edff8cc2; op2val:0x3fdcd8c2edff8cc2; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_556:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2bf15e3695970 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x2bf15e3695970 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2bf15e3695970; op2val:0x3fa2bf15e3695970; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_557:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2bf15e3695970 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x2bf15e3695970 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2bf15e3695970; op2val:0x3fa2bf15e3695970; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_558:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2bf15e3695970 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x2bf15e3695970 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2bf15e3695970; op2val:0x3fa2bf15e3695970; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_559:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2bf15e3695970 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x2bf15e3695970 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2bf15e3695970; op2val:0x3fa2bf15e3695970; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_560:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2bf15e3695970 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x2bf15e3695970 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2bf15e3695970; op2val:0x3fa2bf15e3695970; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_561:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7eacfe8e38e8d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eacfe8e38e8d and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7eacfe8e38e8d; op2val:0x3fe7eacfe8e38e8d; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_562:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7eacfe8e38e8d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eacfe8e38e8d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7eacfe8e38e8d; op2val:0x3fe7eacfe8e38e8d; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_563:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7eacfe8e38e8d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eacfe8e38e8d and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7eacfe8e38e8d; op2val:0x3fe7eacfe8e38e8d; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_564:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7eacfe8e38e8d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eacfe8e38e8d and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7eacfe8e38e8d; op2val:0x3fe7eacfe8e38e8d; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_565:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7eacfe8e38e8d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7eacfe8e38e8d and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7eacfe8e38e8d; op2val:0x3fe7eacfe8e38e8d; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_566:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x24050f11a6bda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24050f11a6bda and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd24050f11a6bda; op2val:0x3fd24050f11a6bda; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_567:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x24050f11a6bda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24050f11a6bda and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd24050f11a6bda; op2val:0x3fd24050f11a6bda; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_568:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x24050f11a6bda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24050f11a6bda and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd24050f11a6bda; op2val:0x3fd24050f11a6bda; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_569:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x24050f11a6bda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24050f11a6bda and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd24050f11a6bda; op2val:0x3fd24050f11a6bda; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_570:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x24050f11a6bda and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x24050f11a6bda and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd24050f11a6bda; op2val:0x3fd24050f11a6bda; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_571:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x227d459d99b9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x227d459d99b9e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe227d459d99b9e; op2val:0x3fe227d459d99b9e; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_572:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x227d459d99b9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x227d459d99b9e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe227d459d99b9e; op2val:0x3fe227d459d99b9e; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_573:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x227d459d99b9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x227d459d99b9e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe227d459d99b9e; op2val:0x3fe227d459d99b9e; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_574:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x227d459d99b9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x227d459d99b9e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe227d459d99b9e; op2val:0x3fe227d459d99b9e; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_575:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x227d459d99b9e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x227d459d99b9e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe227d459d99b9e; op2val:0x3fe227d459d99b9e; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_576:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ddac2e5b4558 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ddac2e5b4558 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ddac2e5b4558; op2val:0x3fd3ddac2e5b4558; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_577:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ddac2e5b4558 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ddac2e5b4558 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ddac2e5b4558; op2val:0x3fd3ddac2e5b4558; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_578:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ddac2e5b4558 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ddac2e5b4558 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ddac2e5b4558; op2val:0x3fd3ddac2e5b4558; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_579:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ddac2e5b4558 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ddac2e5b4558 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ddac2e5b4558; op2val:0x3fd3ddac2e5b4558; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_580:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ddac2e5b4558 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3ddac2e5b4558 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ddac2e5b4558; op2val:0x3fd3ddac2e5b4558; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_581:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46355e0e7872c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x46355e0e7872c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc46355e0e7872c; op2val:0x3fc46355e0e7872c; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_582:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46355e0e7872c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x46355e0e7872c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc46355e0e7872c; op2val:0x3fc46355e0e7872c; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_583:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46355e0e7872c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x46355e0e7872c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc46355e0e7872c; op2val:0x3fc46355e0e7872c; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_584:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46355e0e7872c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x46355e0e7872c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc46355e0e7872c; op2val:0x3fc46355e0e7872c; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_585:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x46355e0e7872c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x46355e0e7872c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc46355e0e7872c; op2val:0x3fc46355e0e7872c; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_586:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x91b3cc53eacfc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x91b3cc53eacfc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc91b3cc53eacfc; op2val:0x3fc91b3cc53eacfc; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_587:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x91b3cc53eacfc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x91b3cc53eacfc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc91b3cc53eacfc; op2val:0x3fc91b3cc53eacfc; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_588:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x91b3cc53eacfc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x91b3cc53eacfc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc91b3cc53eacfc; op2val:0x3fc91b3cc53eacfc; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_589:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x91b3cc53eacfc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x91b3cc53eacfc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc91b3cc53eacfc; op2val:0x3fc91b3cc53eacfc; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_590:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x91b3cc53eacfc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x91b3cc53eacfc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc91b3cc53eacfc; op2val:0x3fc91b3cc53eacfc; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_591:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2c3f0b743f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5e2c3f0b743f5 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e2c3f0b743f5; op2val:0x3fe5e2c3f0b743f5; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_592:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2c3f0b743f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5e2c3f0b743f5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e2c3f0b743f5; op2val:0x3fe5e2c3f0b743f5; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_593:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2c3f0b743f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5e2c3f0b743f5 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e2c3f0b743f5; op2val:0x3fe5e2c3f0b743f5; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_594:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2c3f0b743f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5e2c3f0b743f5 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e2c3f0b743f5; op2val:0x3fe5e2c3f0b743f5; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_595:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5e2c3f0b743f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5e2c3f0b743f5 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5e2c3f0b743f5; op2val:0x3fe5e2c3f0b743f5; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_596:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eaac48e03a18 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6eaac48e03a18 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6eaac48e03a18; op2val:0x3fb6eaac48e03a18; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_597:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eaac48e03a18 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6eaac48e03a18 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6eaac48e03a18; op2val:0x3fb6eaac48e03a18; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_598:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eaac48e03a18 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6eaac48e03a18 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6eaac48e03a18; op2val:0x3fb6eaac48e03a18; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_599:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eaac48e03a18 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6eaac48e03a18 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6eaac48e03a18; op2val:0x3fb6eaac48e03a18; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_600:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6eaac48e03a18 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6eaac48e03a18 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6eaac48e03a18; op2val:0x3fb6eaac48e03a18; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_601:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb329f996261a8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb329f996261a8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb329f996261a8; op2val:0x3fbb329f996261a8; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_602:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb329f996261a8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb329f996261a8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb329f996261a8; op2val:0x3fbb329f996261a8; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_603:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb329f996261a8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb329f996261a8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb329f996261a8; op2val:0x3fbb329f996261a8; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_604:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb329f996261a8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb329f996261a8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb329f996261a8; op2val:0x3fbb329f996261a8; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_605:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb329f996261a8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb329f996261a8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb329f996261a8; op2val:0x3fbb329f996261a8; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_606:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a5060cbd4ba0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4a5060cbd4ba0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a5060cbd4ba0; op2val:0x3fb4a5060cbd4ba0; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_607:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a5060cbd4ba0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4a5060cbd4ba0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a5060cbd4ba0; op2val:0x3fb4a5060cbd4ba0; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_608:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a5060cbd4ba0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4a5060cbd4ba0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a5060cbd4ba0; op2val:0x3fb4a5060cbd4ba0; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_609:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a5060cbd4ba0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4a5060cbd4ba0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a5060cbd4ba0; op2val:0x3fb4a5060cbd4ba0; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_610:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4a5060cbd4ba0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x4a5060cbd4ba0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4a5060cbd4ba0; op2val:0x3fb4a5060cbd4ba0; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_611:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc94752529a6f9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc94752529a6f9 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec94752529a6f9; op2val:0x3fec94752529a6f9; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_612:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc94752529a6f9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc94752529a6f9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec94752529a6f9; op2val:0x3fec94752529a6f9; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_613:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc94752529a6f9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc94752529a6f9 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec94752529a6f9; op2val:0x3fec94752529a6f9; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_614:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc94752529a6f9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc94752529a6f9 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec94752529a6f9; op2val:0x3fec94752529a6f9; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_615:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc94752529a6f9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc94752529a6f9 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec94752529a6f9; op2val:0x3fec94752529a6f9; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_616:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6d771e226b99c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6d771e226b99c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6d771e226b99c; op2val:0x3fc6d771e226b99c; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_617:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6d771e226b99c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6d771e226b99c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6d771e226b99c; op2val:0x3fc6d771e226b99c; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_618:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6d771e226b99c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6d771e226b99c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6d771e226b99c; op2val:0x3fc6d771e226b99c; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_619:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6d771e226b99c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6d771e226b99c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6d771e226b99c; op2val:0x3fc6d771e226b99c; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_620:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6d771e226b99c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x6d771e226b99c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6d771e226b99c; op2val:0x3fc6d771e226b99c; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_621:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xca52f1d9b63e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xca52f1d9b63e8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcca52f1d9b63e8; op2val:0x3fcca52f1d9b63e8; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_622:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xca52f1d9b63e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xca52f1d9b63e8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcca52f1d9b63e8; op2val:0x3fcca52f1d9b63e8; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_623:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xca52f1d9b63e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xca52f1d9b63e8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcca52f1d9b63e8; op2val:0x3fcca52f1d9b63e8; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_624:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xca52f1d9b63e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xca52f1d9b63e8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcca52f1d9b63e8; op2val:0x3fcca52f1d9b63e8; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_625:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xca52f1d9b63e8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xca52f1d9b63e8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcca52f1d9b63e8; op2val:0x3fcca52f1d9b63e8; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_626:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9fecb556c9600 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9fecb556c9600 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9fecb556c9600; op2val:0x3fa9fecb556c9600; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_627:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9fecb556c9600 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9fecb556c9600 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9fecb556c9600; op2val:0x3fa9fecb556c9600; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_628:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9fecb556c9600 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9fecb556c9600 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9fecb556c9600; op2val:0x3fa9fecb556c9600; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_629:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9fecb556c9600 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9fecb556c9600 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9fecb556c9600; op2val:0x3fa9fecb556c9600; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_630:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9fecb556c9600 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x9fecb556c9600 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9fecb556c9600; op2val:0x3fa9fecb556c9600; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_631:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3dfb1ac020fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa3dfb1ac020fc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3dfb1ac020fc; op2val:0x3fca3dfb1ac020fc; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_632:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3dfb1ac020fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa3dfb1ac020fc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3dfb1ac020fc; op2val:0x3fca3dfb1ac020fc; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_633:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3dfb1ac020fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa3dfb1ac020fc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3dfb1ac020fc; op2val:0x3fca3dfb1ac020fc; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_634:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3dfb1ac020fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa3dfb1ac020fc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3dfb1ac020fc; op2val:0x3fca3dfb1ac020fc; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_6)

inst_635:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3dfb1ac020fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xa3dfb1ac020fc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3dfb1ac020fc; op2val:0x3fca3dfb1ac020fc; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_636:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb10f5f398a4a4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb10f5f398a4a4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb10f5f398a4a4; op2val:0x3feb10f5f398a4a4; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_637:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb10f5f398a4a4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb10f5f398a4a4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb10f5f398a4a4; op2val:0x3feb10f5f398a4a4; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_638:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb10f5f398a4a4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb10f5f398a4a4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb10f5f398a4a4; op2val:0x3feb10f5f398a4a4; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_639:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb10f5f398a4a4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb10f5f398a4a4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb10f5f398a4a4; op2val:0x3feb10f5f398a4a4; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_640:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb10f5f398a4a4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb10f5f398a4a4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb10f5f398a4a4; op2val:0x3feb10f5f398a4a4; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_641:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x037349e1fe9e1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x037349e1fe9e1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe037349e1fe9e1; op2val:0x3fe037349e1fe9e1; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_642:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x037349e1fe9e1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x037349e1fe9e1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe037349e1fe9e1; op2val:0x3fe037349e1fe9e1; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_643:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x037349e1fe9e1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x037349e1fe9e1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe037349e1fe9e1; op2val:0x3fe037349e1fe9e1; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_644:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x037349e1fe9e1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x037349e1fe9e1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe037349e1fe9e1; op2val:0x3fe037349e1fe9e1; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_645:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x037349e1fe9e1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x037349e1fe9e1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe037349e1fe9e1; op2val:0x3fe037349e1fe9e1; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_646:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b19700ff40f8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b19700ff40f8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6b19700ff40f8; op2val:0x3fe6b19700ff40f8; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_647:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b19700ff40f8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b19700ff40f8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6b19700ff40f8; op2val:0x3fe6b19700ff40f8; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_648:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b19700ff40f8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b19700ff40f8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6b19700ff40f8; op2val:0x3fe6b19700ff40f8; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_649:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b19700ff40f8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b19700ff40f8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6b19700ff40f8; op2val:0x3fe6b19700ff40f8; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_650:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6b19700ff40f8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6b19700ff40f8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6b19700ff40f8; op2val:0x3fe6b19700ff40f8; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_651:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd988967e9f837 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd988967e9f837 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed988967e9f837; op2val:0x3fed988967e9f837; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_652:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd988967e9f837 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd988967e9f837 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed988967e9f837; op2val:0x3fed988967e9f837; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_653:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd988967e9f837 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd988967e9f837 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed988967e9f837; op2val:0x3fed988967e9f837; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_654:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd988967e9f837 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd988967e9f837 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed988967e9f837; op2val:0x3fed988967e9f837; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_655:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd988967e9f837 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd988967e9f837 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed988967e9f837; op2val:0x3fed988967e9f837; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcb90fb10f3ec6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcb90fb10f3ec6 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcb90fb10f3ec6; op2val:0x3fdcb90fb10f3ec6; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcb90fb10f3ec6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcb90fb10f3ec6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcb90fb10f3ec6; op2val:0x3fdcb90fb10f3ec6; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcb90fb10f3ec6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcb90fb10f3ec6 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcb90fb10f3ec6; op2val:0x3fdcb90fb10f3ec6; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcb90fb10f3ec6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcb90fb10f3ec6 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcb90fb10f3ec6; op2val:0x3fdcb90fb10f3ec6; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xcb90fb10f3ec6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xcb90fb10f3ec6 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdcb90fb10f3ec6; op2val:0x3fdcb90fb10f3ec6; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_661:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8331fb2649573 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8331fb2649573 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8331fb2649573; op2val:0x3fe8331fb2649573; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_662:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8331fb2649573 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8331fb2649573 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8331fb2649573; op2val:0x3fe8331fb2649573; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_663:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8331fb2649573 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8331fb2649573 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8331fb2649573; op2val:0x3fe8331fb2649573; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_664:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8331fb2649573 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8331fb2649573 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8331fb2649573; op2val:0x3fe8331fb2649573; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_665:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8331fb2649573 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8331fb2649573 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8331fb2649573; op2val:0x3fe8331fb2649573; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_666:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x828283b1e8f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x828283b1e8f94 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe828283b1e8f94; op2val:0x3fe828283b1e8f94; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_667:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x828283b1e8f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x828283b1e8f94 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe828283b1e8f94; op2val:0x3fe828283b1e8f94; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_668:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x828283b1e8f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x828283b1e8f94 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe828283b1e8f94; op2val:0x3fe828283b1e8f94; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_669:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x828283b1e8f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x828283b1e8f94 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe828283b1e8f94; op2val:0x3fe828283b1e8f94; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_670:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x828283b1e8f94 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x828283b1e8f94 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe828283b1e8f94; op2val:0x3fe828283b1e8f94; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_671:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf1e7118a19f4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaf1e7118a19f4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdaf1e7118a19f4; op2val:0x3fdaf1e7118a19f4; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_672:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf1e7118a19f4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaf1e7118a19f4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdaf1e7118a19f4; op2val:0x3fdaf1e7118a19f4; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_673:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf1e7118a19f4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaf1e7118a19f4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdaf1e7118a19f4; op2val:0x3fdaf1e7118a19f4; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_674:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf1e7118a19f4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaf1e7118a19f4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdaf1e7118a19f4; op2val:0x3fdaf1e7118a19f4; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_675:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xaf1e7118a19f4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xaf1e7118a19f4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdaf1e7118a19f4; op2val:0x3fdaf1e7118a19f4; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_676:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54d240798a130 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54d240798a130 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54d240798a130; op2val:0x3fe54d240798a130; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_677:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54d240798a130 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54d240798a130 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54d240798a130; op2val:0x3fe54d240798a130; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_678:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54d240798a130 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54d240798a130 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54d240798a130; op2val:0x3fe54d240798a130; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_679:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54d240798a130 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54d240798a130 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54d240798a130; op2val:0x3fe54d240798a130; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_680:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x54d240798a130 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x54d240798a130 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe54d240798a130; op2val:0x3fe54d240798a130; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_681:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb4391628449f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb4391628449f0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb4391628449f0; op2val:0x3fbb4391628449f0; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_682:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb4391628449f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb4391628449f0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb4391628449f0; op2val:0x3fbb4391628449f0; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_683:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb4391628449f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb4391628449f0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb4391628449f0; op2val:0x3fbb4391628449f0; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_684:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb4391628449f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb4391628449f0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb4391628449f0; op2val:0x3fbb4391628449f0; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_685:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb4391628449f0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xb4391628449f0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb4391628449f0; op2val:0x3fbb4391628449f0; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_686:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dd4e40d43e1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dd4e40d43e1e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dd4e40d43e1e; op2val:0x3fe5dd4e40d43e1e; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_687:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dd4e40d43e1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dd4e40d43e1e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dd4e40d43e1e; op2val:0x3fe5dd4e40d43e1e; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_688:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dd4e40d43e1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dd4e40d43e1e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dd4e40d43e1e; op2val:0x3fe5dd4e40d43e1e; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_689:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dd4e40d43e1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dd4e40d43e1e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dd4e40d43e1e; op2val:0x3fe5dd4e40d43e1e; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_690:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dd4e40d43e1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5dd4e40d43e1e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dd4e40d43e1e; op2val:0x3fe5dd4e40d43e1e; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_691:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62ed2b3d5f666 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62ed2b3d5f666 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62ed2b3d5f666; op2val:0x3fe62ed2b3d5f666; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_692:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62ed2b3d5f666 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62ed2b3d5f666 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62ed2b3d5f666; op2val:0x3fe62ed2b3d5f666; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_693:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62ed2b3d5f666 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62ed2b3d5f666 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62ed2b3d5f666; op2val:0x3fe62ed2b3d5f666; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_694:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62ed2b3d5f666 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62ed2b3d5f666 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62ed2b3d5f666; op2val:0x3fe62ed2b3d5f666; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_695:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62ed2b3d5f666 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62ed2b3d5f666 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62ed2b3d5f666; op2val:0x3fe62ed2b3d5f666; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_696:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe580b7171d940 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xe580b7171d940 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fae580b7171d940; op2val:0x3fae580b7171d940; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_697:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe580b7171d940 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xe580b7171d940 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fae580b7171d940; op2val:0x3fae580b7171d940; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_698:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe580b7171d940 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xe580b7171d940 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fae580b7171d940; op2val:0x3fae580b7171d940; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_699:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe580b7171d940 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xe580b7171d940 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fae580b7171d940; op2val:0x3fae580b7171d940; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_700:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xe580b7171d940 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xe580b7171d940 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fae580b7171d940; op2val:0x3fae580b7171d940; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_701:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x645759b67b7ec and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x645759b67b7ec and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd645759b67b7ec; op2val:0x3fd645759b67b7ec; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_702:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x645759b67b7ec and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x645759b67b7ec and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd645759b67b7ec; op2val:0x3fd645759b67b7ec; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_703:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x645759b67b7ec and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x645759b67b7ec and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd645759b67b7ec; op2val:0x3fd645759b67b7ec; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_704:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x645759b67b7ec and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x645759b67b7ec and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd645759b67b7ec; op2val:0x3fd645759b67b7ec; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_705:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x645759b67b7ec and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x645759b67b7ec and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd645759b67b7ec; op2val:0x3fd645759b67b7ec; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_706:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x105b19f944d60 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x105b19f944d60 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9105b19f944d60; op2val:0x3f9105b19f944d60; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_707:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x105b19f944d60 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x105b19f944d60 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9105b19f944d60; op2val:0x3f9105b19f944d60; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_708:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x105b19f944d60 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x105b19f944d60 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9105b19f944d60; op2val:0x3f9105b19f944d60; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_709:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x105b19f944d60 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x105b19f944d60 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9105b19f944d60; op2val:0x3f9105b19f944d60; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_710:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x105b19f944d60 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x105b19f944d60 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9105b19f944d60; op2val:0x3f9105b19f944d60; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_711:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd656d54b857f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd656d54b857f0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed656d54b857f0; op2val:0x3fed656d54b857f0; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_712:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd656d54b857f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd656d54b857f0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed656d54b857f0; op2val:0x3fed656d54b857f0; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_713:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd656d54b857f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd656d54b857f0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed656d54b857f0; op2val:0x3fed656d54b857f0; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_714:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd656d54b857f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd656d54b857f0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed656d54b857f0; op2val:0x3fed656d54b857f0; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_715:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd656d54b857f0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd656d54b857f0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed656d54b857f0; op2val:0x3fed656d54b857f0; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_716:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62a6ce73400c0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62a6ce73400c0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62a6ce73400c0; op2val:0x3fe62a6ce73400c0; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_717:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62a6ce73400c0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62a6ce73400c0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62a6ce73400c0; op2val:0x3fe62a6ce73400c0; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_718:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62a6ce73400c0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62a6ce73400c0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62a6ce73400c0; op2val:0x3fe62a6ce73400c0; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_719:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62a6ce73400c0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62a6ce73400c0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62a6ce73400c0; op2val:0x3fe62a6ce73400c0; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_720:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62a6ce73400c0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x62a6ce73400c0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62a6ce73400c0; op2val:0x3fe62a6ce73400c0; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_721:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b5914b446142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b5914b446142 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7b5914b446142; op2val:0x3fe7b5914b446142; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_722:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b5914b446142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b5914b446142 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7b5914b446142; op2val:0x3fe7b5914b446142; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_723:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b5914b446142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b5914b446142 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7b5914b446142; op2val:0x3fe7b5914b446142; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_724:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b5914b446142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b5914b446142 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7b5914b446142; op2val:0x3fe7b5914b446142; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_725:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7b5914b446142 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7b5914b446142 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7b5914b446142; op2val:0x3fe7b5914b446142; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_726:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4b2bc3fa6d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3f4b2bc3fa6d2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3f4b2bc3fa6d2; op2val:0x3fd3f4b2bc3fa6d2; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_727:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4b2bc3fa6d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3f4b2bc3fa6d2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3f4b2bc3fa6d2; op2val:0x3fd3f4b2bc3fa6d2; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_728:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4b2bc3fa6d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3f4b2bc3fa6d2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3f4b2bc3fa6d2; op2val:0x3fd3f4b2bc3fa6d2; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_729:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4b2bc3fa6d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3f4b2bc3fa6d2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3f4b2bc3fa6d2; op2val:0x3fd3f4b2bc3fa6d2; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_730:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3f4b2bc3fa6d2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3f4b2bc3fa6d2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3f4b2bc3fa6d2; op2val:0x3fd3f4b2bc3fa6d2; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_731:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4873b0decd9c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x4873b0decd9c0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f94873b0decd9c0; op2val:0x3f94873b0decd9c0; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_732:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4873b0decd9c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x4873b0decd9c0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f94873b0decd9c0; op2val:0x3f94873b0decd9c0; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_733:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4873b0decd9c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x4873b0decd9c0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f94873b0decd9c0; op2val:0x3f94873b0decd9c0; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_734:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4873b0decd9c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x4873b0decd9c0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f94873b0decd9c0; op2val:0x3f94873b0decd9c0; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_735:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x4873b0decd9c0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x4873b0decd9c0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f94873b0decd9c0; op2val:0x3f94873b0decd9c0; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_736:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x91d2300dc0569 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91d2300dc0569 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe91d2300dc0569; op2val:0x3fe91d2300dc0569; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_737:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x91d2300dc0569 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91d2300dc0569 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe91d2300dc0569; op2val:0x3fe91d2300dc0569; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_738:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x91d2300dc0569 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91d2300dc0569 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe91d2300dc0569; op2val:0x3fe91d2300dc0569; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_739:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x91d2300dc0569 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91d2300dc0569 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe91d2300dc0569; op2val:0x3fe91d2300dc0569; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_740:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x91d2300dc0569 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x91d2300dc0569 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe91d2300dc0569; op2val:0x3fe91d2300dc0569; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_741:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xeedaa45a67220 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xeedaa45a67220 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9eedaa45a67220; op2val:0x3f9eedaa45a67220; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_742:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xeedaa45a67220 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xeedaa45a67220 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9eedaa45a67220; op2val:0x3f9eedaa45a67220; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_743:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xeedaa45a67220 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xeedaa45a67220 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9eedaa45a67220; op2val:0x3f9eedaa45a67220; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_744:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xeedaa45a67220 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xeedaa45a67220 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9eedaa45a67220; op2val:0x3f9eedaa45a67220; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_745:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xeedaa45a67220 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xeedaa45a67220 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9eedaa45a67220; op2val:0x3f9eedaa45a67220; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_746:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x62bf0d5d845d0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x62bf0d5d845d0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb62bf0d5d845d0; op2val:0x3fb62bf0d5d845d0; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_747:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x62bf0d5d845d0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x62bf0d5d845d0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb62bf0d5d845d0; op2val:0x3fb62bf0d5d845d0; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_748:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x62bf0d5d845d0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x62bf0d5d845d0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb62bf0d5d845d0; op2val:0x3fb62bf0d5d845d0; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_749:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x62bf0d5d845d0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x62bf0d5d845d0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb62bf0d5d845d0; op2val:0x3fb62bf0d5d845d0; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_750:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x62bf0d5d845d0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x62bf0d5d845d0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb62bf0d5d845d0; op2val:0x3fb62bf0d5d845d0; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_751:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f99a6a67e128 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5f99a6a67e128 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5f99a6a67e128; op2val:0x3fe5f99a6a67e128; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_752:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f99a6a67e128 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5f99a6a67e128 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5f99a6a67e128; op2val:0x3fe5f99a6a67e128; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_753:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f99a6a67e128 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5f99a6a67e128 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5f99a6a67e128; op2val:0x3fe5f99a6a67e128; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_754:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f99a6a67e128 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5f99a6a67e128 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5f99a6a67e128; op2val:0x3fe5f99a6a67e128; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_755:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5f99a6a67e128 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5f99a6a67e128 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5f99a6a67e128; op2val:0x3fe5f99a6a67e128; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_756:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d1c95d70201a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9d1c95d70201a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d1c95d70201a; op2val:0x3fd9d1c95d70201a; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_757:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d1c95d70201a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9d1c95d70201a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d1c95d70201a; op2val:0x3fd9d1c95d70201a; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_758:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d1c95d70201a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9d1c95d70201a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d1c95d70201a; op2val:0x3fd9d1c95d70201a; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_759:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d1c95d70201a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9d1c95d70201a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d1c95d70201a; op2val:0x3fd9d1c95d70201a; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_760:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9d1c95d70201a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x9d1c95d70201a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9d1c95d70201a; op2val:0x3fd9d1c95d70201a; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_761:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1d5990985d1a0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1d5990985d1a0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91d5990985d1a0; op2val:0x3f91d5990985d1a0; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_7)

inst_762:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1d5990985d1a0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1d5990985d1a0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91d5990985d1a0; op2val:0x3f91d5990985d1a0; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1d5990985d1a0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1d5990985d1a0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91d5990985d1a0; op2val:0x3f91d5990985d1a0; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_764:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1d5990985d1a0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1d5990985d1a0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91d5990985d1a0; op2val:0x3f91d5990985d1a0; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_765:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1d5990985d1a0 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1d5990985d1a0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91d5990985d1a0; op2val:0x3f91d5990985d1a0; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebb6e63e4154a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xebb6e63e4154a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feebb6e63e4154a; op2val:0x3feebb6e63e4154a; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebb6e63e4154a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xebb6e63e4154a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feebb6e63e4154a; op2val:0x3feebb6e63e4154a; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebb6e63e4154a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xebb6e63e4154a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feebb6e63e4154a; op2val:0x3feebb6e63e4154a; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebb6e63e4154a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xebb6e63e4154a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feebb6e63e4154a; op2val:0x3feebb6e63e4154a; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xebb6e63e4154a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xebb6e63e4154a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feebb6e63e4154a; op2val:0x3feebb6e63e4154a; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_771:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccbbdf72b6713 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbbdf72b6713 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccbbdf72b6713; op2val:0x3feccbbdf72b6713; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_772:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccbbdf72b6713 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbbdf72b6713 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccbbdf72b6713; op2val:0x3feccbbdf72b6713; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_773:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccbbdf72b6713 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbbdf72b6713 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccbbdf72b6713; op2val:0x3feccbbdf72b6713; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_774:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccbbdf72b6713 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbbdf72b6713 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccbbdf72b6713; op2val:0x3feccbbdf72b6713; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_775:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccbbdf72b6713 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xccbbdf72b6713 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccbbdf72b6713; op2val:0x3feccbbdf72b6713; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e4106d274f76 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e4106d274f76 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7e4106d274f76; op2val:0x3fe7e4106d274f76; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e4106d274f76 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e4106d274f76 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7e4106d274f76; op2val:0x3fe7e4106d274f76; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e4106d274f76 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e4106d274f76 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7e4106d274f76; op2val:0x3fe7e4106d274f76; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e4106d274f76 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e4106d274f76 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7e4106d274f76; op2val:0x3fe7e4106d274f76; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7e4106d274f76 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7e4106d274f76 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7e4106d274f76; op2val:0x3fe7e4106d274f76; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_781:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x73d2de5d01370 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x73d2de5d01370 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb73d2de5d01370; op2val:0x3fb73d2de5d01370; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_782:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x73d2de5d01370 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x73d2de5d01370 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb73d2de5d01370; op2val:0x3fb73d2de5d01370; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_783:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x73d2de5d01370 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x73d2de5d01370 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb73d2de5d01370; op2val:0x3fb73d2de5d01370; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_784:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x73d2de5d01370 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x73d2de5d01370 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb73d2de5d01370; op2val:0x3fb73d2de5d01370; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_785:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x73d2de5d01370 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x73d2de5d01370 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb73d2de5d01370; op2val:0x3fb73d2de5d01370; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_786:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e52710c6282e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e52710c6282e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e52710c6282e; op2val:0x3fe3e52710c6282e; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_787:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e52710c6282e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e52710c6282e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e52710c6282e; op2val:0x3fe3e52710c6282e; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_788:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e52710c6282e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e52710c6282e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e52710c6282e; op2val:0x3fe3e52710c6282e; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_789:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e52710c6282e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e52710c6282e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e52710c6282e; op2val:0x3fe3e52710c6282e; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_790:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e52710c6282e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e52710c6282e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e52710c6282e; op2val:0x3fe3e52710c6282e; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcb5952a427468 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcb5952a427468 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecb5952a427468; op2val:0x3fecb5952a427468; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcb5952a427468 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcb5952a427468 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecb5952a427468; op2val:0x3fecb5952a427468; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcb5952a427468 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcb5952a427468 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecb5952a427468; op2val:0x3fecb5952a427468; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcb5952a427468 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcb5952a427468 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecb5952a427468; op2val:0x3fecb5952a427468; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcb5952a427468 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcb5952a427468 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecb5952a427468; op2val:0x3fecb5952a427468; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_796:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84648f75d3d96 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84648f75d3d96 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe84648f75d3d96; op2val:0x3fe84648f75d3d96; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_797:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84648f75d3d96 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84648f75d3d96 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe84648f75d3d96; op2val:0x3fe84648f75d3d96; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_798:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84648f75d3d96 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84648f75d3d96 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe84648f75d3d96; op2val:0x3fe84648f75d3d96; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_799:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84648f75d3d96 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84648f75d3d96 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe84648f75d3d96; op2val:0x3fe84648f75d3d96; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_800:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x84648f75d3d96 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x84648f75d3d96 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe84648f75d3d96; op2val:0x3fe84648f75d3d96; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_801:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4d58ee324503 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc4d58ee324503 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec4d58ee324503; op2val:0x3fec4d58ee324503; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_802:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4d58ee324503 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc4d58ee324503 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec4d58ee324503; op2val:0x3fec4d58ee324503; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_803:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4d58ee324503 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc4d58ee324503 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec4d58ee324503; op2val:0x3fec4d58ee324503; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_804:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4d58ee324503 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc4d58ee324503 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec4d58ee324503; op2val:0x3fec4d58ee324503; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_805:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc4d58ee324503 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc4d58ee324503 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec4d58ee324503; op2val:0x3fec4d58ee324503; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_806:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x8405b69c7f140 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0x8405b69c7f140 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f88405b69c7f140; op2val:0x3f88405b69c7f140; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_807:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x8405b69c7f140 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0x8405b69c7f140 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f88405b69c7f140; op2val:0x3f88405b69c7f140; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_808:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x8405b69c7f140 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0x8405b69c7f140 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f88405b69c7f140; op2val:0x3f88405b69c7f140; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_809:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x8405b69c7f140 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0x8405b69c7f140 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f88405b69c7f140; op2val:0x3f88405b69c7f140; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_810:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x8405b69c7f140 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0x8405b69c7f140 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f88405b69c7f140; op2val:0x3f88405b69c7f140; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb8208f3f915a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb8208f3f915a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb8208f3f915a; op2val:0x3feeb8208f3f915a; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb8208f3f915a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb8208f3f915a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb8208f3f915a; op2val:0x3feeb8208f3f915a; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb8208f3f915a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb8208f3f915a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb8208f3f915a; op2val:0x3feeb8208f3f915a; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb8208f3f915a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb8208f3f915a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb8208f3f915a; op2val:0x3feeb8208f3f915a; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeb8208f3f915a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xeb8208f3f915a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeb8208f3f915a; op2val:0x3feeb8208f3f915a; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc511490b20d9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc511490b20d9b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec511490b20d9b; op2val:0x3fec511490b20d9b; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc511490b20d9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc511490b20d9b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec511490b20d9b; op2val:0x3fec511490b20d9b; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc511490b20d9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc511490b20d9b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec511490b20d9b; op2val:0x3fec511490b20d9b; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc511490b20d9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc511490b20d9b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec511490b20d9b; op2val:0x3fec511490b20d9b; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc511490b20d9b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc511490b20d9b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec511490b20d9b; op2val:0x3fec511490b20d9b; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_821:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x517f9c7e23494 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x517f9c7e23494 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd517f9c7e23494; op2val:0x3fd517f9c7e23494; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_822:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x517f9c7e23494 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x517f9c7e23494 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd517f9c7e23494; op2val:0x3fd517f9c7e23494; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_823:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x517f9c7e23494 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x517f9c7e23494 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd517f9c7e23494; op2val:0x3fd517f9c7e23494; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_824:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x517f9c7e23494 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x517f9c7e23494 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd517f9c7e23494; op2val:0x3fd517f9c7e23494; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_825:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x517f9c7e23494 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x517f9c7e23494 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd517f9c7e23494; op2val:0x3fd517f9c7e23494; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_826:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x60bb16b44a84c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60bb16b44a84c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc60bb16b44a84c; op2val:0x3fc60bb16b44a84c; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_827:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x60bb16b44a84c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60bb16b44a84c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc60bb16b44a84c; op2val:0x3fc60bb16b44a84c; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_828:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x60bb16b44a84c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60bb16b44a84c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc60bb16b44a84c; op2val:0x3fc60bb16b44a84c; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_829:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x60bb16b44a84c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60bb16b44a84c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc60bb16b44a84c; op2val:0x3fc60bb16b44a84c; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_830:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x60bb16b44a84c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x60bb16b44a84c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc60bb16b44a84c; op2val:0x3fc60bb16b44a84c; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x721519b91af0d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x721519b91af0d and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe721519b91af0d; op2val:0x3fe721519b91af0d; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x721519b91af0d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x721519b91af0d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe721519b91af0d; op2val:0x3fe721519b91af0d; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x721519b91af0d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x721519b91af0d and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe721519b91af0d; op2val:0x3fe721519b91af0d; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x721519b91af0d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x721519b91af0d and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe721519b91af0d; op2val:0x3fe721519b91af0d; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x721519b91af0d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x721519b91af0d and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe721519b91af0d; op2val:0x3fe721519b91af0d; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_836:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x32ecbbc5785c8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x32ecbbc5785c8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb32ecbbc5785c8; op2val:0x3fb32ecbbc5785c8; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_837:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x32ecbbc5785c8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x32ecbbc5785c8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb32ecbbc5785c8; op2val:0x3fb32ecbbc5785c8; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_838:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x32ecbbc5785c8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x32ecbbc5785c8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb32ecbbc5785c8; op2val:0x3fb32ecbbc5785c8; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_839:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x32ecbbc5785c8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x32ecbbc5785c8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb32ecbbc5785c8; op2val:0x3fb32ecbbc5785c8; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_840:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x32ecbbc5785c8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x32ecbbc5785c8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb32ecbbc5785c8; op2val:0x3fb32ecbbc5785c8; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_841:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbf69eb68ad548 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbf69eb68ad548 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbbf69eb68ad548; op2val:0x3fbbf69eb68ad548; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_842:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbf69eb68ad548 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbf69eb68ad548 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbbf69eb68ad548; op2val:0x3fbbf69eb68ad548; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_843:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbf69eb68ad548 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbf69eb68ad548 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbbf69eb68ad548; op2val:0x3fbbf69eb68ad548; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_844:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbf69eb68ad548 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbf69eb68ad548 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbbf69eb68ad548; op2val:0x3fbbf69eb68ad548; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_845:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xbf69eb68ad548 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xbf69eb68ad548 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbbf69eb68ad548; op2val:0x3fbbf69eb68ad548; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_846:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd625bf430e65e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd625bf430e65e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed625bf430e65e; op2val:0x3fed625bf430e65e; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_847:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd625bf430e65e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd625bf430e65e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed625bf430e65e; op2val:0x3fed625bf430e65e; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_848:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd625bf430e65e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd625bf430e65e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed625bf430e65e; op2val:0x3fed625bf430e65e; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_849:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd625bf430e65e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd625bf430e65e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed625bf430e65e; op2val:0x3fed625bf430e65e; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_850:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd625bf430e65e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd625bf430e65e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed625bf430e65e; op2val:0x3fed625bf430e65e; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_851:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7850c399098e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7850c399098e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7850c399098e; op2val:0x3fdb7850c399098e; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_852:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7850c399098e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7850c399098e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7850c399098e; op2val:0x3fdb7850c399098e; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_853:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7850c399098e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7850c399098e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7850c399098e; op2val:0x3fdb7850c399098e; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_854:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7850c399098e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7850c399098e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7850c399098e; op2val:0x3fdb7850c399098e; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_855:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb7850c399098e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb7850c399098e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb7850c399098e; op2val:0x3fdb7850c399098e; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_856:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea95312e6d28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbea95312e6d28 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbea95312e6d28; op2val:0x3fcbea95312e6d28; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_857:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea95312e6d28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbea95312e6d28 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbea95312e6d28; op2val:0x3fcbea95312e6d28; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_858:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea95312e6d28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbea95312e6d28 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbea95312e6d28; op2val:0x3fcbea95312e6d28; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_859:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea95312e6d28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbea95312e6d28 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbea95312e6d28; op2val:0x3fcbea95312e6d28; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_860:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbea95312e6d28 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbea95312e6d28 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbea95312e6d28; op2val:0x3fcbea95312e6d28; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_861:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5175e338a8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5175e338a8ee0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5175e338a8ee0; op2val:0x3fe5175e338a8ee0; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_862:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5175e338a8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5175e338a8ee0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5175e338a8ee0; op2val:0x3fe5175e338a8ee0; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_863:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5175e338a8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5175e338a8ee0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5175e338a8ee0; op2val:0x3fe5175e338a8ee0; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_864:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5175e338a8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5175e338a8ee0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5175e338a8ee0; op2val:0x3fe5175e338a8ee0; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_865:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5175e338a8ee0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5175e338a8ee0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5175e338a8ee0; op2val:0x3fe5175e338a8ee0; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_866:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb1f000da48b00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb1f000da48b00 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb1f000da48b00; op2val:0x3fcb1f000da48b00; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_867:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb1f000da48b00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb1f000da48b00 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb1f000da48b00; op2val:0x3fcb1f000da48b00; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_868:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb1f000da48b00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb1f000da48b00 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb1f000da48b00; op2val:0x3fcb1f000da48b00; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_869:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb1f000da48b00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb1f000da48b00 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb1f000da48b00; op2val:0x3fcb1f000da48b00; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_870:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb1f000da48b00 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xb1f000da48b00 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb1f000da48b00; op2val:0x3fcb1f000da48b00; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_871:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda866467aa4ed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xda866467aa4ed and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda866467aa4ed; op2val:0x3feda866467aa4ed; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_872:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda866467aa4ed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xda866467aa4ed and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda866467aa4ed; op2val:0x3feda866467aa4ed; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_873:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda866467aa4ed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xda866467aa4ed and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda866467aa4ed; op2val:0x3feda866467aa4ed; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_874:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda866467aa4ed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xda866467aa4ed and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda866467aa4ed; op2val:0x3feda866467aa4ed; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_875:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda866467aa4ed and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xda866467aa4ed and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda866467aa4ed; op2val:0x3feda866467aa4ed; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_876:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca9c77ab7939e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca9c77ab7939e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca9c77ab7939e; op2val:0x3feca9c77ab7939e; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_877:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca9c77ab7939e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca9c77ab7939e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca9c77ab7939e; op2val:0x3feca9c77ab7939e; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_878:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca9c77ab7939e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca9c77ab7939e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca9c77ab7939e; op2val:0x3feca9c77ab7939e; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_879:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca9c77ab7939e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca9c77ab7939e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca9c77ab7939e; op2val:0x3feca9c77ab7939e; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_880:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca9c77ab7939e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca9c77ab7939e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca9c77ab7939e; op2val:0x3feca9c77ab7939e; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_881:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbab3ee9ae1fbd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbab3ee9ae1fbd and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febab3ee9ae1fbd; op2val:0x3febab3ee9ae1fbd; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_882:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbab3ee9ae1fbd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbab3ee9ae1fbd and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febab3ee9ae1fbd; op2val:0x3febab3ee9ae1fbd; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_883:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbab3ee9ae1fbd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbab3ee9ae1fbd and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febab3ee9ae1fbd; op2val:0x3febab3ee9ae1fbd; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_884:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbab3ee9ae1fbd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbab3ee9ae1fbd and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febab3ee9ae1fbd; op2val:0x3febab3ee9ae1fbd; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_885:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbab3ee9ae1fbd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbab3ee9ae1fbd and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febab3ee9ae1fbd; op2val:0x3febab3ee9ae1fbd; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_886:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x76503523ba900 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x76503523ba900 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa76503523ba900; op2val:0x3fa76503523ba900; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_887:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x76503523ba900 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x76503523ba900 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa76503523ba900; op2val:0x3fa76503523ba900; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_888:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x76503523ba900 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x76503523ba900 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa76503523ba900; op2val:0x3fa76503523ba900; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_8)

inst_889:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x76503523ba900 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x76503523ba900 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa76503523ba900; op2val:0x3fa76503523ba900; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_890:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x76503523ba900 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x76503523ba900 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa76503523ba900; op2val:0x3fa76503523ba900; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_891:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f86320e5659c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0f86320e5659c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f86320e5659c; op2val:0x3fc0f86320e5659c; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_892:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f86320e5659c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0f86320e5659c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f86320e5659c; op2val:0x3fc0f86320e5659c; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_893:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f86320e5659c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0f86320e5659c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f86320e5659c; op2val:0x3fc0f86320e5659c; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_894:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f86320e5659c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0f86320e5659c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f86320e5659c; op2val:0x3fc0f86320e5659c; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_895:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0f86320e5659c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0f86320e5659c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0f86320e5659c; op2val:0x3fc0f86320e5659c; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51c62238b5a6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c62238b5a6a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51c62238b5a6a; op2val:0x3fe51c62238b5a6a; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51c62238b5a6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c62238b5a6a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51c62238b5a6a; op2val:0x3fe51c62238b5a6a; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51c62238b5a6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c62238b5a6a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51c62238b5a6a; op2val:0x3fe51c62238b5a6a; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51c62238b5a6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c62238b5a6a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51c62238b5a6a; op2val:0x3fe51c62238b5a6a; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x51c62238b5a6a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x51c62238b5a6a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe51c62238b5a6a; op2val:0x3fe51c62238b5a6a; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_901:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x455c7bbea53c0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x455c7bbea53c0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc455c7bbea53c0; op2val:0x3fc455c7bbea53c0; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_902:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x455c7bbea53c0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x455c7bbea53c0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc455c7bbea53c0; op2val:0x3fc455c7bbea53c0; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_903:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x455c7bbea53c0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x455c7bbea53c0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc455c7bbea53c0; op2val:0x3fc455c7bbea53c0; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_904:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x455c7bbea53c0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x455c7bbea53c0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc455c7bbea53c0; op2val:0x3fc455c7bbea53c0; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_905:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x455c7bbea53c0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x455c7bbea53c0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc455c7bbea53c0; op2val:0x3fc455c7bbea53c0; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_906:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed547eaaf2bf4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xed547eaaf2bf4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fced547eaaf2bf4; op2val:0x3fced547eaaf2bf4; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_907:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed547eaaf2bf4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xed547eaaf2bf4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fced547eaaf2bf4; op2val:0x3fced547eaaf2bf4; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_908:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed547eaaf2bf4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xed547eaaf2bf4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fced547eaaf2bf4; op2val:0x3fced547eaaf2bf4; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_909:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed547eaaf2bf4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xed547eaaf2bf4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fced547eaaf2bf4; op2val:0x3fced547eaaf2bf4; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_910:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xed547eaaf2bf4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xed547eaaf2bf4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fced547eaaf2bf4; op2val:0x3fced547eaaf2bf4; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_911:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6c9812ec6fe78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c9812ec6fe78 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6c9812ec6fe78; op2val:0x3fb6c9812ec6fe78; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_912:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6c9812ec6fe78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c9812ec6fe78 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6c9812ec6fe78; op2val:0x3fb6c9812ec6fe78; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_913:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6c9812ec6fe78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c9812ec6fe78 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6c9812ec6fe78; op2val:0x3fb6c9812ec6fe78; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_914:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6c9812ec6fe78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c9812ec6fe78 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6c9812ec6fe78; op2val:0x3fb6c9812ec6fe78; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_915:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6c9812ec6fe78 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x6c9812ec6fe78 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6c9812ec6fe78; op2val:0x3fb6c9812ec6fe78; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4a4caf77ca64 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd4a4caf77ca64 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed4a4caf77ca64; op2val:0x3fed4a4caf77ca64; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4a4caf77ca64 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd4a4caf77ca64 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed4a4caf77ca64; op2val:0x3fed4a4caf77ca64; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4a4caf77ca64 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd4a4caf77ca64 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed4a4caf77ca64; op2val:0x3fed4a4caf77ca64; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4a4caf77ca64 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd4a4caf77ca64 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed4a4caf77ca64; op2val:0x3fed4a4caf77ca64; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd4a4caf77ca64 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xd4a4caf77ca64 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed4a4caf77ca64; op2val:0x3fed4a4caf77ca64; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87dd357bd1c08 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87dd357bd1c08 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe87dd357bd1c08; op2val:0x3fe87dd357bd1c08; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87dd357bd1c08 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87dd357bd1c08 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe87dd357bd1c08; op2val:0x3fe87dd357bd1c08; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87dd357bd1c08 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87dd357bd1c08 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe87dd357bd1c08; op2val:0x3fe87dd357bd1c08; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87dd357bd1c08 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87dd357bd1c08 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe87dd357bd1c08; op2val:0x3fe87dd357bd1c08; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x87dd357bd1c08 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x87dd357bd1c08 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe87dd357bd1c08; op2val:0x3fe87dd357bd1c08; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07efc88ed9e35 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x07efc88ed9e35 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07efc88ed9e35; op2val:0x3fe07efc88ed9e35; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07efc88ed9e35 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x07efc88ed9e35 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07efc88ed9e35; op2val:0x3fe07efc88ed9e35; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07efc88ed9e35 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x07efc88ed9e35 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07efc88ed9e35; op2val:0x3fe07efc88ed9e35; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07efc88ed9e35 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x07efc88ed9e35 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07efc88ed9e35; op2val:0x3fe07efc88ed9e35; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07efc88ed9e35 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x07efc88ed9e35 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07efc88ed9e35; op2val:0x3fe07efc88ed9e35; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_931:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe1b7aa5319f00 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe1b7aa5319f00 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe1b7aa5319f00; op2val:0x3fbe1b7aa5319f00; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_932:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe1b7aa5319f00 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe1b7aa5319f00 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe1b7aa5319f00; op2val:0x3fbe1b7aa5319f00; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_933:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe1b7aa5319f00 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe1b7aa5319f00 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe1b7aa5319f00; op2val:0x3fbe1b7aa5319f00; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_934:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe1b7aa5319f00 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe1b7aa5319f00 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe1b7aa5319f00; op2val:0x3fbe1b7aa5319f00; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_935:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe1b7aa5319f00 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe1b7aa5319f00 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe1b7aa5319f00; op2val:0x3fbe1b7aa5319f00; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_936:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x15c296e79d7f8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x15c296e79d7f8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb15c296e79d7f8; op2val:0x3fb15c296e79d7f8; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_937:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x15c296e79d7f8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x15c296e79d7f8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb15c296e79d7f8; op2val:0x3fb15c296e79d7f8; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_938:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x15c296e79d7f8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x15c296e79d7f8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb15c296e79d7f8; op2val:0x3fb15c296e79d7f8; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_939:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x15c296e79d7f8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x15c296e79d7f8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb15c296e79d7f8; op2val:0x3fb15c296e79d7f8; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_940:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x15c296e79d7f8 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x15c296e79d7f8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb15c296e79d7f8; op2val:0x3fb15c296e79d7f8; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_941:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5ba673a8ff8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4d5ba673a8ff8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5ba673a8ff8; op2val:0x3fd4d5ba673a8ff8; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_942:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5ba673a8ff8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4d5ba673a8ff8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5ba673a8ff8; op2val:0x3fd4d5ba673a8ff8; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_943:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5ba673a8ff8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4d5ba673a8ff8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5ba673a8ff8; op2val:0x3fd4d5ba673a8ff8; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_944:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5ba673a8ff8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4d5ba673a8ff8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5ba673a8ff8; op2val:0x3fd4d5ba673a8ff8; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_945:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5ba673a8ff8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4d5ba673a8ff8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5ba673a8ff8; op2val:0x3fd4d5ba673a8ff8; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_946:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52620e2487534 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52620e2487534 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52620e2487534; op2val:0x3fe52620e2487534; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_947:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52620e2487534 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52620e2487534 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52620e2487534; op2val:0x3fe52620e2487534; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_948:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52620e2487534 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52620e2487534 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52620e2487534; op2val:0x3fe52620e2487534; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_949:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52620e2487534 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52620e2487534 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52620e2487534; op2val:0x3fe52620e2487534; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_950:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52620e2487534 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x52620e2487534 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52620e2487534; op2val:0x3fe52620e2487534; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_951:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa85ad6fc8ea40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa85ad6fc8ea40 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a85ad6fc8ea40; op2val:0x3f8a85ad6fc8ea40; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_952:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa85ad6fc8ea40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa85ad6fc8ea40 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a85ad6fc8ea40; op2val:0x3f8a85ad6fc8ea40; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_953:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa85ad6fc8ea40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa85ad6fc8ea40 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a85ad6fc8ea40; op2val:0x3f8a85ad6fc8ea40; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_954:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa85ad6fc8ea40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa85ad6fc8ea40 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a85ad6fc8ea40; op2val:0x3f8a85ad6fc8ea40; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_955:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0xa85ad6fc8ea40 and fs2 == 0 and fe2 == 0x3f8 and fm2 == 0xa85ad6fc8ea40 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f8a85ad6fc8ea40; op2val:0x3f8a85ad6fc8ea40; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9929cb491e1e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9929cb491e1e4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9929cb491e1e4; op2val:0x3fe9929cb491e1e4; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9929cb491e1e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9929cb491e1e4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9929cb491e1e4; op2val:0x3fe9929cb491e1e4; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9929cb491e1e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9929cb491e1e4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9929cb491e1e4; op2val:0x3fe9929cb491e1e4; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9929cb491e1e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9929cb491e1e4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9929cb491e1e4; op2val:0x3fe9929cb491e1e4; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9929cb491e1e4 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9929cb491e1e4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9929cb491e1e4; op2val:0x3fe9929cb491e1e4; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_961:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9aeaf56ff2ab0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x9aeaf56ff2ab0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9aeaf56ff2ab0; op2val:0x3fb9aeaf56ff2ab0; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_962:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9aeaf56ff2ab0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x9aeaf56ff2ab0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9aeaf56ff2ab0; op2val:0x3fb9aeaf56ff2ab0; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_963:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9aeaf56ff2ab0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x9aeaf56ff2ab0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9aeaf56ff2ab0; op2val:0x3fb9aeaf56ff2ab0; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_964:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9aeaf56ff2ab0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x9aeaf56ff2ab0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9aeaf56ff2ab0; op2val:0x3fb9aeaf56ff2ab0; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_965:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9aeaf56ff2ab0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x9aeaf56ff2ab0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9aeaf56ff2ab0; op2val:0x3fb9aeaf56ff2ab0; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_966:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x596c4b58d2e3a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x596c4b58d2e3a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe596c4b58d2e3a; op2val:0x3fe596c4b58d2e3a; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_967:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x596c4b58d2e3a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x596c4b58d2e3a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe596c4b58d2e3a; op2val:0x3fe596c4b58d2e3a; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_968:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x596c4b58d2e3a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x596c4b58d2e3a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe596c4b58d2e3a; op2val:0x3fe596c4b58d2e3a; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_969:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x596c4b58d2e3a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x596c4b58d2e3a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe596c4b58d2e3a; op2val:0x3fe596c4b58d2e3a; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_970:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x596c4b58d2e3a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x596c4b58d2e3a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe596c4b58d2e3a; op2val:0x3fe596c4b58d2e3a; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_971:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6869299fbcb48 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6869299fbcb48 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6869299fbcb48; op2val:0x3fe6869299fbcb48; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_972:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6869299fbcb48 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6869299fbcb48 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6869299fbcb48; op2val:0x3fe6869299fbcb48; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_973:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6869299fbcb48 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6869299fbcb48 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6869299fbcb48; op2val:0x3fe6869299fbcb48; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_974:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6869299fbcb48 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6869299fbcb48 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6869299fbcb48; op2val:0x3fe6869299fbcb48; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_975:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6869299fbcb48 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6869299fbcb48 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6869299fbcb48; op2val:0x3fe6869299fbcb48; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_976:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca88e883f8904 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca88e883f8904 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca88e883f8904; op2val:0x3feca88e883f8904; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_977:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca88e883f8904 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca88e883f8904 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca88e883f8904; op2val:0x3feca88e883f8904; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_978:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca88e883f8904 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca88e883f8904 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca88e883f8904; op2val:0x3feca88e883f8904; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_979:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca88e883f8904 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca88e883f8904 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca88e883f8904; op2val:0x3feca88e883f8904; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_980:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca88e883f8904 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xca88e883f8904 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca88e883f8904; op2val:0x3feca88e883f8904; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22545c9a26599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x22545c9a26599 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22545c9a26599; op2val:0x3fe22545c9a26599; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22545c9a26599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x22545c9a26599 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22545c9a26599; op2val:0x3fe22545c9a26599; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22545c9a26599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x22545c9a26599 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22545c9a26599; op2val:0x3fe22545c9a26599; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22545c9a26599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x22545c9a26599 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22545c9a26599; op2val:0x3fe22545c9a26599; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x22545c9a26599 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x22545c9a26599 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe22545c9a26599; op2val:0x3fe22545c9a26599; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x96a6651b4db2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x96a6651b4db2b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe96a6651b4db2b; op2val:0x3fe96a6651b4db2b; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x96a6651b4db2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x96a6651b4db2b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe96a6651b4db2b; op2val:0x3fe96a6651b4db2b; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x96a6651b4db2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x96a6651b4db2b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe96a6651b4db2b; op2val:0x3fe96a6651b4db2b; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x96a6651b4db2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x96a6651b4db2b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe96a6651b4db2b; op2val:0x3fe96a6651b4db2b; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x96a6651b4db2b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x96a6651b4db2b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe96a6651b4db2b; op2val:0x3fe96a6651b4db2b; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_991:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e7ade732c864 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e7ade732c864 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e7ade732c864; op2val:0x3fe3e7ade732c864; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_992:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e7ade732c864 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e7ade732c864 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e7ade732c864; op2val:0x3fe3e7ade732c864; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_993:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e7ade732c864 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e7ade732c864 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e7ade732c864; op2val:0x3fe3e7ade732c864; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_994:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e7ade732c864 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e7ade732c864 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e7ade732c864; op2val:0x3fe3e7ade732c864; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_995:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3e7ade732c864 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3e7ade732c864 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3e7ade732c864; op2val:0x3fe3e7ade732c864; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_996:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2f148eb042c14 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2f148eb042c14 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2f148eb042c14; op2val:0x3fd2f148eb042c14; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_997:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2f148eb042c14 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2f148eb042c14 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2f148eb042c14; op2val:0x3fd2f148eb042c14; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_998:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2f148eb042c14 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2f148eb042c14 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2f148eb042c14; op2val:0x3fd2f148eb042c14; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_999:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2f148eb042c14 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2f148eb042c14 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2f148eb042c14; op2val:0x3fd2f148eb042c14; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_1000:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2f148eb042c14 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2f148eb042c14 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2f148eb042c14; op2val:0x3fd2f148eb042c14; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_1001:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ec8cd214f1fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0ec8cd214f1fc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ec8cd214f1fc; op2val:0x3fc0ec8cd214f1fc; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_1002:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ec8cd214f1fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0ec8cd214f1fc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ec8cd214f1fc; op2val:0x3fc0ec8cd214f1fc; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_1003:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ec8cd214f1fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0ec8cd214f1fc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ec8cd214f1fc; op2val:0x3fc0ec8cd214f1fc; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_1004:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ec8cd214f1fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0ec8cd214f1fc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ec8cd214f1fc; op2val:0x3fc0ec8cd214f1fc; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_1005:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ec8cd214f1fc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x0ec8cd214f1fc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ec8cd214f1fc; op2val:0x3fc0ec8cd214f1fc; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_1006:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb8085ec502c92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8085ec502c92 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb8085ec502c92; op2val:0x3fdb8085ec502c92; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_1007:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb8085ec502c92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8085ec502c92 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb8085ec502c92; op2val:0x3fdb8085ec502c92; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_1008:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb8085ec502c92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8085ec502c92 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb8085ec502c92; op2val:0x3fdb8085ec502c92; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_1009:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb8085ec502c92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8085ec502c92 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb8085ec502c92; op2val:0x3fdb8085ec502c92; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_1010:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb8085ec502c92 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb8085ec502c92 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb8085ec502c92; op2val:0x3fdb8085ec502c92; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_1011:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71d703c84c000 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71d703c84c000 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc71d703c84c000; op2val:0x3fc71d703c84c000; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_1012:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71d703c84c000 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71d703c84c000 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc71d703c84c000; op2val:0x3fc71d703c84c000; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_1013:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71d703c84c000 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71d703c84c000 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc71d703c84c000; op2val:0x3fc71d703c84c000; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_1014:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71d703c84c000 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71d703c84c000 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc71d703c84c000; op2val:0x3fc71d703c84c000; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_1015:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x71d703c84c000 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x71d703c84c000 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc71d703c84c000; op2val:0x3fc71d703c84c000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_9)

inst_1016:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf0c5804c87c50 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf0c5804c87c50 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf0c5804c87c50; op2val:0x3fbf0c5804c87c50; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf0c5804c87c50 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf0c5804c87c50 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf0c5804c87c50; op2val:0x3fbf0c5804c87c50; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_1018:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf0c5804c87c50 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf0c5804c87c50 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf0c5804c87c50; op2val:0x3fbf0c5804c87c50; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_1019:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf0c5804c87c50 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf0c5804c87c50 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf0c5804c87c50; op2val:0x3fbf0c5804c87c50; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_1020:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xf0c5804c87c50 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xf0c5804c87c50 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbf0c5804c87c50; op2val:0x3fbf0c5804c87c50; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecaeb37a7ac0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7ecaeb37a7ac0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7ecaeb37a7ac0; op2val:0x3fe7ecaeb37a7ac0; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecaeb37a7ac0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7ecaeb37a7ac0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7ecaeb37a7ac0; op2val:0x3fe7ecaeb37a7ac0; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecaeb37a7ac0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7ecaeb37a7ac0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7ecaeb37a7ac0; op2val:0x3fe7ecaeb37a7ac0; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecaeb37a7ac0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7ecaeb37a7ac0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7ecaeb37a7ac0; op2val:0x3fe7ecaeb37a7ac0; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7ecaeb37a7ac0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7ecaeb37a7ac0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7ecaeb37a7ac0; op2val:0x3fe7ecaeb37a7ac0; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_1026:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x064e406bbfdc4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x064e406bbfdc4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd064e406bbfdc4; op2val:0x3fd064e406bbfdc4; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_1027:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x064e406bbfdc4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x064e406bbfdc4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd064e406bbfdc4; op2val:0x3fd064e406bbfdc4; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_1028:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x064e406bbfdc4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x064e406bbfdc4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd064e406bbfdc4; op2val:0x3fd064e406bbfdc4; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_1029:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x064e406bbfdc4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x064e406bbfdc4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd064e406bbfdc4; op2val:0x3fd064e406bbfdc4; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_1030:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x064e406bbfdc4 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x064e406bbfdc4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd064e406bbfdc4; op2val:0x3fd064e406bbfdc4; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_1031:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x611804c54cfbc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x611804c54cfbc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe611804c54cfbc; op2val:0x3fe611804c54cfbc; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_1032:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x611804c54cfbc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x611804c54cfbc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe611804c54cfbc; op2val:0x3fe611804c54cfbc; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_1033:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x611804c54cfbc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x611804c54cfbc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe611804c54cfbc; op2val:0x3fe611804c54cfbc; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_1034:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x611804c54cfbc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x611804c54cfbc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe611804c54cfbc; op2val:0x3fe611804c54cfbc; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_1035:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x611804c54cfbc and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x611804c54cfbc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe611804c54cfbc; op2val:0x3fe611804c54cfbc; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63214afb79360 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63214afb79360 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63214afb79360; op2val:0x3fe63214afb79360; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63214afb79360 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63214afb79360 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63214afb79360; op2val:0x3fe63214afb79360; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63214afb79360 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63214afb79360 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63214afb79360; op2val:0x3fe63214afb79360; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63214afb79360 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63214afb79360 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63214afb79360; op2val:0x3fe63214afb79360; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x63214afb79360 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x63214afb79360 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe63214afb79360; op2val:0x3fe63214afb79360; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_1041:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x06efa326c6f40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x06efa326c6f40 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa06efa326c6f40; op2val:0x3fa06efa326c6f40; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_1042:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x06efa326c6f40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x06efa326c6f40 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa06efa326c6f40; op2val:0x3fa06efa326c6f40; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_1043:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x06efa326c6f40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x06efa326c6f40 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa06efa326c6f40; op2val:0x3fa06efa326c6f40; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_1044:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x06efa326c6f40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x06efa326c6f40 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa06efa326c6f40; op2val:0x3fa06efa326c6f40; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_1045:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x06efa326c6f40 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x06efa326c6f40 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa06efa326c6f40; op2val:0x3fa06efa326c6f40; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1e6ead0cd995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1e6ead0cd995 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee1e6ead0cd995; op2val:0x3fee1e6ead0cd995; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1e6ead0cd995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1e6ead0cd995 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee1e6ead0cd995; op2val:0x3fee1e6ead0cd995; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1e6ead0cd995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1e6ead0cd995 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee1e6ead0cd995; op2val:0x3fee1e6ead0cd995; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1e6ead0cd995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1e6ead0cd995 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee1e6ead0cd995; op2val:0x3fee1e6ead0cd995; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe1e6ead0cd995 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe1e6ead0cd995 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee1e6ead0cd995; op2val:0x3fee1e6ead0cd995; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_1051:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b85ab55c5721 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b85ab55c5721 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b85ab55c5721; op2val:0x3fe5b85ab55c5721; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_1052:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b85ab55c5721 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b85ab55c5721 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b85ab55c5721; op2val:0x3fe5b85ab55c5721; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_1053:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b85ab55c5721 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b85ab55c5721 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b85ab55c5721; op2val:0x3fe5b85ab55c5721; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_1054:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b85ab55c5721 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b85ab55c5721 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b85ab55c5721; op2val:0x3fe5b85ab55c5721; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_1055:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b85ab55c5721 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b85ab55c5721 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b85ab55c5721; op2val:0x3fe5b85ab55c5721; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_1056:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35cfed94ce657 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x35cfed94ce657 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35cfed94ce657; op2val:0x3fe35cfed94ce657; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_1057:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35cfed94ce657 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x35cfed94ce657 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35cfed94ce657; op2val:0x3fe35cfed94ce657; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_1058:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35cfed94ce657 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x35cfed94ce657 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35cfed94ce657; op2val:0x3fe35cfed94ce657; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_1059:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35cfed94ce657 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x35cfed94ce657 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35cfed94ce657; op2val:0x3fe35cfed94ce657; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_1060:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35cfed94ce657 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x35cfed94ce657 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35cfed94ce657; op2val:0x3fe35cfed94ce657; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8db9485e787f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8db9485e787f5 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8db9485e787f5; op2val:0x3fe8db9485e787f5; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8db9485e787f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8db9485e787f5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8db9485e787f5; op2val:0x3fe8db9485e787f5; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8db9485e787f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8db9485e787f5 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8db9485e787f5; op2val:0x3fe8db9485e787f5; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8db9485e787f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8db9485e787f5 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8db9485e787f5; op2val:0x3fe8db9485e787f5; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8db9485e787f5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8db9485e787f5 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8db9485e787f5; op2val:0x3fe8db9485e787f5; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_1066:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e15574e11254 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9e15574e11254 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9e15574e11254; op2val:0x3fc9e15574e11254; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_1067:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e15574e11254 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9e15574e11254 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9e15574e11254; op2val:0x3fc9e15574e11254; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_1068:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e15574e11254 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9e15574e11254 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9e15574e11254; op2val:0x3fc9e15574e11254; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_1069:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e15574e11254 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9e15574e11254 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9e15574e11254; op2val:0x3fc9e15574e11254; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_1070:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9e15574e11254 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9e15574e11254 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9e15574e11254; op2val:0x3fc9e15574e11254; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_1071:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f0d8cc179391 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8f0d8cc179391 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8f0d8cc179391; op2val:0x3fe8f0d8cc179391; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_1072:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f0d8cc179391 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8f0d8cc179391 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8f0d8cc179391; op2val:0x3fe8f0d8cc179391; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_1073:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f0d8cc179391 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8f0d8cc179391 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8f0d8cc179391; op2val:0x3fe8f0d8cc179391; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_1074:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f0d8cc179391 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8f0d8cc179391 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8f0d8cc179391; op2val:0x3fe8f0d8cc179391; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_1075:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8f0d8cc179391 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8f0d8cc179391 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8f0d8cc179391; op2val:0x3fe8f0d8cc179391; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_1076:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x498c48c9630a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x498c48c9630a6 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd498c48c9630a6; op2val:0x3fd498c48c9630a6; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_1077:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x498c48c9630a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x498c48c9630a6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd498c48c9630a6; op2val:0x3fd498c48c9630a6; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_1078:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x498c48c9630a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x498c48c9630a6 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd498c48c9630a6; op2val:0x3fd498c48c9630a6; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_1079:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x498c48c9630a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x498c48c9630a6 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd498c48c9630a6; op2val:0x3fd498c48c9630a6; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_1080:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x498c48c9630a6 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x498c48c9630a6 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd498c48c9630a6; op2val:0x3fd498c48c9630a6; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xadf6a6237a2ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xadf6a6237a2ad and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feadf6a6237a2ad; op2val:0x3feadf6a6237a2ad; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xadf6a6237a2ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xadf6a6237a2ad and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feadf6a6237a2ad; op2val:0x3feadf6a6237a2ad; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xadf6a6237a2ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xadf6a6237a2ad and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feadf6a6237a2ad; op2val:0x3feadf6a6237a2ad; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xadf6a6237a2ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xadf6a6237a2ad and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feadf6a6237a2ad; op2val:0x3feadf6a6237a2ad; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xadf6a6237a2ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xadf6a6237a2ad and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feadf6a6237a2ad; op2val:0x3feadf6a6237a2ad; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb502f77dbd37e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb502f77dbd37e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb502f77dbd37e; op2val:0x3feb502f77dbd37e; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb502f77dbd37e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb502f77dbd37e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb502f77dbd37e; op2val:0x3feb502f77dbd37e; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb502f77dbd37e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb502f77dbd37e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb502f77dbd37e; op2val:0x3feb502f77dbd37e; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb502f77dbd37e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb502f77dbd37e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb502f77dbd37e; op2val:0x3feb502f77dbd37e; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb502f77dbd37e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xb502f77dbd37e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb502f77dbd37e; op2val:0x3feb502f77dbd37e; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf55754319378e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf55754319378e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef55754319378e; op2val:0x3fef55754319378e; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf55754319378e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf55754319378e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef55754319378e; op2val:0x3fef55754319378e; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf55754319378e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf55754319378e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef55754319378e; op2val:0x3fef55754319378e; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf55754319378e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf55754319378e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef55754319378e; op2val:0x3fef55754319378e; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf55754319378e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf55754319378e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef55754319378e; op2val:0x3fef55754319378e; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_1096:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93d0d7c8bf82e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x93d0d7c8bf82e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93d0d7c8bf82e; op2val:0x3fd93d0d7c8bf82e; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_1097:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93d0d7c8bf82e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x93d0d7c8bf82e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93d0d7c8bf82e; op2val:0x3fd93d0d7c8bf82e; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_1098:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93d0d7c8bf82e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x93d0d7c8bf82e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93d0d7c8bf82e; op2val:0x3fd93d0d7c8bf82e; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_1099:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93d0d7c8bf82e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x93d0d7c8bf82e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93d0d7c8bf82e; op2val:0x3fd93d0d7c8bf82e; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_1100:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93d0d7c8bf82e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x93d0d7c8bf82e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93d0d7c8bf82e; op2val:0x3fd93d0d7c8bf82e; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_1101:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf5a42802fa3d8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf5a42802fa3d8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf5a42802fa3d8; op2val:0x3fdf5a42802fa3d8; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_1102:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf5a42802fa3d8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf5a42802fa3d8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf5a42802fa3d8; op2val:0x3fdf5a42802fa3d8; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_1103:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf5a42802fa3d8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf5a42802fa3d8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf5a42802fa3d8; op2val:0x3fdf5a42802fa3d8; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_1104:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf5a42802fa3d8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf5a42802fa3d8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf5a42802fa3d8; op2val:0x3fdf5a42802fa3d8; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_1105:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf5a42802fa3d8 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf5a42802fa3d8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf5a42802fa3d8; op2val:0x3fdf5a42802fa3d8; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_1106:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc850632fc7578 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc850632fc7578 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec850632fc7578; op2val:0x3fec850632fc7578; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_1107:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc850632fc7578 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc850632fc7578 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec850632fc7578; op2val:0x3fec850632fc7578; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_1108:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc850632fc7578 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc850632fc7578 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec850632fc7578; op2val:0x3fec850632fc7578; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_1109:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc850632fc7578 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc850632fc7578 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec850632fc7578; op2val:0x3fec850632fc7578; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_1110:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc850632fc7578 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc850632fc7578 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec850632fc7578; op2val:0x3fec850632fc7578; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_1111:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x287d58cd0b029 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x287d58cd0b029 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe287d58cd0b029; op2val:0x3fe287d58cd0b029; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_1112:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x287d58cd0b029 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x287d58cd0b029 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe287d58cd0b029; op2val:0x3fe287d58cd0b029; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_1113:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x287d58cd0b029 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x287d58cd0b029 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe287d58cd0b029; op2val:0x3fe287d58cd0b029; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_1114:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x287d58cd0b029 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x287d58cd0b029 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe287d58cd0b029; op2val:0x3fe287d58cd0b029; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_1115:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x287d58cd0b029 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x287d58cd0b029 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe287d58cd0b029; op2val:0x3fe287d58cd0b029; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_1116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3e62b2c081c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf3e62b2c081c8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef3e62b2c081c8; op2val:0x3fef3e62b2c081c8; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_1117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3e62b2c081c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf3e62b2c081c8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef3e62b2c081c8; op2val:0x3fef3e62b2c081c8; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_1118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3e62b2c081c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf3e62b2c081c8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef3e62b2c081c8; op2val:0x3fef3e62b2c081c8; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_1119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3e62b2c081c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf3e62b2c081c8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef3e62b2c081c8; op2val:0x3fef3e62b2c081c8; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_1120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf3e62b2c081c8 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf3e62b2c081c8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef3e62b2c081c8; op2val:0x3fef3e62b2c081c8; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_1121:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b2295a03972b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b2295a03972b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b2295a03972b; op2val:0x3fe5b2295a03972b; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_1122:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b2295a03972b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b2295a03972b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b2295a03972b; op2val:0x3fe5b2295a03972b; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_1123:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b2295a03972b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b2295a03972b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b2295a03972b; op2val:0x3fe5b2295a03972b; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_1124:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b2295a03972b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b2295a03972b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b2295a03972b; op2val:0x3fe5b2295a03972b; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_1125:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5b2295a03972b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x5b2295a03972b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5b2295a03972b; op2val:0x3fe5b2295a03972b; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_1126:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2754f85a4e0fa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2754f85a4e0fa and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2754f85a4e0fa; op2val:0x3fd2754f85a4e0fa; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_1127:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2754f85a4e0fa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2754f85a4e0fa and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2754f85a4e0fa; op2val:0x3fd2754f85a4e0fa; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_1128:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2754f85a4e0fa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2754f85a4e0fa and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2754f85a4e0fa; op2val:0x3fd2754f85a4e0fa; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_1129:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2754f85a4e0fa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2754f85a4e0fa and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2754f85a4e0fa; op2val:0x3fd2754f85a4e0fa; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_1130:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2754f85a4e0fa and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x2754f85a4e0fa and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2754f85a4e0fa; op2val:0x3fd2754f85a4e0fa; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_1131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9e8e7d5f9570 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9e8e7d5f9570 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea9e8e7d5f9570; op2val:0x3fea9e8e7d5f9570; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_1132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9e8e7d5f9570 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9e8e7d5f9570 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea9e8e7d5f9570; op2val:0x3fea9e8e7d5f9570; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_1133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9e8e7d5f9570 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9e8e7d5f9570 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea9e8e7d5f9570; op2val:0x3fea9e8e7d5f9570; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_1134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9e8e7d5f9570 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9e8e7d5f9570 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea9e8e7d5f9570; op2val:0x3fea9e8e7d5f9570; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_1135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9e8e7d5f9570 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9e8e7d5f9570 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea9e8e7d5f9570; op2val:0x3fea9e8e7d5f9570; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae45902faa8a1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae45902faa8a1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae45902faa8a1; op2val:0x3feae45902faa8a1; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae45902faa8a1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae45902faa8a1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae45902faa8a1; op2val:0x3feae45902faa8a1; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae45902faa8a1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae45902faa8a1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae45902faa8a1; op2val:0x3feae45902faa8a1; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae45902faa8a1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae45902faa8a1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae45902faa8a1; op2val:0x3feae45902faa8a1; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xae45902faa8a1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xae45902faa8a1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feae45902faa8a1; op2val:0x3feae45902faa8a1; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1141:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fa7ce6d6bfb5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4fa7ce6d6bfb5 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4fa7ce6d6bfb5; op2val:0x3fe4fa7ce6d6bfb5; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fa7ce6d6bfb5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4fa7ce6d6bfb5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4fa7ce6d6bfb5; op2val:0x3fe4fa7ce6d6bfb5; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_10)

inst_1143:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fa7ce6d6bfb5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4fa7ce6d6bfb5 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4fa7ce6d6bfb5; op2val:0x3fe4fa7ce6d6bfb5; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_1144:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fa7ce6d6bfb5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4fa7ce6d6bfb5 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4fa7ce6d6bfb5; op2val:0x3fe4fa7ce6d6bfb5; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_1145:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4fa7ce6d6bfb5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4fa7ce6d6bfb5 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4fa7ce6d6bfb5; op2val:0x3fe4fa7ce6d6bfb5; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1146:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f11b4cf93d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc7f11b4cf93d0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec7f11b4cf93d0; op2val:0x3fec7f11b4cf93d0; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_1147:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f11b4cf93d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc7f11b4cf93d0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec7f11b4cf93d0; op2val:0x3fec7f11b4cf93d0; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_1148:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f11b4cf93d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc7f11b4cf93d0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec7f11b4cf93d0; op2val:0x3fec7f11b4cf93d0; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_1149:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f11b4cf93d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc7f11b4cf93d0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec7f11b4cf93d0; op2val:0x3fec7f11b4cf93d0; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_1150:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc7f11b4cf93d0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc7f11b4cf93d0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec7f11b4cf93d0; op2val:0x3fec7f11b4cf93d0; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1151:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf48eebb8037ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf48eebb8037ec and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf48eebb8037ec; op2val:0x3fcf48eebb8037ec; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_1152:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf48eebb8037ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf48eebb8037ec and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf48eebb8037ec; op2val:0x3fcf48eebb8037ec; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_1153:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf48eebb8037ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf48eebb8037ec and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf48eebb8037ec; op2val:0x3fcf48eebb8037ec; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_1154:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf48eebb8037ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf48eebb8037ec and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf48eebb8037ec; op2val:0x3fcf48eebb8037ec; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_1155:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf48eebb8037ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xf48eebb8037ec and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf48eebb8037ec; op2val:0x3fcf48eebb8037ec; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf774536302116 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf774536302116 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef774536302116; op2val:0x3fef774536302116; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf774536302116 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf774536302116 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef774536302116; op2val:0x3fef774536302116; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf774536302116 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf774536302116 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef774536302116; op2val:0x3fef774536302116; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf774536302116 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf774536302116 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef774536302116; op2val:0x3fef774536302116; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf774536302116 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf774536302116 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef774536302116; op2val:0x3fef774536302116; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1161:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4ebb53f6fb618 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4ebb53f6fb618 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4ebb53f6fb618; op2val:0x3fd4ebb53f6fb618; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_1162:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4ebb53f6fb618 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4ebb53f6fb618 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4ebb53f6fb618; op2val:0x3fd4ebb53f6fb618; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_1163:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4ebb53f6fb618 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4ebb53f6fb618 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4ebb53f6fb618; op2val:0x3fd4ebb53f6fb618; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_1164:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4ebb53f6fb618 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4ebb53f6fb618 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4ebb53f6fb618; op2val:0x3fd4ebb53f6fb618; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_1165:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4ebb53f6fb618 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x4ebb53f6fb618 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4ebb53f6fb618; op2val:0x3fd4ebb53f6fb618; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d4a197dec309 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7d4a197dec309 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7d4a197dec309; op2val:0x3fe7d4a197dec309; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_1167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d4a197dec309 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7d4a197dec309 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7d4a197dec309; op2val:0x3fe7d4a197dec309; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_1168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d4a197dec309 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7d4a197dec309 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7d4a197dec309; op2val:0x3fe7d4a197dec309; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_1169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d4a197dec309 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7d4a197dec309 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7d4a197dec309; op2val:0x3fe7d4a197dec309; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_1170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7d4a197dec309 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x7d4a197dec309 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7d4a197dec309; op2val:0x3fe7d4a197dec309; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1171:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f8b502612e84 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9f8b502612e84 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9f8b502612e84; op2val:0x3fc9f8b502612e84; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_1172:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f8b502612e84 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9f8b502612e84 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9f8b502612e84; op2val:0x3fc9f8b502612e84; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_1173:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f8b502612e84 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9f8b502612e84 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9f8b502612e84; op2val:0x3fc9f8b502612e84; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_1174:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f8b502612e84 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9f8b502612e84 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9f8b502612e84; op2val:0x3fc9f8b502612e84; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_1175:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9f8b502612e84 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9f8b502612e84 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9f8b502612e84; op2val:0x3fc9f8b502612e84; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1176:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1ca762e88ccf8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1ca762e88ccf8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1ca762e88ccf8; op2val:0x3fc1ca762e88ccf8; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_1177:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1ca762e88ccf8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1ca762e88ccf8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1ca762e88ccf8; op2val:0x3fc1ca762e88ccf8; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_1178:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1ca762e88ccf8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1ca762e88ccf8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1ca762e88ccf8; op2val:0x3fc1ca762e88ccf8; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_1179:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1ca762e88ccf8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1ca762e88ccf8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1ca762e88ccf8; op2val:0x3fc1ca762e88ccf8; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_1180:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1ca762e88ccf8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1ca762e88ccf8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1ca762e88ccf8; op2val:0x3fc1ca762e88ccf8; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa54490dcc068d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa54490dcc068d and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea54490dcc068d; op2val:0x3fea54490dcc068d; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa54490dcc068d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa54490dcc068d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea54490dcc068d; op2val:0x3fea54490dcc068d; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa54490dcc068d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa54490dcc068d and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea54490dcc068d; op2val:0x3fea54490dcc068d; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa54490dcc068d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa54490dcc068d and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea54490dcc068d; op2val:0x3fea54490dcc068d; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa54490dcc068d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa54490dcc068d and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea54490dcc068d; op2val:0x3fea54490dcc068d; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1ad434c81ef0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1ad434c81ef0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef1ad434c81ef0; op2val:0x3fef1ad434c81ef0; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1ad434c81ef0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1ad434c81ef0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef1ad434c81ef0; op2val:0x3fef1ad434c81ef0; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1ad434c81ef0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1ad434c81ef0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef1ad434c81ef0; op2val:0x3fef1ad434c81ef0; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1ad434c81ef0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1ad434c81ef0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef1ad434c81ef0; op2val:0x3fef1ad434c81ef0; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf1ad434c81ef0 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf1ad434c81ef0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef1ad434c81ef0; op2val:0x3fef1ad434c81ef0; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1191:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cd942d59d49c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8cd942d59d49c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8cd942d59d49c; op2val:0x3fd8cd942d59d49c; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_1192:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cd942d59d49c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8cd942d59d49c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8cd942d59d49c; op2val:0x3fd8cd942d59d49c; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_1193:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cd942d59d49c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8cd942d59d49c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8cd942d59d49c; op2val:0x3fd8cd942d59d49c; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_1194:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cd942d59d49c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8cd942d59d49c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8cd942d59d49c; op2val:0x3fd8cd942d59d49c; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_1195:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8cd942d59d49c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x8cd942d59d49c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8cd942d59d49c; op2val:0x3fd8cd942d59d49c; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1196:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd89903baddb0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd89903baddb0c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd89903baddb0c; op2val:0x3fdd89903baddb0c; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_1197:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd89903baddb0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd89903baddb0c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd89903baddb0c; op2val:0x3fdd89903baddb0c; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_1198:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd89903baddb0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd89903baddb0c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd89903baddb0c; op2val:0x3fdd89903baddb0c; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_1199:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd89903baddb0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd89903baddb0c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd89903baddb0c; op2val:0x3fdd89903baddb0c; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_1200:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd89903baddb0c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd89903baddb0c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd89903baddb0c; op2val:0x3fdd89903baddb0c; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4952d3657a11a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4952d3657a11a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4952d3657a11a; op2val:0x3fe4952d3657a11a; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4952d3657a11a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4952d3657a11a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4952d3657a11a; op2val:0x3fe4952d3657a11a; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4952d3657a11a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4952d3657a11a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4952d3657a11a; op2val:0x3fe4952d3657a11a; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4952d3657a11a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4952d3657a11a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4952d3657a11a; op2val:0x3fe4952d3657a11a; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4952d3657a11a and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4952d3657a11a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4952d3657a11a; op2val:0x3fe4952d3657a11a; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1206:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb2a8ecb15b52 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb2a8ecb15b52 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfb2a8ecb15b52; op2val:0x3fdfb2a8ecb15b52; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_1207:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb2a8ecb15b52 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb2a8ecb15b52 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfb2a8ecb15b52; op2val:0x3fdfb2a8ecb15b52; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_1208:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb2a8ecb15b52 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb2a8ecb15b52 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfb2a8ecb15b52; op2val:0x3fdfb2a8ecb15b52; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_1209:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb2a8ecb15b52 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb2a8ecb15b52 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfb2a8ecb15b52; op2val:0x3fdfb2a8ecb15b52; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_1210:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfb2a8ecb15b52 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfb2a8ecb15b52 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfb2a8ecb15b52; op2val:0x3fdfb2a8ecb15b52; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1211:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb85218390961c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb85218390961c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb85218390961c; op2val:0x3fdb85218390961c; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_1212:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb85218390961c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb85218390961c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb85218390961c; op2val:0x3fdb85218390961c; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_1213:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb85218390961c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb85218390961c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb85218390961c; op2val:0x3fdb85218390961c; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_1214:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb85218390961c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb85218390961c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb85218390961c; op2val:0x3fdb85218390961c; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_1215:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb85218390961c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb85218390961c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb85218390961c; op2val:0x3fdb85218390961c; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe343cea135a0c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe343cea135a0c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee343cea135a0c; op2val:0x3fee343cea135a0c; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe343cea135a0c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe343cea135a0c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee343cea135a0c; op2val:0x3fee343cea135a0c; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe343cea135a0c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe343cea135a0c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee343cea135a0c; op2val:0x3fee343cea135a0c; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe343cea135a0c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe343cea135a0c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee343cea135a0c; op2val:0x3fee343cea135a0c; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe343cea135a0c and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe343cea135a0c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee343cea135a0c; op2val:0x3fee343cea135a0c; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1221:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc12b6765b2a8c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc12b6765b2a8c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc12b6765b2a8c; op2val:0x3fdc12b6765b2a8c; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_1222:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc12b6765b2a8c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc12b6765b2a8c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc12b6765b2a8c; op2val:0x3fdc12b6765b2a8c; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_1223:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc12b6765b2a8c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc12b6765b2a8c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc12b6765b2a8c; op2val:0x3fdc12b6765b2a8c; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_1224:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc12b6765b2a8c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc12b6765b2a8c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc12b6765b2a8c; op2val:0x3fdc12b6765b2a8c; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_1225:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc12b6765b2a8c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xc12b6765b2a8c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc12b6765b2a8c; op2val:0x3fdc12b6765b2a8c; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1226:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x86e1a8dee9828 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x86e1a8dee9828 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc86e1a8dee9828; op2val:0x3fc86e1a8dee9828; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_1227:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x86e1a8dee9828 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x86e1a8dee9828 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc86e1a8dee9828; op2val:0x3fc86e1a8dee9828; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_1228:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x86e1a8dee9828 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x86e1a8dee9828 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc86e1a8dee9828; op2val:0x3fc86e1a8dee9828; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_1229:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x86e1a8dee9828 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x86e1a8dee9828 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc86e1a8dee9828; op2val:0x3fc86e1a8dee9828; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_1230:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x86e1a8dee9828 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x86e1a8dee9828 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc86e1a8dee9828; op2val:0x3fc86e1a8dee9828; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1231:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2355c1f82470 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2355c1f82470 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbd2355c1f82470; op2val:0x3fbd2355c1f82470; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_1232:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2355c1f82470 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2355c1f82470 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbd2355c1f82470; op2val:0x3fbd2355c1f82470; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_1233:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2355c1f82470 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2355c1f82470 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbd2355c1f82470; op2val:0x3fbd2355c1f82470; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_1234:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2355c1f82470 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2355c1f82470 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbd2355c1f82470; op2val:0x3fbd2355c1f82470; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_1235:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xd2355c1f82470 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xd2355c1f82470 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbd2355c1f82470; op2val:0x3fbd2355c1f82470; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1236:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbb12f7249efb8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb12f7249efb8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbb12f7249efb8; op2val:0x3fcbb12f7249efb8; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_1237:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbb12f7249efb8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb12f7249efb8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbb12f7249efb8; op2val:0x3fcbb12f7249efb8; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_1238:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbb12f7249efb8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb12f7249efb8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbb12f7249efb8; op2val:0x3fcbb12f7249efb8; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_1239:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbb12f7249efb8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb12f7249efb8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbb12f7249efb8; op2val:0x3fcbb12f7249efb8; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_1240:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xbb12f7249efb8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xbb12f7249efb8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcbb12f7249efb8; op2val:0x3fcbb12f7249efb8; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1241:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5f4dad15181f0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x5f4dad15181f0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5f4dad15181f0; op2val:0x3fa5f4dad15181f0; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_1242:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5f4dad15181f0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x5f4dad15181f0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5f4dad15181f0; op2val:0x3fa5f4dad15181f0; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_1243:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5f4dad15181f0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x5f4dad15181f0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5f4dad15181f0; op2val:0x3fa5f4dad15181f0; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_1244:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5f4dad15181f0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x5f4dad15181f0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5f4dad15181f0; op2val:0x3fa5f4dad15181f0; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_1245:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5f4dad15181f0 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0x5f4dad15181f0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5f4dad15181f0; op2val:0x3fa5f4dad15181f0; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1246:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76210015cf6cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x76210015cf6cb and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe76210015cf6cb; op2val:0x3fe76210015cf6cb; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_1247:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76210015cf6cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x76210015cf6cb and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe76210015cf6cb; op2val:0x3fe76210015cf6cb; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_1248:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76210015cf6cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x76210015cf6cb and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe76210015cf6cb; op2val:0x3fe76210015cf6cb; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_1249:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76210015cf6cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x76210015cf6cb and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe76210015cf6cb; op2val:0x3fe76210015cf6cb; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_1250:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x76210015cf6cb and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x76210015cf6cb and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe76210015cf6cb; op2val:0x3fe76210015cf6cb; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1251:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb0568ed2c7e9a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb0568ed2c7e9a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb0568ed2c7e9a; op2val:0x3fdb0568ed2c7e9a; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_1252:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb0568ed2c7e9a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb0568ed2c7e9a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb0568ed2c7e9a; op2val:0x3fdb0568ed2c7e9a; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_1253:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb0568ed2c7e9a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb0568ed2c7e9a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb0568ed2c7e9a; op2val:0x3fdb0568ed2c7e9a; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_1254:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb0568ed2c7e9a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb0568ed2c7e9a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb0568ed2c7e9a; op2val:0x3fdb0568ed2c7e9a; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_1255:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb0568ed2c7e9a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xb0568ed2c7e9a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb0568ed2c7e9a; op2val:0x3fdb0568ed2c7e9a; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1256:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf1e5d753fd838 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf1e5d753fd838 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf1e5d753fd838; op2val:0x3fdf1e5d753fd838; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_1257:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf1e5d753fd838 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf1e5d753fd838 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf1e5d753fd838; op2val:0x3fdf1e5d753fd838; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_1258:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf1e5d753fd838 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf1e5d753fd838 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf1e5d753fd838; op2val:0x3fdf1e5d753fd838; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_1259:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf1e5d753fd838 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf1e5d753fd838 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf1e5d753fd838; op2val:0x3fdf1e5d753fd838; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_1260:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf1e5d753fd838 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf1e5d753fd838 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf1e5d753fd838; op2val:0x3fdf1e5d753fd838; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e206473a0174 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1e206473a0174 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1e206473a0174; op2val:0x3fc1e206473a0174; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_1262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e206473a0174 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1e206473a0174 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1e206473a0174; op2val:0x3fc1e206473a0174; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_1263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e206473a0174 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1e206473a0174 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1e206473a0174; op2val:0x3fc1e206473a0174; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_1264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e206473a0174 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1e206473a0174 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1e206473a0174; op2val:0x3fc1e206473a0174; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_1265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x1e206473a0174 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x1e206473a0174 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc1e206473a0174; op2val:0x3fc1e206473a0174; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1266:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd5f7f6ccec7f0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd5f7f6ccec7f0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd5f7f6ccec7f0; op2val:0x3fcd5f7f6ccec7f0; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_1267:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd5f7f6ccec7f0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd5f7f6ccec7f0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd5f7f6ccec7f0; op2val:0x3fcd5f7f6ccec7f0; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_1268:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd5f7f6ccec7f0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd5f7f6ccec7f0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd5f7f6ccec7f0; op2val:0x3fcd5f7f6ccec7f0; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_1269:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd5f7f6ccec7f0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd5f7f6ccec7f0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd5f7f6ccec7f0; op2val:0x3fcd5f7f6ccec7f0; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_11)

inst_1270:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xd5f7f6ccec7f0 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xd5f7f6ccec7f0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcd5f7f6ccec7f0; op2val:0x3fcd5f7f6ccec7f0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1271:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdb52ce2f3b7a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfdb52ce2f3b7a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdb52ce2f3b7a; op2val:0x3fdfdb52ce2f3b7a; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_1272:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdb52ce2f3b7a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfdb52ce2f3b7a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdb52ce2f3b7a; op2val:0x3fdfdb52ce2f3b7a; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_1273:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdb52ce2f3b7a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfdb52ce2f3b7a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdb52ce2f3b7a; op2val:0x3fdfdb52ce2f3b7a; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_1274:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdb52ce2f3b7a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfdb52ce2f3b7a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdb52ce2f3b7a; op2val:0x3fdfdb52ce2f3b7a; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_1275:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdb52ce2f3b7a and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfdb52ce2f3b7a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdb52ce2f3b7a; op2val:0x3fdfdb52ce2f3b7a; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x367a1a1694fe5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x367a1a1694fe5 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe367a1a1694fe5; op2val:0x3fe367a1a1694fe5; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x367a1a1694fe5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x367a1a1694fe5 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe367a1a1694fe5; op2val:0x3fe367a1a1694fe5; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x367a1a1694fe5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x367a1a1694fe5 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe367a1a1694fe5; op2val:0x3fe367a1a1694fe5; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x367a1a1694fe5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x367a1a1694fe5 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe367a1a1694fe5; op2val:0x3fe367a1a1694fe5; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x367a1a1694fe5 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x367a1a1694fe5 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe367a1a1694fe5; op2val:0x3fe367a1a1694fe5; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1281:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1373d314de200 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1373d314de200 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91373d314de200; op2val:0x3f91373d314de200; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_1282:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1373d314de200 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1373d314de200 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91373d314de200; op2val:0x3f91373d314de200; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_1283:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1373d314de200 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1373d314de200 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91373d314de200; op2val:0x3f91373d314de200; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_1284:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1373d314de200 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1373d314de200 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91373d314de200; op2val:0x3f91373d314de200; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_1285:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x1373d314de200 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0x1373d314de200 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f91373d314de200; op2val:0x3f91373d314de200; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1286:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9bc08ac410dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe9bc08ac410dd and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee9bc08ac410dd; op2val:0x3fee9bc08ac410dd; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_1287:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9bc08ac410dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe9bc08ac410dd and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee9bc08ac410dd; op2val:0x3fee9bc08ac410dd; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_1288:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9bc08ac410dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe9bc08ac410dd and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee9bc08ac410dd; op2val:0x3fee9bc08ac410dd; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_1289:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9bc08ac410dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe9bc08ac410dd and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee9bc08ac410dd; op2val:0x3fee9bc08ac410dd; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_1290:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe9bc08ac410dd and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xe9bc08ac410dd and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee9bc08ac410dd; op2val:0x3fee9bc08ac410dd; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0546e4111a5d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0546e4111a5d7 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0546e4111a5d7; op2val:0x3fe0546e4111a5d7; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_1292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0546e4111a5d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0546e4111a5d7 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0546e4111a5d7; op2val:0x3fe0546e4111a5d7; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_1293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0546e4111a5d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0546e4111a5d7 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0546e4111a5d7; op2val:0x3fe0546e4111a5d7; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_1294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0546e4111a5d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0546e4111a5d7 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0546e4111a5d7; op2val:0x3fe0546e4111a5d7; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_1295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0546e4111a5d7 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0546e4111a5d7 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0546e4111a5d7; op2val:0x3fe0546e4111a5d7; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1296:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xea8f1e947c77e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8f1e947c77e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdea8f1e947c77e; op2val:0x3fdea8f1e947c77e; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_1297:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xea8f1e947c77e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8f1e947c77e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdea8f1e947c77e; op2val:0x3fdea8f1e947c77e; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_1298:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xea8f1e947c77e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8f1e947c77e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdea8f1e947c77e; op2val:0x3fdea8f1e947c77e; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_1299:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xea8f1e947c77e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8f1e947c77e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdea8f1e947c77e; op2val:0x3fdea8f1e947c77e; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_1300:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xea8f1e947c77e and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xea8f1e947c77e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdea8f1e947c77e; op2val:0x3fdea8f1e947c77e; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1301:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf75f0bf22f4f0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf75f0bf22f4f0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf75f0bf22f4f0; op2val:0x3fdf75f0bf22f4f0; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_1302:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf75f0bf22f4f0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf75f0bf22f4f0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf75f0bf22f4f0; op2val:0x3fdf75f0bf22f4f0; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_1303:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf75f0bf22f4f0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf75f0bf22f4f0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf75f0bf22f4f0; op2val:0x3fdf75f0bf22f4f0; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_1304:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf75f0bf22f4f0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf75f0bf22f4f0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf75f0bf22f4f0; op2val:0x3fdf75f0bf22f4f0; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_1305:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf75f0bf22f4f0 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf75f0bf22f4f0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf75f0bf22f4f0; op2val:0x3fdf75f0bf22f4f0; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1306:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4026ecfa7750b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4026ecfa7750b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4026ecfa7750b; op2val:0x3fe4026ecfa7750b; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_1307:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4026ecfa7750b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4026ecfa7750b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4026ecfa7750b; op2val:0x3fe4026ecfa7750b; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_1308:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4026ecfa7750b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4026ecfa7750b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4026ecfa7750b; op2val:0x3fe4026ecfa7750b; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_1309:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4026ecfa7750b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4026ecfa7750b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4026ecfa7750b; op2val:0x3fe4026ecfa7750b; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_1310:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4026ecfa7750b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x4026ecfa7750b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4026ecfa7750b; op2val:0x3fe4026ecfa7750b; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1311:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3016151cb15a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3016151cb15a2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3016151cb15a2; op2val:0x3fd3016151cb15a2; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_1312:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3016151cb15a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3016151cb15a2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3016151cb15a2; op2val:0x3fd3016151cb15a2; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_1313:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3016151cb15a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3016151cb15a2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3016151cb15a2; op2val:0x3fd3016151cb15a2; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_1314:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3016151cb15a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3016151cb15a2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3016151cb15a2; op2val:0x3fd3016151cb15a2; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_1315:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3016151cb15a2 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x3016151cb15a2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3016151cb15a2; op2val:0x3fd3016151cb15a2; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1316:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa76b92e8810b1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa76b92e8810b1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea76b92e8810b1; op2val:0x3fea76b92e8810b1; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_1317:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa76b92e8810b1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa76b92e8810b1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea76b92e8810b1; op2val:0x3fea76b92e8810b1; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_1318:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa76b92e8810b1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa76b92e8810b1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea76b92e8810b1; op2val:0x3fea76b92e8810b1; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_1319:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa76b92e8810b1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa76b92e8810b1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea76b92e8810b1; op2val:0x3fea76b92e8810b1; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_1320:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa76b92e8810b1 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa76b92e8810b1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea76b92e8810b1; op2val:0x3fea76b92e8810b1; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1321:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9eea859880938 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9eea859880938 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9eea859880938; op2val:0x3fc9eea859880938; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_1322:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9eea859880938 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9eea859880938 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9eea859880938; op2val:0x3fc9eea859880938; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_1323:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9eea859880938 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9eea859880938 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9eea859880938; op2val:0x3fc9eea859880938; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_1324:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9eea859880938 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9eea859880938 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9eea859880938; op2val:0x3fc9eea859880938; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_1325:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9eea859880938 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x9eea859880938 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9eea859880938; op2val:0x3fc9eea859880938; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xee52a16143f62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xee52a16143f62 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feee52a16143f62; op2val:0x3feee52a16143f62; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_1327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xee52a16143f62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xee52a16143f62 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feee52a16143f62; op2val:0x3feee52a16143f62; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_1328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xee52a16143f62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xee52a16143f62 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feee52a16143f62; op2val:0x3feee52a16143f62; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_1329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xee52a16143f62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xee52a16143f62 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feee52a16143f62; op2val:0x3feee52a16143f62; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_1330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xee52a16143f62 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xee52a16143f62 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feee52a16143f62; op2val:0x3feee52a16143f62; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1331:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa96e0cda696c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfa96e0cda696c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfa96e0cda696c; op2val:0x3fdfa96e0cda696c; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_1332:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa96e0cda696c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfa96e0cda696c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfa96e0cda696c; op2val:0x3fdfa96e0cda696c; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_1333:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa96e0cda696c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfa96e0cda696c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfa96e0cda696c; op2val:0x3fdfa96e0cda696c; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_1334:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa96e0cda696c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfa96e0cda696c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfa96e0cda696c; op2val:0x3fdfa96e0cda696c; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_1335:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfa96e0cda696c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xfa96e0cda696c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfa96e0cda696c; op2val:0x3fdfa96e0cda696c; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1336:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe15db300539e0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe15db300539e0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe15db300539e0; op2val:0x3fbe15db300539e0; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_1337:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe15db300539e0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe15db300539e0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe15db300539e0; op2val:0x3fbe15db300539e0; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_1338:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe15db300539e0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe15db300539e0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe15db300539e0; op2val:0x3fbe15db300539e0; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_1339:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe15db300539e0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe15db300539e0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe15db300539e0; op2val:0x3fbe15db300539e0; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_1340:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xe15db300539e0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0xe15db300539e0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbe15db300539e0; op2val:0x3fbe15db300539e0; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x64ace1edd0554 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64ace1edd0554 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe64ace1edd0554; op2val:0x3fe64ace1edd0554; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x64ace1edd0554 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64ace1edd0554 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe64ace1edd0554; op2val:0x3fe64ace1edd0554; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x64ace1edd0554 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64ace1edd0554 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe64ace1edd0554; op2val:0x3fe64ace1edd0554; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x64ace1edd0554 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64ace1edd0554 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe64ace1edd0554; op2val:0x3fe64ace1edd0554; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x64ace1edd0554 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x64ace1edd0554 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe64ace1edd0554; op2val:0x3fe64ace1edd0554; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1346:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c163f16fe1cc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c163f16fe1cc and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c163f16fe1cc; op2val:0x3fc5c163f16fe1cc; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_1347:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c163f16fe1cc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c163f16fe1cc and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c163f16fe1cc; op2val:0x3fc5c163f16fe1cc; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_1348:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c163f16fe1cc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c163f16fe1cc and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c163f16fe1cc; op2val:0x3fc5c163f16fe1cc; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_1349:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c163f16fe1cc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c163f16fe1cc and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c163f16fe1cc; op2val:0x3fc5c163f16fe1cc; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_1350:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x5c163f16fe1cc and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x5c163f16fe1cc and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc5c163f16fe1cc; op2val:0x3fc5c163f16fe1cc; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1351:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0456e010c9d10 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0456e010c9d10 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0456e010c9d10; op2val:0x3fb0456e010c9d10; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_1352:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0456e010c9d10 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0456e010c9d10 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0456e010c9d10; op2val:0x3fb0456e010c9d10; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_1353:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0456e010c9d10 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0456e010c9d10 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0456e010c9d10; op2val:0x3fb0456e010c9d10; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_1354:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0456e010c9d10 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0456e010c9d10 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0456e010c9d10; op2val:0x3fb0456e010c9d10; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_1355:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0456e010c9d10 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x0456e010c9d10 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0456e010c9d10; op2val:0x3fb0456e010c9d10; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1356:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d3331036c786 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d3331036c786 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1d3331036c786; op2val:0x3fd1d3331036c786; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_1357:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d3331036c786 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d3331036c786 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1d3331036c786; op2val:0x3fd1d3331036c786; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_1358:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d3331036c786 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d3331036c786 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1d3331036c786; op2val:0x3fd1d3331036c786; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_1359:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d3331036c786 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d3331036c786 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1d3331036c786; op2val:0x3fd1d3331036c786; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_1360:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1d3331036c786 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1d3331036c786 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1d3331036c786; op2val:0x3fd1d3331036c786; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc21ab61070490 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc21ab61070490 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec21ab61070490; op2val:0x3fec21ab61070490; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc21ab61070490 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc21ab61070490 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec21ab61070490; op2val:0x3fec21ab61070490; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc21ab61070490 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc21ab61070490 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec21ab61070490; op2val:0x3fec21ab61070490; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc21ab61070490 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc21ab61070490 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec21ab61070490; op2val:0x3fec21ab61070490; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc21ab61070490 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xc21ab61070490 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec21ab61070490; op2val:0x3fec21ab61070490; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1366:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe8acc8d7f3080 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xe8acc8d7f3080 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7e8acc8d7f3080; op2val:0x3f7e8acc8d7f3080; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_1367:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe8acc8d7f3080 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xe8acc8d7f3080 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7e8acc8d7f3080; op2val:0x3f7e8acc8d7f3080; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_1368:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe8acc8d7f3080 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xe8acc8d7f3080 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7e8acc8d7f3080; op2val:0x3f7e8acc8d7f3080; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_1369:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe8acc8d7f3080 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xe8acc8d7f3080 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7e8acc8d7f3080; op2val:0x3f7e8acc8d7f3080; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_1370:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0xe8acc8d7f3080 and fs2 == 0 and fe2 == 0x3f7 and fm2 == 0xe8acc8d7f3080 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f7e8acc8d7f3080; op2val:0x3f7e8acc8d7f3080; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1371:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6e4a62f333310 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6e4a62f333310 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6e4a62f333310; op2val:0x3fd6e4a62f333310; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_1372:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6e4a62f333310 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6e4a62f333310 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6e4a62f333310; op2val:0x3fd6e4a62f333310; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_1373:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6e4a62f333310 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6e4a62f333310 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6e4a62f333310; op2val:0x3fd6e4a62f333310; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_1374:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6e4a62f333310 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6e4a62f333310 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6e4a62f333310; op2val:0x3fd6e4a62f333310; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_1375:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6e4a62f333310 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x6e4a62f333310 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6e4a62f333310; op2val:0x3fd6e4a62f333310; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1376:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ca3eb156f574 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4ca3eb156f574 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4ca3eb156f574; op2val:0x3fc4ca3eb156f574; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_1377:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ca3eb156f574 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4ca3eb156f574 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4ca3eb156f574; op2val:0x3fc4ca3eb156f574; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_1378:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ca3eb156f574 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4ca3eb156f574 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4ca3eb156f574; op2val:0x3fc4ca3eb156f574; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_1379:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ca3eb156f574 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4ca3eb156f574 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4ca3eb156f574; op2val:0x3fc4ca3eb156f574; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_1380:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x4ca3eb156f574 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x4ca3eb156f574 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc4ca3eb156f574; op2val:0x3fc4ca3eb156f574; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1381:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ba1be84b41d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ba1be84b41d9 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ba1be84b41d9; op2val:0x3fe6ba1be84b41d9; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_1382:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ba1be84b41d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ba1be84b41d9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ba1be84b41d9; op2val:0x3fe6ba1be84b41d9; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_1383:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ba1be84b41d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ba1be84b41d9 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ba1be84b41d9; op2val:0x3fe6ba1be84b41d9; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_1384:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ba1be84b41d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ba1be84b41d9 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ba1be84b41d9; op2val:0x3fe6ba1be84b41d9; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_1385:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ba1be84b41d9 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6ba1be84b41d9 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ba1be84b41d9; op2val:0x3fe6ba1be84b41d9; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ffbee8f4ca1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ffbee8f4ca1e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8ffbee8f4ca1e; op2val:0x3fe8ffbee8f4ca1e; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_1387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ffbee8f4ca1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ffbee8f4ca1e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8ffbee8f4ca1e; op2val:0x3fe8ffbee8f4ca1e; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_1388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ffbee8f4ca1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ffbee8f4ca1e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8ffbee8f4ca1e; op2val:0x3fe8ffbee8f4ca1e; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_1389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ffbee8f4ca1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ffbee8f4ca1e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8ffbee8f4ca1e; op2val:0x3fe8ffbee8f4ca1e; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_1390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ffbee8f4ca1e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8ffbee8f4ca1e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8ffbee8f4ca1e; op2val:0x3fe8ffbee8f4ca1e; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88a927a9e00b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88a927a9e00b6 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88a927a9e00b6; op2val:0x3fe88a927a9e00b6; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88a927a9e00b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88a927a9e00b6 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88a927a9e00b6; op2val:0x3fe88a927a9e00b6; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88a927a9e00b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88a927a9e00b6 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88a927a9e00b6; op2val:0x3fe88a927a9e00b6; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88a927a9e00b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88a927a9e00b6 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88a927a9e00b6; op2val:0x3fe88a927a9e00b6; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88a927a9e00b6 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x88a927a9e00b6 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88a927a9e00b6; op2val:0x3fe88a927a9e00b6; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fcd3283e4b01 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fcd3283e4b01 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1fcd3283e4b01; op2val:0x3fe1fcd3283e4b01; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_12)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fcd3283e4b01 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fcd3283e4b01 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1fcd3283e4b01; op2val:0x3fe1fcd3283e4b01; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fcd3283e4b01 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fcd3283e4b01 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1fcd3283e4b01; op2val:0x3fe1fcd3283e4b01; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fcd3283e4b01 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fcd3283e4b01 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1fcd3283e4b01; op2val:0x3fe1fcd3283e4b01; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1fcd3283e4b01 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1fcd3283e4b01 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1fcd3283e4b01; op2val:0x3fe1fcd3283e4b01; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1401:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf12190de3b51e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf12190de3b51e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef12190de3b51e; op2val:0x3fef12190de3b51e; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_1402:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf12190de3b51e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf12190de3b51e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef12190de3b51e; op2val:0x3fef12190de3b51e; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_1403:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf12190de3b51e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf12190de3b51e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef12190de3b51e; op2val:0x3fef12190de3b51e; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1404:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf12190de3b51e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf12190de3b51e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef12190de3b51e; op2val:0x3fef12190de3b51e; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_1405:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf12190de3b51e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf12190de3b51e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef12190de3b51e; op2val:0x3fef12190de3b51e; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9119e241fb3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9119e241fb3cf and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9119e241fb3cf; op2val:0x3fe9119e241fb3cf; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9119e241fb3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9119e241fb3cf and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9119e241fb3cf; op2val:0x3fe9119e241fb3cf; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9119e241fb3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9119e241fb3cf and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9119e241fb3cf; op2val:0x3fe9119e241fb3cf; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9119e241fb3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9119e241fb3cf and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9119e241fb3cf; op2val:0x3fe9119e241fb3cf; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9119e241fb3cf and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x9119e241fb3cf and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9119e241fb3cf; op2val:0x3fe9119e241fb3cf; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1411:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf27d74799dd50 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf27d74799dd50 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf27d74799dd50; op2val:0x3faf27d74799dd50; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_1412:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf27d74799dd50 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf27d74799dd50 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf27d74799dd50; op2val:0x3faf27d74799dd50; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_1413:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf27d74799dd50 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf27d74799dd50 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf27d74799dd50; op2val:0x3faf27d74799dd50; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_1414:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf27d74799dd50 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf27d74799dd50 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf27d74799dd50; op2val:0x3faf27d74799dd50; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_1415:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xf27d74799dd50 and fs2 == 0 and fe2 == 0x3fa and fm2 == 0xf27d74799dd50 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3faf27d74799dd50; op2val:0x3faf27d74799dd50; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f8c2966dd61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf2f8c2966dd61 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef2f8c2966dd61; op2val:0x3fef2f8c2966dd61; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f8c2966dd61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf2f8c2966dd61 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef2f8c2966dd61; op2val:0x3fef2f8c2966dd61; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f8c2966dd61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf2f8c2966dd61 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef2f8c2966dd61; op2val:0x3fef2f8c2966dd61; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f8c2966dd61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf2f8c2966dd61 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef2f8c2966dd61; op2val:0x3fef2f8c2966dd61; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf2f8c2966dd61 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xf2f8c2966dd61 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef2f8c2966dd61; op2val:0x3fef2f8c2966dd61; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1421:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93c0cd5d79dd0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x93c0cd5d79dd0 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb93c0cd5d79dd0; op2val:0x3fb93c0cd5d79dd0; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_1422:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93c0cd5d79dd0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x93c0cd5d79dd0 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb93c0cd5d79dd0; op2val:0x3fb93c0cd5d79dd0; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_1423:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93c0cd5d79dd0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x93c0cd5d79dd0 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb93c0cd5d79dd0; op2val:0x3fb93c0cd5d79dd0; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_1424:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93c0cd5d79dd0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x93c0cd5d79dd0 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb93c0cd5d79dd0; op2val:0x3fb93c0cd5d79dd0; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_1425:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x93c0cd5d79dd0 and fs2 == 0 and fe2 == 0x3fb and fm2 == 0x93c0cd5d79dd0 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb93c0cd5d79dd0; op2val:0x3fb93c0cd5d79dd0; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8adfad9a2a8ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8adfad9a2a8ad and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8adfad9a2a8ad; op2val:0x3fe8adfad9a2a8ad; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_1427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8adfad9a2a8ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8adfad9a2a8ad and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8adfad9a2a8ad; op2val:0x3fe8adfad9a2a8ad; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_1428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8adfad9a2a8ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8adfad9a2a8ad and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8adfad9a2a8ad; op2val:0x3fe8adfad9a2a8ad; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_1429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8adfad9a2a8ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8adfad9a2a8ad and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8adfad9a2a8ad; op2val:0x3fe8adfad9a2a8ad; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_1430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8adfad9a2a8ad and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8adfad9a2a8ad and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8adfad9a2a8ad; op2val:0x3fe8adfad9a2a8ad; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1431:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bf635aef470b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bf635aef470b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bf635aef470b; op2val:0x3fe1bf635aef470b; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_1432:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bf635aef470b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bf635aef470b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bf635aef470b; op2val:0x3fe1bf635aef470b; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_1433:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bf635aef470b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bf635aef470b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bf635aef470b; op2val:0x3fe1bf635aef470b; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_1434:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bf635aef470b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bf635aef470b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bf635aef470b; op2val:0x3fe1bf635aef470b; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_1435:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1bf635aef470b and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x1bf635aef470b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1bf635aef470b; op2val:0x3fe1bf635aef470b; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1436:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe6d9b33b9b8ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe6d9b33b9b8ec and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce6d9b33b9b8ec; op2val:0x3fce6d9b33b9b8ec; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_1437:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe6d9b33b9b8ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe6d9b33b9b8ec and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce6d9b33b9b8ec; op2val:0x3fce6d9b33b9b8ec; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_1438:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe6d9b33b9b8ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe6d9b33b9b8ec and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce6d9b33b9b8ec; op2val:0x3fce6d9b33b9b8ec; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_1439:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe6d9b33b9b8ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe6d9b33b9b8ec and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce6d9b33b9b8ec; op2val:0x3fce6d9b33b9b8ec; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_1440:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe6d9b33b9b8ec and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe6d9b33b9b8ec and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce6d9b33b9b8ec; op2val:0x3fce6d9b33b9b8ec; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1441:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x505a629c357d8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x505a629c357d8 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc505a629c357d8; op2val:0x3fc505a629c357d8; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_1442:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x505a629c357d8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x505a629c357d8 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc505a629c357d8; op2val:0x3fc505a629c357d8; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_1443:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x505a629c357d8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x505a629c357d8 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc505a629c357d8; op2val:0x3fc505a629c357d8; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_1444:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x505a629c357d8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x505a629c357d8 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc505a629c357d8; op2val:0x3fc505a629c357d8; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_1445:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x505a629c357d8 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x505a629c357d8 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc505a629c357d8; op2val:0x3fc505a629c357d8; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff1a2e0c6f4e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcff1a2e0c6f4e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecff1a2e0c6f4e; op2val:0x3fecff1a2e0c6f4e; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_1447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff1a2e0c6f4e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcff1a2e0c6f4e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecff1a2e0c6f4e; op2val:0x3fecff1a2e0c6f4e; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_1448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff1a2e0c6f4e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcff1a2e0c6f4e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecff1a2e0c6f4e; op2val:0x3fecff1a2e0c6f4e; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_1449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff1a2e0c6f4e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcff1a2e0c6f4e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecff1a2e0c6f4e; op2val:0x3fecff1a2e0c6f4e; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_1450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcff1a2e0c6f4e and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcff1a2e0c6f4e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecff1a2e0c6f4e; op2val:0x3fecff1a2e0c6f4e; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64c4cfcf68c4c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x64c4cfcf68c4c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64c4cfcf68c4c; op2val:0x3fd64c4cfcf68c4c; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_1452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64c4cfcf68c4c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x64c4cfcf68c4c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64c4cfcf68c4c; op2val:0x3fd64c4cfcf68c4c; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_1453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64c4cfcf68c4c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x64c4cfcf68c4c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64c4cfcf68c4c; op2val:0x3fd64c4cfcf68c4c; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_1454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64c4cfcf68c4c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x64c4cfcf68c4c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64c4cfcf68c4c; op2val:0x3fd64c4cfcf68c4c; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_1455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64c4cfcf68c4c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x64c4cfcf68c4c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64c4cfcf68c4c; op2val:0x3fd64c4cfcf68c4c; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0256550f4c643 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0256550f4c643 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0256550f4c643; op2val:0x3fe0256550f4c643; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_1457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0256550f4c643 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0256550f4c643 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0256550f4c643; op2val:0x3fe0256550f4c643; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_1458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0256550f4c643 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0256550f4c643 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0256550f4c643; op2val:0x3fe0256550f4c643; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_1459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0256550f4c643 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0256550f4c643 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0256550f4c643; op2val:0x3fe0256550f4c643; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_1460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0256550f4c643 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0256550f4c643 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0256550f4c643; op2val:0x3fe0256550f4c643; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1461:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe3ca21efd83b4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe3ca21efd83b4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce3ca21efd83b4; op2val:0x3fce3ca21efd83b4; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_1462:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe3ca21efd83b4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe3ca21efd83b4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce3ca21efd83b4; op2val:0x3fce3ca21efd83b4; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_1463:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe3ca21efd83b4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe3ca21efd83b4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce3ca21efd83b4; op2val:0x3fce3ca21efd83b4; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_1464:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe3ca21efd83b4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe3ca21efd83b4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce3ca21efd83b4; op2val:0x3fce3ca21efd83b4; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_1465:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe3ca21efd83b4 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0xe3ca21efd83b4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce3ca21efd83b4; op2val:0x3fce3ca21efd83b4; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbb349c1b9229f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbb349c1b9229f and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febb349c1b9229f; op2val:0x3febb349c1b9229f; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_1467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbb349c1b9229f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbb349c1b9229f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febb349c1b9229f; op2val:0x3febb349c1b9229f; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_1468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbb349c1b9229f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbb349c1b9229f and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febb349c1b9229f; op2val:0x3febb349c1b9229f; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_1469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbb349c1b9229f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xbb349c1b9229f and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febb349c1b9229f; op2val:0x3febb349c1b9229f; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_1470:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9b3576cfffac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9b3576cfffac and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea9b3576cfffac; op2val:0x3fea9b3576cfffac; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_1471:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa9b3576cfffac and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xa9b3576cfffac and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea9b3576cfffac; op2val:0x3fea9b3576cfffac; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fdf43462389ee50
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fde83ed82bacef6
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fed9a8b3d340638
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fbd2d72555051b0
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fe950c731e33ba5
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3e8ed6dcb2bb0
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fd3cfb4e7416d34
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fdf8aa1b2516b92
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fd5f6468475cb34
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fe27a1427b89255
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fdf578eaf36016e
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fe10d7ec9f56cfc
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fc56110dbd9b2ec
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fdd2b0fa5921612
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fd2afccc4b5fc46
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fe4d14e0c596fb1
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc7a366f3952fd0
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fc3ad7ced264b10
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fb0190993492cc8
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7ba2bbec05684
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7b3661fd5733a
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fd7046ac8439336
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fe03bc8e80ca9d0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fba229fe10a47f0
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fda98bb30344092
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe3082ccea7ecf2
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe38bfac9aebfdf
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fe47f9d5de52e44
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fd8515e22a63700
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fe63aaec1303d1b
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fd057f8d24d8f48
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3fc52c0a67baba00
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3f8a963b13a20d40
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fc5d58644588da8
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fd9b7ad8238c104
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fefe04028054b11
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe3eb0b0a786fe6
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fe03f15e38c30bb
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fcbc3cb844d46d4
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe63f15c5d7c2f6
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fe1d88f9d20cd17
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fde2ecb0d69165a
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdfce50d294f730
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3fdb5ae0998e6116
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3feba10597b30314
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fce9566846933dc
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fdd1a042da0f26e
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec38c20db9072d
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fec8a1fa4624929
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fe3bc5d1b2e4336
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fcd8f332ca82910
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3fe04b4a5651f44b
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3f9b0460ea7fa560
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fcabd8a12385b44
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe7f8c5d4abab27
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe741bc2ec165a8
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fe6e311ab680718
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fc513d45bd56a30
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fd7d69ab8371bd2
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fe1f5922daf04f7
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fefdf289c29291c
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fe80e9c8a7c0ee1
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fec389b415ba358
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fd98e7953ba419e
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3fa4c65df26e5820
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3febf51aa182a8e9
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3feaba555c5c12e6
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3fc940bfa18b9144
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3f9d7bc6131267c0
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fe1c21430989b38
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fd5c730da81c88e
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fccb3fc86212ab4
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fa4c46ec19c88e0
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fe7706ccd0d681f
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3fc8954cbbeac444
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feeb283b1e73ef1
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3feab9f939d2b73d
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fe4dd55e276ced3
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fd460117cd9e472
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fcf020b537bd3e8
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fe90944883bb4c1
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fea5bf2a7607b6a
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fa4708c9f1b6c40
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fc26582be07316c
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fd0de868c48224a
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fe41bbc4356db65
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fd3ad258d9a7d0a
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3fbdf315b97a1bb0
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3feae5a3edf416cb
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fdf40716ad67306
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fee752ad850472c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fe7315a941c4f4c
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fb7d2d008b26a78
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe2cee132a6f630
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe0ad733c2c80da
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fe85f3c12bf80e5
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd4102b3ae319dc
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fd6796980a2f2b2
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fde29c02d764a06
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe886ecd20e56e2
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fe32a55c34fb190
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3fc5e57a6b91c248
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3febfef16f722e29
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fe4a44da5ae01fb
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fdb7b3ae7d94534
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fd6a0bef889f456
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe7beb79a0e8ee0
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fe356570ca7a355
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fc308d787641b4c
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fdcd8c2edff8cc2
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fa2bf15e3695970
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fe7eacfe8e38e8d
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fd24050f11a6bda
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fe227d459d99b9e
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fd3ddac2e5b4558
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc46355e0e7872c
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fc91b3cc53eacfc
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fe5e2c3f0b743f5
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fb6eaac48e03a18
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fbb329f996261a8
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fb4a5060cbd4ba0
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fec94752529a6f9
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fc6d771e226b99c
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fcca52f1d9b63e8
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fa9fecb556c9600
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3fca3dfb1ac020fc
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3feb10f5f398a4a4
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe037349e1fe9e1
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fe6b19700ff40f8
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fed988967e9f837
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fdcb90fb10f3ec6
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe8331fb2649573
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fe828283b1e8f94
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fdaf1e7118a19f4
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fe54d240798a130
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fbb4391628449f0
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe5dd4e40d43e1e
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fe62ed2b3d5f666
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fae580b7171d940
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3fd645759b67b7ec
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3f9105b19f944d60
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fed656d54b857f0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe62a6ce73400c0
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fe7b5914b446142
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3fd3f4b2bc3fa6d2
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3f94873b0decd9c0
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3fe91d2300dc0569
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3f9eedaa45a67220
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fb62bf0d5d845d0
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fe5f99a6a67e128
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3fd9d1c95d70201a
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3f91d5990985d1a0
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feebb6e63e4154a
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3feccbbdf72b6713
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fe7e4106d274f76
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fb73d2de5d01370
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fe3e52710c6282e
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fecb5952a427468
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fe84648f75d3d96
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3fec4d58ee324503
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3f88405b69c7f140
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3feeb8208f3f915a
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fec511490b20d9b
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fd517f9c7e23494
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fc60bb16b44a84c
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fe721519b91af0d
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fb32ecbbc5785c8
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fbbf69eb68ad548
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fed625bf430e65e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fdb7850c399098e
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fcbea95312e6d28
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fe5175e338a8ee0
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3fcb1f000da48b00
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feda866467aa4ed
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3feca9c77ab7939e
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3febab3ee9ae1fbd
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fa76503523ba900
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fc0f86320e5659c
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fe51c62238b5a6a
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fc455c7bbea53c0
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fced547eaaf2bf4
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fb6c9812ec6fe78
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fed4a4caf77ca64
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe87dd357bd1c08
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fe07efc88ed9e35
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fbe1b7aa5319f00
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fb15c296e79d7f8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fd4d5ba673a8ff8
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3fe52620e2487534
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3f8a85ad6fc8ea40
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fe9929cb491e1e4
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fb9aeaf56ff2ab0
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe596c4b58d2e3a
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3fe6869299fbcb48
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3feca88e883f8904
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe22545c9a26599
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe96a6651b4db2b
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fe3e7ade732c864
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fd2f148eb042c14
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fc0ec8cd214f1fc
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fdb8085ec502c92
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fc71d703c84c000
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fbf0c5804c87c50
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fe7ecaeb37a7ac0
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fd064e406bbfdc4
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe611804c54cfbc
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fe63214afb79360
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fa06efa326c6f40
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fee1e6ead0cd995
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe5b85ab55c5721
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe35cfed94ce657
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fe8db9485e787f5
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fc9e15574e11254
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fe8f0d8cc179391
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3fd498c48c9630a6
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feadf6a6237a2ad
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3feb502f77dbd37e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fef55754319378e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fd93d0d7c8bf82e
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fdf5a42802fa3d8
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fec850632fc7578
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fe287d58cd0b029
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fef3e62b2c081c8
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fe5b2295a03972b
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fd2754f85a4e0fa
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3fea9e8e7d5f9570
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3feae45902faa8a1
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fe4fa7ce6d6bfb5
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fec7f11b4cf93d0
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fcf48eebb8037ec
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fef774536302116
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fd4ebb53f6fb618
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fe7d4a197dec309
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc9f8b502612e84
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fc1ca762e88ccf8
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fea54490dcc068d
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fef1ad434c81ef0
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fd8cd942d59d49c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fdd89903baddb0c
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fe4952d3657a11a
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdfb2a8ecb15b52
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fdb85218390961c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fee343cea135a0c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fdc12b6765b2a8c
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fc86e1a8dee9828
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fbd2355c1f82470
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fcbb12f7249efb8
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fa5f4dad15181f0
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fe76210015cf6cb
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdb0568ed2c7e9a
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fdf1e5d753fd838
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fc1e206473a0174
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fcd5f7f6ccec7f0
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fdfdb52ce2f3b7a
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3fe367a1a1694fe5
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3f91373d314de200
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fee9bc08ac410dd
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fe0546e4111a5d7
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdea8f1e947c77e
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fdf75f0bf22f4f0
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fe4026ecfa7750b
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fd3016151cb15a2
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fea76b92e8810b1
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3fc9eea859880938
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3feee52a16143f62
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fdfa96e0cda696c
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fbe15db300539e0
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fe64ace1edd0554
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fc5c163f16fe1cc
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fb0456e010c9d10
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fd1d3331036c786
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3fec21ab61070490
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3f7e8acc8d7f3080
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fd6e4a62f333310
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fc4ca3eb156f574
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe6ba1be84b41d9
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe8ffbee8f4ca1e
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe88a927a9e00b6
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fe1fcd3283e4b01
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fef12190de3b51e
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3fe9119e241fb3cf
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3faf27d74799dd50
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fef2f8c2966dd61
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fb93c0cd5d79dd0
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe8adfad9a2a8ad
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fe1bf635aef470b
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fce6d9b33b9b8ec
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fc505a629c357d8
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fecff1a2e0c6f4e
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fd64c4cfcf68c4c
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fe0256550f4c643
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3fce3ca21efd83b4
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3febb349c1b9229f
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
.dword 0x3fea9b3576cfffac
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_8:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_9:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_10:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_11:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_12:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
