
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 11:53:35 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fadd.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.d instruction of the RISC-V FD extension for the fadd_b12 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fadd_b12)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rs2 == rd, rs1==f0, rs2==f0, rd==f0, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f0; op2:f0; dest:f0; op1val:0xffeb0580f98a7dbd; op2val:0xffeb0580f98a7dbd; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f0, f0, f0, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs2 == rd != rs1, rs1==f3, rs2==f8, rd==f8, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x39beb50761e3d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f3; op2:f8; dest:f8; op1val:0xffe39beb50761e3d; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f8, f3, f8, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_2:
// rs1 == rd != rs2, rs1==f25, rs2==f6, rd==f25, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x962eb496df1c1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc05b7f6ba0d90 and rm_val == 0  
// opcode: fadd.d ; op1:f25; op2:f6; dest:f25; op1val:0xffe962eb496df1c1; op2val:0x7fec05b7f6ba0d90; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f25, f25, f6, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_3:
// rs1 == rs2 != rd, rs1==f7, rs2==f7, rd==f13, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f7; op2:f7; dest:f13; op1val:0xffefe1581ecd07ea; op2val:0xffefe1581ecd07ea; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f13, f7, f7, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f24, rs2==f30, rd==f27, fs1 == 1 and fe1 == 0x7fd and fm1 == 0xcd606a3f0f54d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f24; op2:f30; dest:f27; op1val:0xffdcd606a3f0f54d; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f27, f24, f30, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_5:
// rs1==f19, rs2==f4, rd==f28, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xe64794dad7d48 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f19; op2:f4; dest:f28; op1val:0xffee64794dad7d48; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f28, f19, f4, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6:
// rs1==f16, rs2==f27, rd==f5, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xca428c2b7c81f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f16; op2:f27; dest:f5; op1val:0xffeca428c2b7c81f; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f5, f16, f27, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_7:
// rs1==f13, rs2==f21, rd==f17, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9f8dcc4f1275c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f13; op2:f21; dest:f17; op1val:0xffe9f8dcc4f1275c; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f17, f13, f21, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_8:
// rs1==f4, rs2==f12, rd==f16, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x691ae7e1929e8 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf63ad242f7a0b and rm_val == 0  
// opcode: fadd.d ; op1:f4; op2:f12; dest:f16; op1val:0xffe691ae7e1929e8; op2val:0x7fef63ad242f7a0b; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f16, f4, f12, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_9:
// rs1==f2, rs2==f16, rd==f22, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x14c9836bbe6ff and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdd2178215e056 and rm_val == 0  
// opcode: fadd.d ; op1:f2; op2:f16; dest:f22; op1val:0xffe14c9836bbe6ff; op2val:0x7fedd2178215e056; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f22, f2, f16, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_10:
// rs1==f18, rs2==f5, rd==f21, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xcbdd58ecc1b45 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f18; op2:f5; dest:f21; op1val:0xffecbdd58ecc1b45; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f21, f18, f5, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_11:
// rs1==f20, rs2==f25, rd==f10, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd8c56582791a6 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f20; op2:f25; dest:f10; op1val:0xffed8c56582791a6; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f10, f20, f25, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_12:
// rs1==f23, rs2==f2, rd==f24, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x83e4a9485598d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f23; op2:f2; dest:f24; op1val:0xffe83e4a9485598d; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f24, f23, f2, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_13:
// rs1==f10, rs2==f19, rd==f18, fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe7f7bd88d7c8f and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x21f9542fdc1b0 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f19; dest:f18; op1val:0xffde7f7bd88d7c8f; op2val:0x7fe21f9542fdc1b0; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f18, f10, f19, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_14:
// rs1==f29, rs2==f15, rd==f30, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x39bd67fecd9d5 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f29; op2:f15; dest:f30; op1val:0xffe39bd67fecd9d5; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f30, f29, f15, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_15:
// rs1==f30, rs2==f31, rd==f29, fs1 == 1 and fe1 == 0x7fc and fm1 == 0x83df99d24bacb and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x8125d36d5e46f and rm_val == 0  
// opcode: fadd.d ; op1:f30; op2:f31; dest:f29; op1val:0xffc83df99d24bacb; op2val:0x7fd8125d36d5e46f; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f29, f30, f31, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_16:
// rs1==f1, rs2==f10, rd==f15, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x26bbbacf7eaef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbb61cc5b43304 and rm_val == 0  
// opcode: fadd.d ; op1:f1; op2:f10; dest:f15; op1val:0xffe26bbbacf7eaef; op2val:0x7febb61cc5b43304; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f15, f1, f10, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_17:
// rs1==f22, rs2==f26, rd==f6, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x314c82f3115df and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf65e46475bdcb and rm_val == 0  
// opcode: fadd.d ; op1:f22; op2:f26; dest:f6; op1val:0xffe314c82f3115df; op2val:0x7fef65e46475bdcb; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f6, f22, f26, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_18:
// rs1==f6, rs2==f20, rd==f26, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x2cdc24d268f9f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f6; op2:f20; dest:f26; op1val:0xffe2cdc24d268f9f; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f26, f6, f20, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_19:
// rs1==f5, rs2==f13, rd==f19, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xed7c3ef329d04 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f5; op2:f13; dest:f19; op1val:0xffeed7c3ef329d04; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f19, f5, f13, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_20:
// rs1==f17, rs2==f9, rd==f12, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xa101ccfb0623a and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f17; op2:f9; dest:f12; op1val:0xffea101ccfb0623a; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f17, f9, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_21:
// rs1==f12, rs2==f3, rd==f20, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x69c26ac7fce60 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f12; op2:f3; dest:f20; op1val:0xffe69c26ac7fce60; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f20, f12, f3, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_22:
// rs1==f14, rs2==f1, rd==f9, fs1 == 1 and fe1 == 0x7fb and fm1 == 0xbeb3709a573b7 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x52162165ec222 and rm_val == 0  
// opcode: fadd.d ; op1:f14; op2:f1; dest:f9; op1val:0xffbbeb3709a573b7; op2val:0x7fe52162165ec222; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f9, f14, f1, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_23:
// rs1==f27, rs2==f18, rd==f23, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x0410cbbfdec45 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f27; op2:f18; dest:f23; op1val:0xffe0410cbbfdec45; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f23, f27, f18, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_24:
// rs1==f8, rs2==f23, rd==f4, fs1 == 1 and fe1 == 0x7fb and fm1 == 0x49818dfc8788f and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x9a1cc86f24be5 and rm_val == 0  
// opcode: fadd.d ; op1:f8; op2:f23; dest:f4; op1val:0xffb49818dfc8788f; op2val:0x7fd9a1cc86f24be5; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f4, f8, f23, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_25:
// rs1==f9, rs2==f24, rd==f11, fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9b3a56e2c058e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f9; op2:f24; dest:f11; op1val:0xffe9b3a56e2c058e; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f11, f9, f24, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_26:
// rs1==f26, rs2==f29, rd==f31, fs1 == 1 and fe1 == 0x7fc and fm1 == 0xe8af77cda8053 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f26; op2:f29; dest:f31; op1val:0xffce8af77cda8053; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f31, f26, f29, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_27:
// rs1==f15, rs2==f22, rd==f2, fs1 == 1 and fe1 == 0x7fc and fm1 == 0x874e2eeac1c13 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x84645048e0d5c and rm_val == 0  
// opcode: fadd.d ; op1:f15; op2:f22; dest:f2; op1val:0xffc874e2eeac1c13; op2val:0x7fe84645048e0d5c; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f2, f15, f22, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_28:
// rs1==f21, rs2==f28, rd==f3, fs1 == 1 and fe1 == 0x7fd and fm1 == 0x4d025f5a10f55 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f21; op2:f28; dest:f3; op1val:0xffd4d025f5a10f55; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f3, f21, f28, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_29:
// rs1==f31, rs2==f11, rd==f14, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xbc366e555215f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f31; op2:f11; dest:f14; op1val:0xffebc366e555215f; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f14, f31, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_30:
// rs1==f11, rs2==f14, rd==f1, fs1 == 1 and fe1 == 0x7f5 and fm1 == 0x2b954e52a4bff and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfa980f38509ed and rm_val == 0  
// opcode: fadd.d ; op1:f11; op2:f14; dest:f1; op1val:0xff52b954e52a4bff; op2val:0x7fdfa980f38509ed; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f1, f11, f14, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_31:
// rs1==f28, rs2==f17, rd==f7, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xa65214b23e38e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f28; op2:f17; dest:f7; op1val:0xffea65214b23e38e; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f7, f28, f17, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_32:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x707d21f5c40de and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffe707d21f5c40de; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_33:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x18ef1d7a9fa74 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x201f96c097d1c and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffe18ef1d7a9fa74; op2val:0x7fe201f96c097d1c; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_34:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0x0abe7f07f8c6f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffd0abe7f07f8c6f; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_35:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe8754038aa2cf and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffde8754038aa2cf; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_36:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd3762f4d1629c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffed3762f4d1629c; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_37:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xbc978aa879221 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffdbc978aa879221; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_38:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe3796147a7f97 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x254bcc7a78811 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffde3796147a7f97; op2val:0x7fe254bcc7a78811; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_39:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xcc3488366e29b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffecc3488366e29b; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_40:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0x3d97530ca446d and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffd3d97530ca446d; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_41:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x9ed4cb2685903 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffe9ed4cb2685903; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_42:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd1ca42e21585b and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffed1ca42e21585b; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_43:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x3c9adc7329695 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xbcdd3a7258aa7 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffe3c9adc7329695; op2val:0x7febcdd3a7258aa7; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_44:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0x209a1991e3307 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffd209a1991e3307; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_45:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xd0f42c0dfaf72 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffed0f42c0dfaf72; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_46:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xe809082dd48fb and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffde809082dd48fb; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_47:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x914e0c751c4f4 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffe914e0c751c4f4; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_48:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0x05c5ccdf19706 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xd51953d9ddca4 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffe05c5ccdf19706; op2val:0x7fed51953d9ddca4; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_49:
// fs1 == 1 and fe1 == 0x7fd and fm1 == 0xaeaa51052e977 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x5be5e5006178e and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffdaeaa51052e977; op2val:0x7fe5be5e5006178e; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_50:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xb0580f98a7dbd and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffeb0580f98a7dbd; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_51:
// fs1 == 1 and fe1 == 0x7fe and fm1 == 0xfe1581ecd07ea and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and rm_val == 0  
// opcode: fadd.d ; op1:f10; op2:f11; dest:f12; op1val:0xffefe1581ecd07ea; op2val:0x7ff0000000000000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fadd.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0xffeb0580f98a7dbd
.dword 0xffeb0580f98a7dbd
.dword 0xffe39beb50761e3d
.dword 0x7ff0000000000000
.dword 0xffe962eb496df1c1
.dword 0x7fec05b7f6ba0d90
.dword 0xffefe1581ecd07ea
.dword 0xffefe1581ecd07ea
.dword 0xffdcd606a3f0f54d
.dword 0x7ff0000000000000
.dword 0xffee64794dad7d48
.dword 0x7ff0000000000000
.dword 0xffeca428c2b7c81f
.dword 0x7ff0000000000000
.dword 0xffe9f8dcc4f1275c
.dword 0x7ff0000000000000
.dword 0xffe691ae7e1929e8
.dword 0x7fef63ad242f7a0b
.dword 0xffe14c9836bbe6ff
.dword 0x7fedd2178215e056
.dword 0xffecbdd58ecc1b45
.dword 0x7ff0000000000000
.dword 0xffed8c56582791a6
.dword 0x7ff0000000000000
.dword 0xffe83e4a9485598d
.dword 0x7ff0000000000000
.dword 0xffde7f7bd88d7c8f
.dword 0x7fe21f9542fdc1b0
.dword 0xffe39bd67fecd9d5
.dword 0x7ff0000000000000
.dword 0xffc83df99d24bacb
.dword 0x7fd8125d36d5e46f
.dword 0xffe26bbbacf7eaef
.dword 0x7febb61cc5b43304
.dword 0xffe314c82f3115df
.dword 0x7fef65e46475bdcb
.dword 0xffe2cdc24d268f9f
.dword 0x7ff0000000000000
.dword 0xffeed7c3ef329d04
.dword 0x7ff0000000000000
.dword 0xffea101ccfb0623a
.dword 0x7ff0000000000000
.dword 0xffe69c26ac7fce60
.dword 0x7ff0000000000000
.dword 0xffbbeb3709a573b7
.dword 0x7fe52162165ec222
.dword 0xffe0410cbbfdec45
.dword 0x7ff0000000000000
.dword 0xffb49818dfc8788f
.dword 0x7fd9a1cc86f24be5
.dword 0xffe9b3a56e2c058e
.dword 0x7ff0000000000000
.dword 0xffce8af77cda8053
.dword 0x7ff0000000000000
.dword 0xffc874e2eeac1c13
.dword 0x7fe84645048e0d5c
.dword 0xffd4d025f5a10f55
.dword 0x7ff0000000000000
.dword 0xffebc366e555215f
.dword 0x7ff0000000000000
.dword 0xff52b954e52a4bff
.dword 0x7fdfa980f38509ed
.dword 0xffea65214b23e38e
.dword 0x7ff0000000000000
.dword 0xffe707d21f5c40de
.dword 0x7ff0000000000000
.dword 0xffe18ef1d7a9fa74
.dword 0x7fe201f96c097d1c
.dword 0xffd0abe7f07f8c6f
.dword 0x7ff0000000000000
.dword 0xffde8754038aa2cf
.dword 0x7ff0000000000000
.dword 0xffed3762f4d1629c
.dword 0x7ff0000000000000
.dword 0xffdbc978aa879221
.dword 0x7ff0000000000000
.dword 0xffde3796147a7f97
.dword 0x7fe254bcc7a78811
.dword 0xffecc3488366e29b
.dword 0x7ff0000000000000
.dword 0xffd3d97530ca446d
.dword 0x7ff0000000000000
.dword 0xffe9ed4cb2685903
.dword 0x7ff0000000000000
.dword 0xffed1ca42e21585b
.dword 0x7ff0000000000000
.dword 0xffe3c9adc7329695
.dword 0x7febcdd3a7258aa7
.dword 0xffd209a1991e3307
.dword 0x7ff0000000000000
.dword 0xffed0f42c0dfaf72
.dword 0x7ff0000000000000
.dword 0xffde809082dd48fb
.dword 0x7ff0000000000000
.dword 0xffe914e0c751c4f4
.dword 0x7ff0000000000000
.dword 0xffe05c5ccdf19706
.dword 0x7fed51953d9ddca4
.dword 0xffdaeaa51052e977
.dword 0x7fe5be5e5006178e
.dword 0xffeb0580f98a7dbd
.dword 0x7ff0000000000000
.dword 0xffefe1581ecd07ea
.dword 0x7ff0000000000000
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 104*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
