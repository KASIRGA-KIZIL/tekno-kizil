
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 13:40:06 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fsqrt.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.d instruction of the RISC-V FD extension for the fsqrt_b9 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fsqrt_b9)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd, rs1==f24, rd==f24, fs1 == 0 and fe1 == 0x369 and fm1 == 0x6d601ad376ab9 and rm_val == 0  
// opcode: fsqrt.d ; op1:f24; dest:f24; op1val:0x3696d601ad376ab9; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f24, f24, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rd, rs1==f29, rd==f22, fs1 == 0 and fe1 == 0x47f and fm1 == 0xd333333333333 and rm_val == 0  
// opcode: fsqrt.d ; op1:f29; dest:f22; op1val:0x47fd333333333333; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f22, f29, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_2:
// rs1==f2, rd==f19, fs1 == 0 and fe1 == 0x47f and fm1 == 0xccccccccccccc and rm_val == 0  
// opcode: fsqrt.d ; op1:f2; dest:f19; op1val:0x47fccccccccccccc; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f19, f2, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_3:
// rs1==f12, rd==f8, fs1 == 0 and fe1 == 0x47f and fm1 == 0xd6db6db6db6db and rm_val == 0  
// opcode: fsqrt.d ; op1:f12; dest:f8; op1val:0x47fd6db6db6db6db; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f8, f12, 0x0, 0, x16, 24, x17, x15, 48, x18)

inst_4:
// rs1==f4, rd==f21, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc924924924924 and rm_val == 0  
// opcode: fsqrt.d ; op1:f4; dest:f21; op1val:0x47fc924924924924; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f21, f4, 0x0, 0, x16, 32, x17, x15, 64, x18)

inst_5:
// rs1==f22, rd==f3, fs1 == 0 and fe1 == 0x47f and fm1 == 0xd111111111111 and rm_val == 0  
// opcode: fsqrt.d ; op1:f22; dest:f3; op1val:0x47fd111111111111; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f3, f22, 0x0, 0, x16, 40, x17, x15, 80, x18)

inst_6:
// rs1==f11, rd==f20, fs1 == 0 and fe1 == 0x47f and fm1 == 0xceeeeeeeeeeee and rm_val == 0  
// opcode: fsqrt.d ; op1:f11; dest:f20; op1val:0x47fceeeeeeeeeeee; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f20, f11, 0x0, 0, x16, 48, x17, x15, 96, x18)

inst_7:
// rs1==f26, rd==f25, fs1 == 0 and fe1 == 0x47f and fm1 == 0xd99999999999a and rm_val == 0  
// opcode: fsqrt.d ; op1:f26; dest:f25; op1val:0x47fd99999999999a; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f25, f26, 0x0, 0, x16, 56, x17, x15, 112, x18)

inst_8:
// rs1==f18, rd==f14, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc666666666666 and rm_val == 0  
// opcode: fsqrt.d ; op1:f18; dest:f14; op1val:0x47fc666666666666; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f14, f18, 0x0, 0, x16, 64, x17, x15, 128, x18)

inst_9:
// rs1==f27, rd==f16, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdb6db6db6db6e and rm_val == 0  
// opcode: fsqrt.d ; op1:f27; dest:f16; op1val:0x47fdb6db6db6db6e; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f16, f27, 0x0, 0, x16, 72, x17, x15, 144, x18)

inst_10:
// rs1==f10, rd==f12, fs1 == 0 and fe1 == 0x47f and fm1 == 0xcdb6db6db6db6 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f12; op1val:0x47fcdb6db6db6db6; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f12, f10, 0x0, 0, x16, 80, x17, x15, 160, x18)

inst_11:
// rs1==f16, rd==f4, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f16; dest:f4; op1val:0x47fc000000000000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f4, f16, 0x0, 0, x16, 88, x17, x15, 176, x18)

inst_12:
// rs1==f0, rd==f23, fs1 == 0 and fe1 == 0x47f and fm1 == 0xe000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f0; dest:f23; op1val:0x47fe000000000000; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f23, f0, 0x0, 0, x16, 96, x17, x15, 192, x18)

inst_13:
// rs1==f17, rd==f27, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f17; dest:f27; op1val:0x47fdffffffffffff; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f27, f17, 0x0, 0, x16, 104, x17, x15, 208, x18)

inst_14:
// rs1==f21, rd==f1, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000002 and rm_val == 0  
// opcode: fsqrt.d ; op1:f21; dest:f1; op1val:0x47fc000000000002; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f1, f21, 0x0, 0, x16, 112, x17, x15, 224, x18)

inst_15:
// rs1==f1, rd==f15, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffffffe and rm_val == 0  
// opcode: fsqrt.d ; op1:f1; dest:f15; op1val:0x47fdfffffffffffe; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f15, f1, 0x0, 0, x16, 120, x17, x15, 240, x18)

inst_16:
// rs1==f14, rd==f26, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000004 and rm_val == 0  
// opcode: fsqrt.d ; op1:f14; dest:f26; op1val:0x47fc000000000004; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f26, f14, 0x0, 0, x16, 128, x17, x15, 256, x18)

inst_17:
// rs1==f19, rd==f29, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffffffc and rm_val == 0  
// opcode: fsqrt.d ; op1:f19; dest:f29; op1val:0x47fdfffffffffffc; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f29, f19, 0x0, 0, x16, 136, x17, x15, 272, x18)

inst_18:
// rs1==f13, rd==f0, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000008 and rm_val == 0  
// opcode: fsqrt.d ; op1:f13; dest:f0; op1val:0x47fc000000000008; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f0, f13, 0x0, 0, x16, 144, x17, x15, 288, x18)

inst_19:
// rs1==f3, rd==f13, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffffff8 and rm_val == 0  
// opcode: fsqrt.d ; op1:f3; dest:f13; op1val:0x47fdfffffffffff8; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f13, f3, 0x0, 0, x16, 152, x17, x15, 304, x18)

inst_20:
// rs1==f28, rd==f7, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000010 and rm_val == 0  
// opcode: fsqrt.d ; op1:f28; dest:f7; op1val:0x47fc000000000010; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f7, f28, 0x0, 0, x16, 160, x17, x15, 320, x18)

inst_21:
// rs1==f15, rd==f18, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffffff0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f15; dest:f18; op1val:0x47fdfffffffffff0; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f18, f15, 0x0, 0, x16, 168, x17, x15, 336, x18)

inst_22:
// rs1==f25, rd==f6, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000020 and rm_val == 0  
// opcode: fsqrt.d ; op1:f25; dest:f6; op1val:0x47fc000000000020; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f6, f25, 0x0, 0, x16, 176, x17, x15, 352, x18)

inst_23:
// rs1==f30, rd==f2, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffffffe0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f30; dest:f2; op1val:0x47fdffffffffffe0; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f2, f30, 0x0, 0, x16, 184, x17, x15, 368, x18)

inst_24:
// rs1==f8, rd==f5, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000040 and rm_val == 0  
// opcode: fsqrt.d ; op1:f8; dest:f5; op1val:0x47fc000000000040; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f5, f8, 0x0, 0, x16, 192, x17, x15, 384, x18)

inst_25:
// rs1==f31, rd==f28, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffffffc0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f31; dest:f28; op1val:0x47fdffffffffffc0; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f28, f31, 0x0, 0, x16, 200, x17, x15, 400, x18)

inst_26:
// rs1==f23, rd==f10, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000080 and rm_val == 0  
// opcode: fsqrt.d ; op1:f23; dest:f10; op1val:0x47fc000000000080; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f10, f23, 0x0, 0, x16, 208, x17, x15, 416, x18)

inst_27:
// rs1==f6, rd==f17, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffffff80 and rm_val == 0  
// opcode: fsqrt.d ; op1:f6; dest:f17; op1val:0x47fdffffffffff80; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f17, f6, 0x0, 0, x16, 216, x17, x15, 432, x18)

inst_28:
// rs1==f20, rd==f30, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000100 and rm_val == 0  
// opcode: fsqrt.d ; op1:f20; dest:f30; op1val:0x47fc000000000100; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f30, f20, 0x0, 0, x16, 224, x17, x15, 448, x18)

inst_29:
// rs1==f7, rd==f11, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffffff00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f7; dest:f11; op1val:0x47fdffffffffff00; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f7, 0x0, 0, x16, 232, x17, x15, 464, x18)

inst_30:
// rs1==f9, rd==f31, fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000200 and rm_val == 0  
// opcode: fsqrt.d ; op1:f9; dest:f31; op1val:0x47fc000000000200; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f31, f9, 0x0, 0, x16, 240, x17, x15, 480, x18)

inst_31:
// rs1==f5, rd==f9, fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffffe00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f5; dest:f9; op1val:0x47fdfffffffffe00; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f9, f5, 0x0, 0, x16, 248, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000400 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000000400; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 256, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffffc00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffffffc00; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 264, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000000800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000000800; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 272, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffff800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffffff800; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 280, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000001000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000001000; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 288, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffff000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffffff000; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 296, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000002000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000002000; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 304, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffffe000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffffffe000; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 312, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000004000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000004000; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 320, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffffc000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffffffc000; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 328, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000008000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000008000; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 336, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffff8000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffffff8000; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 344, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000010000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000010000; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 352, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffff0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffffff0000; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 360, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000020000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000020000; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 368, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffe0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffffe0000; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 376, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000040000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000040000; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 384, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffffc0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffffc0000; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 392, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000080000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000080000; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 400, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffff80000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffff80000; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 408, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000100000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000100000; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 416, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffff00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffff00000; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 424, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000200000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000200000; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 432, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffe00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffffe00000; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 440, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000400000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000400000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 448, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffffc00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffffc00000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 456, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000000800000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000000800000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 464, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffff800000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffff800000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 472, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000001000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000001000000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 480, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffff000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffff000000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 488, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000002000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000002000000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 496, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffe000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffe000000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 504, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000004000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000004000000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 512, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffffc000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffffc000000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 520, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000008000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000008000000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 528, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffff8000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffff8000000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 536, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000010000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000010000000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 544, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffff0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffff0000000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 552, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000020000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000020000000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 560, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffe0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffe0000000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 568, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000040000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000040000000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 576, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffffc0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffffc0000000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 584, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000080000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000080000000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 592, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffff80000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffff80000000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 600, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000100000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000100000000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 608, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffff00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffff00000000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 616, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000200000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000200000000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 624, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffe00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffe00000000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 632, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000400000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000400000000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 640, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfffc00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfffc00000000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 648, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc000800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc000800000000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 656, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfff800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfff800000000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 664, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc001000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc001000000000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 672, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfff000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfff000000000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 680, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc002000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc002000000000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 688, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffe000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffe000000000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 696, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc004000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc004000000000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 704, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdffc000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdffc000000000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 712, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc008000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc008000000000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 720, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdff8000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdff8000000000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 728, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc010000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc010000000000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 736, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdff0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdff0000000000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 744, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc020000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc020000000000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 752, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfe0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfe0000000000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 760, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc040000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc040000000000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 768, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdfc0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdfc0000000000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 776, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc080000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc080000000000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 784, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdf80000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdf80000000000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 792, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc100000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc100000000000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 800, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdf00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdf00000000000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 808, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc200000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc200000000000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 816, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xde00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fde00000000000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 824, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc400000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc400000000000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 832, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xdc00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fdc00000000000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 840, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xc800000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fc800000000000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 848, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xd800000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fd800000000000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 856, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x47f and fm1 == 0xd000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x47fd000000000000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 864, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000000001 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000000001; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 872, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000000000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 880, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffffffe and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffffffe; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 888, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000000003 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000000003; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 896, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffffffc and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffffffc; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 904, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000000007 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000000007; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 912, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffffff8 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffffff8; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 920, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000000000f and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000000000f; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 928, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffffff0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffffff0; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 936, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000000001f and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000000001f; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 944, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffffffe0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffffffe0; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 952, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000000003f and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000000003f; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 960, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffffffc0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffffffc0; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 968, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000000007f and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000000007f; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 976, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffffff80 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffffff80; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 984, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000000000ff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000000000ff; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 992, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffffff00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffffff00; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000000001ff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000000001ff; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1008, x17, x15, 2016, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffffe00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffffe00; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1016, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000000003ff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000000003ff; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1024, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffffc00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffffc00; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1032, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000000007ff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000000007ff; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1040, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffff800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffff800; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1048, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000000fff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000000fff; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1056, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffff000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffff000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1064, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000001fff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000001fff; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1072, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffffe000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffffe000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1080, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000003fff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000003fff; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1088, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffffc000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffffc000; valaddr_reg:x16; val_offset:1096; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1096, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000007fff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000007fff; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1104, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffff8000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffff8000; valaddr_reg:x16; val_offset:1112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1112, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000000ffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000000ffff; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1120, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffff0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffff0000; valaddr_reg:x16; val_offset:1128; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1128, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000001ffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000001ffff; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1136, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffe0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffe0000; valaddr_reg:x16; val_offset:1144; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1144, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000003ffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000003ffff; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1152, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffffc0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffffc0000; valaddr_reg:x16; val_offset:1160; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1160, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000007ffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000007ffff; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1168, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffff80000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffff80000; valaddr_reg:x16; val_offset:1176; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1176, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000000fffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000000fffff; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1184, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffff00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffff00000; valaddr_reg:x16; val_offset:1192; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1192, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000001fffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000001fffff; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1200, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffe00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffe00000; valaddr_reg:x16; val_offset:1208; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1208, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000003fffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000003fffff; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1216, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffc00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffc00000; valaddr_reg:x16; val_offset:1224; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1224, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000007fffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000007fffff; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1232, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffff800000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffff800000; valaddr_reg:x16; val_offset:1240; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1240, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000000ffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000000ffffff; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1248, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffff000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffff000000; valaddr_reg:x16; val_offset:1256; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1256, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000001ffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000001ffffff; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1264, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffe000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffe000000; valaddr_reg:x16; val_offset:1272; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1272, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000003ffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000003ffffff; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1280, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffffc000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffffc000000; valaddr_reg:x16; val_offset:1288; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1288, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000007ffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000007ffffff; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1296, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffff8000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffff8000000; valaddr_reg:x16; val_offset:1304; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1304, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000000fffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000000fffffff; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1312, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffff0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffff0000000; valaddr_reg:x16; val_offset:1320; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1320, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000001fffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000001fffffff; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1328, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffe0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffe0000000; valaddr_reg:x16; val_offset:1336; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1336, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000003fffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000003fffffff; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1344, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffc0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffc0000000; valaddr_reg:x16; val_offset:1352; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1352, x17, x15, 672, x18)

inst_170:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000007fffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000007fffffff; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1360, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffff80000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffff80000000; valaddr_reg:x16; val_offset:1368; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1368, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00000ffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00000ffffffff; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1376, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffff00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffff00000000; valaddr_reg:x16; val_offset:1384; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1384, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00001ffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00001ffffffff; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1392, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffe00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffe00000000; valaddr_reg:x16; val_offset:1400; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1400, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00003ffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00003ffffffff; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1408, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffffc00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effffc00000000; valaddr_reg:x16; val_offset:1416; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1416, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00007ffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00007ffffffff; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1424, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffff800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effff800000000; valaddr_reg:x16; val_offset:1432; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1432, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0000fffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0000fffffffff; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1440, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffff000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effff000000000; valaddr_reg:x16; val_offset:1448; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1448, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0001fffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0001fffffffff; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1456, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffe000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffe000000000; valaddr_reg:x16; val_offset:1464; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1464, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0003fffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0003fffffffff; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1472, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffc000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffc000000000; valaddr_reg:x16; val_offset:1480; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1480, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0007fffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0007fffffffff; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1488, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfff8000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efff8000000000; valaddr_reg:x16; val_offset:1496; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1496, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x000ffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e000ffffffffff; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1504, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfff0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efff0000000000; valaddr_reg:x16; val_offset:1512; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1512, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x001ffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e001ffffffffff; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1520, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffe0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effe0000000000; valaddr_reg:x16; val_offset:1528; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1528, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x003ffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e003ffffffffff; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1536, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xffc0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37effc0000000000; valaddr_reg:x16; val_offset:1544; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1544, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x007ffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e007ffffffffff; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1552, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xff80000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37eff80000000000; valaddr_reg:x16; val_offset:1560; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1560, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x00fffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e00fffffffffff; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1568, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xff00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37eff00000000000; valaddr_reg:x16; val_offset:1576; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1576, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x01fffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e01fffffffffff; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1584, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfe00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efe00000000000; valaddr_reg:x16; val_offset:1592; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1592, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x03fffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e03fffffffffff; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1600, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfc00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efc00000000000; valaddr_reg:x16; val_offset:1608; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1608, x17, x15, 1184, x18)

inst_202:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x07fffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e07fffffffffff; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1616, x17, x15, 1200, x18)

inst_203:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xf800000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37ef800000000000; valaddr_reg:x16; val_offset:1624; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1624, x17, x15, 1216, x18)

inst_204:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x0ffffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e0ffffffffffff; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1632, x17, x15, 1232, x18)

inst_205:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xf000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37ef000000000000; valaddr_reg:x16; val_offset:1640; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1640, x17, x15, 1248, x18)

inst_206:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x1ffffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e1ffffffffffff; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1648, x17, x15, 1264, x18)

inst_207:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xe000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37ee000000000000; valaddr_reg:x16; val_offset:1656; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1656, x17, x15, 1280, x18)

inst_208:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x3ffffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e3ffffffffffff; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1664, x17, x15, 1296, x18)

inst_209:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xc000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37ec000000000000; valaddr_reg:x16; val_offset:1672; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1672, x17, x15, 1312, x18)

inst_210:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x7ffffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e7ffffffffffff; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1680, x17, x15, 1328, x18)

inst_211:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0x8000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37e8000000000000; valaddr_reg:x16; val_offset:1688; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1688, x17, x15, 1344, x18)

inst_212:
// fs1 == 0 and fe1 == 0x37e and fm1 == 0xfffffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37efffffffffffff; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1696, x17, x15, 1360, x18)

inst_213:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffffffc and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffffffc; valaddr_reg:x16; val_offset:1704; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1704, x17, x15, 1376, x18)

inst_214:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffffff8 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffffff8; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1712, x17, x15, 1392, x18)

inst_215:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffffff0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffffff0; valaddr_reg:x16; val_offset:1720; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1720, x17, x15, 1408, x18)

inst_216:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffffffe0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffffffe0; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1728, x17, x15, 1424, x18)

inst_217:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffffffc0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffffffc0; valaddr_reg:x16; val_offset:1736; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1736, x17, x15, 1440, x18)

inst_218:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffffff80 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffffff80; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1744, x17, x15, 1456, x18)

inst_219:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffffff00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffffff00; valaddr_reg:x16; val_offset:1752; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1752, x17, x15, 1472, x18)

inst_220:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffffe00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffffe00; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1760, x17, x15, 1488, x18)

inst_221:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffffc00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffffc00; valaddr_reg:x16; val_offset:1768; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1768, x17, x15, 1504, x18)

inst_222:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffff800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffff800; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1776, x17, x15, 1520, x18)

inst_223:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffff000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffff000; valaddr_reg:x16; val_offset:1784; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1784, x17, x15, 1536, x18)

inst_224:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffffe000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffffe000; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1792, x17, x15, 1552, x18)

inst_225:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffffc000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffffc000; valaddr_reg:x16; val_offset:1800; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1800, x17, x15, 1568, x18)

inst_226:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffff8000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffff8000; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1808, x17, x15, 1584, x18)

inst_227:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffff0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffff0000; valaddr_reg:x16; val_offset:1816; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1816, x17, x15, 1600, x18)

inst_228:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffe0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffe0000; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1824, x17, x15, 1616, x18)

inst_229:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffc0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffc0000; valaddr_reg:x16; val_offset:1832; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1832, x17, x15, 1632, x18)

inst_230:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffff80000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffff80000; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1840, x17, x15, 1648, x18)

inst_231:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffff00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffff00000; valaddr_reg:x16; val_offset:1848; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1848, x17, x15, 1664, x18)

inst_232:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffe00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffe00000; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1856, x17, x15, 1680, x18)

inst_233:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffffc00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffffc00000; valaddr_reg:x16; val_offset:1864; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1864, x17, x15, 1696, x18)

inst_234:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffff800000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffff800000; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1872, x17, x15, 1712, x18)

inst_235:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffff000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffff000000; valaddr_reg:x16; val_offset:1880; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1880, x17, x15, 1728, x18)

inst_236:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffe000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffe000000; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1888, x17, x15, 1744, x18)

inst_237:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffc000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffc000000; valaddr_reg:x16; val_offset:1896; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1896, x17, x15, 1760, x18)

inst_238:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffff8000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffff8000000; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1904, x17, x15, 1776, x18)

inst_239:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffff0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffff0000000; valaddr_reg:x16; val_offset:1912; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1912, x17, x15, 1792, x18)

inst_240:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffe0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffe0000000; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1920, x17, x15, 1808, x18)

inst_241:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffffc0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffffc0000000; valaddr_reg:x16; val_offset:1928; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1928, x17, x15, 1824, x18)

inst_242:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffff80000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffff80000000; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1936, x17, x15, 1840, x18)

inst_243:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffff00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffff00000000; valaddr_reg:x16; val_offset:1944; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1944, x17, x15, 1856, x18)

inst_244:
// fs1 == 0 and fe1 == 0x369 and fm1 == 0xfffffffe00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x369fffffffe00000; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1952, x17, x15, 1872, x18)

inst_245:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffe00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffe00000000; valaddr_reg:x16; val_offset:1960; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1960, x17, x15, 1888, x18)

inst_246:
// fs1 == 0 and fe1 == 0x36a and fm1 == 0xffffffff00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36affffffff00000; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1968, x17, x15, 1904, x18)

inst_247:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffc00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffc00000000; valaddr_reg:x16; val_offset:1976; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1976, x17, x15, 1920, x18)

inst_248:
// fs1 == 0 and fe1 == 0x36b and fm1 == 0xffffffff80000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36bffffffff80000; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1984, x17, x15, 1936, x18)

inst_249:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffff800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffff800000000; valaddr_reg:x16; val_offset:1992; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1992, x17, x15, 1952, x18)

inst_250:
// fs1 == 0 and fe1 == 0x36c and fm1 == 0xffffffffc0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36cffffffffc0000; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 2000, x17, x15, 1968, x18)

inst_251:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffff000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffff000000000; valaddr_reg:x16; val_offset:2008; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 2008, x17, x15, 1984, x18)

inst_252:
// fs1 == 0 and fe1 == 0x36d and fm1 == 0xffffffffe0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36dffffffffe0000; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 2016, x17, x15, 2000, x18)

inst_253:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffe000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffe000000000; valaddr_reg:x16; val_offset:2024; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 2024, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_254:
// fs1 == 0 and fe1 == 0x36e and fm1 == 0xfffffffff0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36efffffffff0000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfffc000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfffc000000000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_256:
// fs1 == 0 and fe1 == 0x36f and fm1 == 0xfffffffff8000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36ffffffffff8000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_257:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfff8000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfff8000000000; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 24, x17, x15, 48, x18)

inst_258:
// fs1 == 0 and fe1 == 0x370 and fm1 == 0xfffffffffc000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x370fffffffffc000; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 32, x17, x15, 64, x18)

inst_259:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfff0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfff0000000000; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 40, x17, x15, 80, x18)

inst_260:
// fs1 == 0 and fe1 == 0x371 and fm1 == 0xfffffffffe000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x371fffffffffe000; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 48, x17, x15, 96, x18)

inst_261:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffe0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffe0000000000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 56, x17, x15, 112, x18)

inst_262:
// fs1 == 0 and fe1 == 0x372 and fm1 == 0xffffffffff000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x372ffffffffff000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 64, x17, x15, 128, x18)

inst_263:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffc0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffc0000000000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 72, x17, x15, 144, x18)

inst_264:
// fs1 == 0 and fe1 == 0x373 and fm1 == 0xffffffffff800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x373ffffffffff800; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 80, x17, x15, 160, x18)

inst_265:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xff80000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dff80000000000; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 88, x17, x15, 176, x18)

inst_266:
// fs1 == 0 and fe1 == 0x374 and fm1 == 0xffffffffffc00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x374ffffffffffc00; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 96, x17, x15, 192, x18)

inst_267:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xff00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dff00000000000; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 104, x17, x15, 208, x18)

inst_268:
// fs1 == 0 and fe1 == 0x375 and fm1 == 0xffffffffffe00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x375ffffffffffe00; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 112, x17, x15, 224, x18)

inst_269:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfe00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfe00000000000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 120, x17, x15, 240, x18)

inst_270:
// fs1 == 0 and fe1 == 0x376 and fm1 == 0xfffffffffff00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x376fffffffffff00; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 128, x17, x15, 256, x18)

inst_271:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xfc00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dfc00000000000; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 136, x17, x15, 272, x18)

inst_272:
// fs1 == 0 and fe1 == 0x377 and fm1 == 0xfffffffffff80 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x377fffffffffff80; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 144, x17, x15, 288, x18)

inst_273:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xf800000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37df800000000000; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 152, x17, x15, 304, x18)

inst_274:
// fs1 == 0 and fe1 == 0x378 and fm1 == 0xfffffffffffc0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x378fffffffffffc0; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 160, x17, x15, 320, x18)

inst_275:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xf000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37df000000000000; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 168, x17, x15, 336, x18)

inst_276:
// fs1 == 0 and fe1 == 0x379 and fm1 == 0xfffffffffffe0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x379fffffffffffe0; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 176, x17, x15, 352, x18)

inst_277:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xe000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37de000000000000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 184, x17, x15, 368, x18)

inst_278:
// fs1 == 0 and fe1 == 0x37a and fm1 == 0xffffffffffff0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37affffffffffff0; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 192, x17, x15, 384, x18)

inst_279:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xc000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dc000000000000; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 200, x17, x15, 400, x18)

inst_280:
// fs1 == 0 and fe1 == 0x37b and fm1 == 0xffffffffffff8 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37bffffffffffff8; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 208, x17, x15, 416, x18)

inst_281:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0x8000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37d8000000000000; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 216, x17, x15, 432, x18)

inst_282:
// fs1 == 0 and fe1 == 0x37c and fm1 == 0xffffffffffffc and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37cffffffffffffc; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 224, x17, x15, 448, x18)

inst_283:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37d0000000000000; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 232, x17, x15, 464, x18)

inst_284:
// fs1 == 0 and fe1 == 0x37d and fm1 == 0xffffffffffffe and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x37dffffffffffffe; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 240, x17, x15, 480, x18)

inst_285:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000000; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 248, x17, x15, 496, x18)

inst_286:
// fs1 == 0 and fe1 == 0x400 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x4000000000000000; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 256, x17, x15, 512, x18)

inst_287:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffffffff and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffffffff; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 264, x17, x15, 528, x18)

inst_288:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000002 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000002; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 272, x17, x15, 544, x18)

inst_289:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffffffe and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffffffe; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 280, x17, x15, 560, x18)

inst_290:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000004 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000004; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 288, x17, x15, 576, x18)

inst_291:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffffffc and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffffffc; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 296, x17, x15, 592, x18)

inst_292:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000008 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000008; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 304, x17, x15, 608, x18)

inst_293:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffffff8 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffffff8; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 312, x17, x15, 624, x18)

inst_294:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000010 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000010; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 320, x17, x15, 640, x18)

inst_295:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffffff0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffffff0; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 328, x17, x15, 656, x18)

inst_296:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000020 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000020; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 336, x17, x15, 672, x18)

inst_297:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffffffe0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffffffe0; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 344, x17, x15, 688, x18)

inst_298:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000040 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000040; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 352, x17, x15, 704, x18)

inst_299:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffffffc0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffffffc0; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 360, x17, x15, 720, x18)

inst_300:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000080 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000080; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 368, x17, x15, 736, x18)

inst_301:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffffff80 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffffff80; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 376, x17, x15, 752, x18)

inst_302:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000100 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000100; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 384, x17, x15, 768, x18)

inst_303:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffffff00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffffff00; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 392, x17, x15, 784, x18)

inst_304:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000200 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000200; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 400, x17, x15, 800, x18)

inst_305:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffffe00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffffe00; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 408, x17, x15, 816, x18)

inst_306:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000400 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000400; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 416, x17, x15, 832, x18)

inst_307:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffffc00 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffffc00; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 424, x17, x15, 848, x18)

inst_308:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000000800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000000800; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 432, x17, x15, 864, x18)

inst_309:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffff800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffff800; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 440, x17, x15, 880, x18)

inst_310:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000001000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000001000; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 448, x17, x15, 896, x18)

inst_311:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffff000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffff000; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 456, x17, x15, 912, x18)

inst_312:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000002000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000002000; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 464, x17, x15, 928, x18)

inst_313:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffffe000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffffe000; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 472, x17, x15, 944, x18)

inst_314:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000004000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000004000; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 480, x17, x15, 960, x18)

inst_315:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffffc000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffffc000; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 488, x17, x15, 976, x18)

inst_316:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000008000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000008000; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 496, x17, x15, 992, x18)

inst_317:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffff8000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffff8000; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 504, x17, x15, 1008, x18)

inst_318:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000010000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000010000; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 512, x17, x15, 1024, x18)

inst_319:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffff0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffff0000; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 520, x17, x15, 1040, x18)

inst_320:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000020000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000020000; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 528, x17, x15, 1056, x18)

inst_321:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffe0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffe0000; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 536, x17, x15, 1072, x18)

inst_322:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000040000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000040000; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 544, x17, x15, 1088, x18)

inst_323:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffffc0000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffffc0000; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 552, x17, x15, 1104, x18)

inst_324:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000080000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000080000; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 560, x17, x15, 1120, x18)

inst_325:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffff80000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffff80000; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 568, x17, x15, 1136, x18)

inst_326:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000100000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000100000; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 576, x17, x15, 1152, x18)

inst_327:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffff00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffff00000; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 584, x17, x15, 1168, x18)

inst_328:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000200000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000200000; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 592, x17, x15, 1184, x18)

inst_329:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffe00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffe00000; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 600, x17, x15, 1200, x18)

inst_330:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000400000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000400000; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 608, x17, x15, 1216, x18)

inst_331:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffffc00000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffffc00000; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 616, x17, x15, 1232, x18)

inst_332:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000000800000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000000800000; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 624, x17, x15, 1248, x18)

inst_333:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffff800000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffff800000; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 632, x17, x15, 1264, x18)

inst_334:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000001000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000001000000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 640, x17, x15, 1280, x18)

inst_335:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffff000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffff000000; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 648, x17, x15, 1296, x18)

inst_336:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000002000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000002000000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 656, x17, x15, 1312, x18)

inst_337:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffe000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffe000000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 664, x17, x15, 1328, x18)

inst_338:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000004000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000004000000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 672, x17, x15, 1344, x18)

inst_339:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffffc000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffffc000000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 680, x17, x15, 1360, x18)

inst_340:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000008000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000008000000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 688, x17, x15, 1376, x18)

inst_341:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffff8000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffff8000000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 696, x17, x15, 1392, x18)

inst_342:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000010000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000010000000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 704, x17, x15, 1408, x18)

inst_343:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffff0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffff0000000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 712, x17, x15, 1424, x18)

inst_344:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000020000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000020000000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 720, x17, x15, 1440, x18)

inst_345:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffe0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffe0000000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 728, x17, x15, 1456, x18)

inst_346:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000040000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000040000000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 736, x17, x15, 1472, x18)

inst_347:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffffc0000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffffc0000000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 744, x17, x15, 1488, x18)

inst_348:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000080000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000080000000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 752, x17, x15, 1504, x18)

inst_349:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffff80000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffff80000000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 760, x17, x15, 1520, x18)

inst_350:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000100000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000100000000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 768, x17, x15, 1536, x18)

inst_351:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffff00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffff00000000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 776, x17, x15, 1552, x18)

inst_352:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000200000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000200000000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 784, x17, x15, 1568, x18)

inst_353:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffe00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffe00000000; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 792, x17, x15, 1584, x18)

inst_354:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000400000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000400000000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 800, x17, x15, 1600, x18)

inst_355:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffffc00000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffffc00000000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 808, x17, x15, 1616, x18)

inst_356:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe000800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe000800000000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 816, x17, x15, 1632, x18)

inst_357:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffff800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffff800000000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 824, x17, x15, 1648, x18)

inst_358:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe001000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe001000000000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 832, x17, x15, 1664, x18)

inst_359:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffff000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffff000000000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 840, x17, x15, 1680, x18)

inst_360:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe002000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe002000000000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 848, x17, x15, 1696, x18)

inst_361:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffe000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffe000000000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 856, x17, x15, 1712, x18)

inst_362:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe004000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe004000000000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 864, x17, x15, 1728, x18)

inst_363:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfffc000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffffc000000000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 872, x17, x15, 1744, x18)

inst_364:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe008000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe008000000000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 880, x17, x15, 1760, x18)

inst_365:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfff8000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffff8000000000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 888, x17, x15, 1776, x18)

inst_366:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe010000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe010000000000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 896, x17, x15, 1792, x18)

inst_367:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfff0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffff0000000000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 904, x17, x15, 1808, x18)

inst_368:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe020000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe020000000000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 912, x17, x15, 1824, x18)

inst_369:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffe0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffe0000000000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 920, x17, x15, 1840, x18)

inst_370:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe040000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe040000000000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 928, x17, x15, 1856, x18)

inst_371:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xffc0000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffffc0000000000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 936, x17, x15, 1872, x18)

inst_372:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe080000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe080000000000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 944, x17, x15, 1888, x18)

inst_373:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xff80000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffff80000000000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 952, x17, x15, 1904, x18)

inst_374:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe100000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe100000000000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 960, x17, x15, 1920, x18)

inst_375:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xff00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffff00000000000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 968, x17, x15, 1936, x18)

inst_376:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe200000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe200000000000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 976, x17, x15, 1952, x18)

inst_377:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfe00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffe00000000000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 984, x17, x15, 1968, x18)

inst_378:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe400000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe400000000000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 992, x17, x15, 1984, x18)

inst_379:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xfc00000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fffc00000000000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1000, x17, x15, 2000, x18)

inst_380:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xe800000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3ffe800000000000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1008, x17, x15, 2016, x18)
RVTEST_SIGBASE(x15,signature_x15_4)

inst_381:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xf800000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fff800000000000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1016, x17, x15, 0, x18)

inst_382:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0xf000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fff000000000000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1024, x17, x15, 16, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x3696d601ad376ab9
.dword 0x47fd333333333333
.dword 0x47fccccccccccccc
.dword 0x47fd6db6db6db6db
.dword 0x47fc924924924924
.dword 0x47fd111111111111
.dword 0x47fceeeeeeeeeeee
.dword 0x47fd99999999999a
.dword 0x47fc666666666666
.dword 0x47fdb6db6db6db6e
.dword 0x47fcdb6db6db6db6
.dword 0x47fc000000000000
.dword 0x47fe000000000000
.dword 0x47fdffffffffffff
.dword 0x47fc000000000002
.dword 0x47fdfffffffffffe
.dword 0x47fc000000000004
.dword 0x47fdfffffffffffc
.dword 0x47fc000000000008
.dword 0x47fdfffffffffff8
.dword 0x47fc000000000010
.dword 0x47fdfffffffffff0
.dword 0x47fc000000000020
.dword 0x47fdffffffffffe0
.dword 0x47fc000000000040
.dword 0x47fdffffffffffc0
.dword 0x47fc000000000080
.dword 0x47fdffffffffff80
.dword 0x47fc000000000100
.dword 0x47fdffffffffff00
.dword 0x47fc000000000200
.dword 0x47fdfffffffffe00
.dword 0x47fc000000000400
.dword 0x47fdfffffffffc00
.dword 0x47fc000000000800
.dword 0x47fdfffffffff800
.dword 0x47fc000000001000
.dword 0x47fdfffffffff000
.dword 0x47fc000000002000
.dword 0x47fdffffffffe000
.dword 0x47fc000000004000
.dword 0x47fdffffffffc000
.dword 0x47fc000000008000
.dword 0x47fdffffffff8000
.dword 0x47fc000000010000
.dword 0x47fdffffffff0000
.dword 0x47fc000000020000
.dword 0x47fdfffffffe0000
.dword 0x47fc000000040000
.dword 0x47fdfffffffc0000
.dword 0x47fc000000080000
.dword 0x47fdfffffff80000
.dword 0x47fc000000100000
.dword 0x47fdfffffff00000
.dword 0x47fc000000200000
.dword 0x47fdffffffe00000
.dword 0x47fc000000400000
.dword 0x47fdffffffc00000
.dword 0x47fc000000800000
.dword 0x47fdffffff800000
.dword 0x47fc000001000000
.dword 0x47fdffffff000000
.dword 0x47fc000002000000
.dword 0x47fdfffffe000000
.dword 0x47fc000004000000
.dword 0x47fdfffffc000000
.dword 0x47fc000008000000
.dword 0x47fdfffff8000000
.dword 0x47fc000010000000
.dword 0x47fdfffff0000000
.dword 0x47fc000020000000
.dword 0x47fdffffe0000000
.dword 0x47fc000040000000
.dword 0x47fdffffc0000000
.dword 0x47fc000080000000
.dword 0x47fdffff80000000
.dword 0x47fc000100000000
.dword 0x47fdffff00000000
.dword 0x47fc000200000000
.dword 0x47fdfffe00000000
.dword 0x47fc000400000000
.dword 0x47fdfffc00000000
.dword 0x47fc000800000000
.dword 0x47fdfff800000000
.dword 0x47fc001000000000
.dword 0x47fdfff000000000
.dword 0x47fc002000000000
.dword 0x47fdffe000000000
.dword 0x47fc004000000000
.dword 0x47fdffc000000000
.dword 0x47fc008000000000
.dword 0x47fdff8000000000
.dword 0x47fc010000000000
.dword 0x47fdff0000000000
.dword 0x47fc020000000000
.dword 0x47fdfe0000000000
.dword 0x47fc040000000000
.dword 0x47fdfc0000000000
.dword 0x47fc080000000000
.dword 0x47fdf80000000000
.dword 0x47fc100000000000
.dword 0x47fdf00000000000
.dword 0x47fc200000000000
.dword 0x47fde00000000000
.dword 0x47fc400000000000
.dword 0x47fdc00000000000
.dword 0x47fc800000000000
.dword 0x47fd800000000000
.dword 0x47fd000000000000
.dword 0x37e0000000000001
.dword 0x37e0000000000000
.dword 0x37effffffffffffe
.dword 0x37e0000000000003
.dword 0x37effffffffffffc
.dword 0x37e0000000000007
.dword 0x37effffffffffff8
.dword 0x37e000000000000f
.dword 0x37effffffffffff0
.dword 0x37e000000000001f
.dword 0x37efffffffffffe0
.dword 0x37e000000000003f
.dword 0x37efffffffffffc0
.dword 0x37e000000000007f
.dword 0x37efffffffffff80
.dword 0x37e00000000000ff
.dword 0x37efffffffffff00
.dword 0x37e00000000001ff
.dword 0x37effffffffffe00
.dword 0x37e00000000003ff
.dword 0x37effffffffffc00
.dword 0x37e00000000007ff
.dword 0x37effffffffff800
.dword 0x37e0000000000fff
.dword 0x37effffffffff000
.dword 0x37e0000000001fff
.dword 0x37efffffffffe000
.dword 0x37e0000000003fff
.dword 0x37efffffffffc000
.dword 0x37e0000000007fff
.dword 0x37efffffffff8000
.dword 0x37e000000000ffff
.dword 0x37efffffffff0000
.dword 0x37e000000001ffff
.dword 0x37effffffffe0000
.dword 0x37e000000003ffff
.dword 0x37effffffffc0000
.dword 0x37e000000007ffff
.dword 0x37effffffff80000
.dword 0x37e00000000fffff
.dword 0x37effffffff00000
.dword 0x37e00000001fffff
.dword 0x37efffffffe00000
.dword 0x37e00000003fffff
.dword 0x37efffffffc00000
.dword 0x37e00000007fffff
.dword 0x37efffffff800000
.dword 0x37e0000000ffffff
.dword 0x37efffffff000000
.dword 0x37e0000001ffffff
.dword 0x37effffffe000000
.dword 0x37e0000003ffffff
.dword 0x37effffffc000000
.dword 0x37e0000007ffffff
.dword 0x37effffff8000000
.dword 0x37e000000fffffff
.dword 0x37effffff0000000
.dword 0x37e000001fffffff
.dword 0x37efffffe0000000
.dword 0x37e000003fffffff
.dword 0x37efffffc0000000
.dword 0x37e000007fffffff
.dword 0x37efffff80000000
.dword 0x37e00000ffffffff
.dword 0x37efffff00000000
.dword 0x37e00001ffffffff
.dword 0x37effffe00000000
.dword 0x37e00003ffffffff
.dword 0x37effffc00000000
.dword 0x37e00007ffffffff
.dword 0x37effff800000000
.dword 0x37e0000fffffffff
.dword 0x37effff000000000
.dword 0x37e0001fffffffff
.dword 0x37efffe000000000
.dword 0x37e0003fffffffff
.dword 0x37efffc000000000
.dword 0x37e0007fffffffff
.dword 0x37efff8000000000
.dword 0x37e000ffffffffff
.dword 0x37efff0000000000
.dword 0x37e001ffffffffff
.dword 0x37effe0000000000
.dword 0x37e003ffffffffff
.dword 0x37effc0000000000
.dword 0x37e007ffffffffff
.dword 0x37eff80000000000
.dword 0x37e00fffffffffff
.dword 0x37eff00000000000
.dword 0x37e01fffffffffff
.dword 0x37efe00000000000
.dword 0x37e03fffffffffff
.dword 0x37efc00000000000
.dword 0x37e07fffffffffff
.dword 0x37ef800000000000
.dword 0x37e0ffffffffffff
.dword 0x37ef000000000000
.dword 0x37e1ffffffffffff
.dword 0x37ee000000000000
.dword 0x37e3ffffffffffff
.dword 0x37ec000000000000
.dword 0x37e7ffffffffffff
.dword 0x37e8000000000000
.dword 0x37efffffffffffff
.dword 0x37dffffffffffffc
.dword 0x37dffffffffffff8
.dword 0x37dffffffffffff0
.dword 0x37dfffffffffffe0
.dword 0x37dfffffffffffc0
.dword 0x37dfffffffffff80
.dword 0x37dfffffffffff00
.dword 0x37dffffffffffe00
.dword 0x37dffffffffffc00
.dword 0x37dffffffffff800
.dword 0x37dffffffffff000
.dword 0x37dfffffffffe000
.dword 0x37dfffffffffc000
.dword 0x37dfffffffff8000
.dword 0x37dfffffffff0000
.dword 0x37dffffffffe0000
.dword 0x37dffffffffc0000
.dword 0x37dffffffff80000
.dword 0x37dffffffff00000
.dword 0x37dfffffffe00000
.dword 0x37dfffffffc00000
.dword 0x37dfffffff800000
.dword 0x37dfffffff000000
.dword 0x37dffffffe000000
.dword 0x37dffffffc000000
.dword 0x37dffffff8000000
.dword 0x37dffffff0000000
.dword 0x37dfffffe0000000
.dword 0x37dfffffc0000000
.dword 0x37dfffff80000000
.dword 0x37dfffff00000000
.dword 0x369fffffffe00000
.dword 0x37dffffe00000000
.dword 0x36affffffff00000
.dword 0x37dffffc00000000
.dword 0x36bffffffff80000
.dword 0x37dffff800000000
.dword 0x36cffffffffc0000
.dword 0x37dffff000000000
.dword 0x36dffffffffe0000
.dword 0x37dfffe000000000
.dword 0x36efffffffff0000
.dword 0x37dfffc000000000
.dword 0x36ffffffffff8000
.dword 0x37dfff8000000000
.dword 0x370fffffffffc000
.dword 0x37dfff0000000000
.dword 0x371fffffffffe000
.dword 0x37dffe0000000000
.dword 0x372ffffffffff000
.dword 0x37dffc0000000000
.dword 0x373ffffffffff800
.dword 0x37dff80000000000
.dword 0x374ffffffffffc00
.dword 0x37dff00000000000
.dword 0x375ffffffffffe00
.dword 0x37dfe00000000000
.dword 0x376fffffffffff00
.dword 0x37dfc00000000000
.dword 0x377fffffffffff80
.dword 0x37df800000000000
.dword 0x378fffffffffffc0
.dword 0x37df000000000000
.dword 0x379fffffffffffe0
.dword 0x37de000000000000
.dword 0x37affffffffffff0
.dword 0x37dc000000000000
.dword 0x37bffffffffffff8
.dword 0x37d8000000000000
.dword 0x37cffffffffffffc
.dword 0x37d0000000000000
.dword 0x37dffffffffffffe
.dword 0x3ffe000000000000
.dword 0x4000000000000000
.dword 0x3fffffffffffffff
.dword 0x3ffe000000000002
.dword 0x3ffffffffffffffe
.dword 0x3ffe000000000004
.dword 0x3ffffffffffffffc
.dword 0x3ffe000000000008
.dword 0x3ffffffffffffff8
.dword 0x3ffe000000000010
.dword 0x3ffffffffffffff0
.dword 0x3ffe000000000020
.dword 0x3fffffffffffffe0
.dword 0x3ffe000000000040
.dword 0x3fffffffffffffc0
.dword 0x3ffe000000000080
.dword 0x3fffffffffffff80
.dword 0x3ffe000000000100
.dword 0x3fffffffffffff00
.dword 0x3ffe000000000200
.dword 0x3ffffffffffffe00
.dword 0x3ffe000000000400
.dword 0x3ffffffffffffc00
.dword 0x3ffe000000000800
.dword 0x3ffffffffffff800
.dword 0x3ffe000000001000
.dword 0x3ffffffffffff000
.dword 0x3ffe000000002000
.dword 0x3fffffffffffe000
.dword 0x3ffe000000004000
.dword 0x3fffffffffffc000
.dword 0x3ffe000000008000
.dword 0x3fffffffffff8000
.dword 0x3ffe000000010000
.dword 0x3fffffffffff0000
.dword 0x3ffe000000020000
.dword 0x3ffffffffffe0000
.dword 0x3ffe000000040000
.dword 0x3ffffffffffc0000
.dword 0x3ffe000000080000
.dword 0x3ffffffffff80000
.dword 0x3ffe000000100000
.dword 0x3ffffffffff00000
.dword 0x3ffe000000200000
.dword 0x3fffffffffe00000
.dword 0x3ffe000000400000
.dword 0x3fffffffffc00000
.dword 0x3ffe000000800000
.dword 0x3fffffffff800000
.dword 0x3ffe000001000000
.dword 0x3fffffffff000000
.dword 0x3ffe000002000000
.dword 0x3ffffffffe000000
.dword 0x3ffe000004000000
.dword 0x3ffffffffc000000
.dword 0x3ffe000008000000
.dword 0x3ffffffff8000000
.dword 0x3ffe000010000000
.dword 0x3ffffffff0000000
.dword 0x3ffe000020000000
.dword 0x3fffffffe0000000
.dword 0x3ffe000040000000
.dword 0x3fffffffc0000000
.dword 0x3ffe000080000000
.dword 0x3fffffff80000000
.dword 0x3ffe000100000000
.dword 0x3fffffff00000000
.dword 0x3ffe000200000000
.dword 0x3ffffffe00000000
.dword 0x3ffe000400000000
.dword 0x3ffffffc00000000
.dword 0x3ffe000800000000
.dword 0x3ffffff800000000
.dword 0x3ffe001000000000
.dword 0x3ffffff000000000
.dword 0x3ffe002000000000
.dword 0x3fffffe000000000
.dword 0x3ffe004000000000
.dword 0x3fffffc000000000
.dword 0x3ffe008000000000
.dword 0x3fffff8000000000
.dword 0x3ffe010000000000
.dword 0x3fffff0000000000
.dword 0x3ffe020000000000
.dword 0x3ffffe0000000000
.dword 0x3ffe040000000000
.dword 0x3ffffc0000000000
.dword 0x3ffe080000000000
.dword 0x3ffff80000000000
.dword 0x3ffe100000000000
.dword 0x3ffff00000000000
.dword 0x3ffe200000000000
.dword 0x3fffe00000000000
.dword 0x3ffe400000000000
.dword 0x3fffc00000000000
.dword 0x3ffe800000000000
.dword 0x3fff800000000000
.dword 0x3fff000000000000
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 4*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
