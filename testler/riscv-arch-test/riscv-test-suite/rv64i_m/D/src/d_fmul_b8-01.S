
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 15:10:19 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fmul.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmul.d instruction of the RISC-V FD extension for the fmul_b8 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fmul_b8)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f1, rs2==f20, rd==f3, fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and rm_val == 0  
// opcode: fmul.d ; op1:f1; op2:f20; dest:f3; op1val:0x3fa682ad08c2d120; op2val:0x2d; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f3, f1, f20, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rd != rs2, rs1==f20, rs2==f28, rd==f20, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and rm_val == 4  
// opcode: fmul.d ; op1:f20; op2:f28; dest:f20; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f20, f20, f28, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_2:
// rs2 == rd != rs1, rs1==f13, rs2==f2, rd==f2, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and rm_val == 3  
// opcode: fmul.d ; op1:f13; op2:f2; dest:f2; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f2, f13, f2, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_3:
// rs1 == rs2 == rd, rs1==f26, rs2==f26, rd==f26, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and rm_val == 2  
// opcode: fmul.d ; op1:f26; op2:f26; dest:f26; op1val:0x3fdae4d63fafea86; op2val:0x3fdae4d63fafea86; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f26, f26, f26, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f24, rs2==f24, rd==f1, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and rm_val == 1  
// opcode: fmul.d ; op1:f24; op2:f24; dest:f1; op1val:0x3fdae4d63fafea86; op2val:0x3fdae4d63fafea86; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f1, f24, f24, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_5:
// rs1==f17, rs2==f22, rd==f11, fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and rm_val == 0  
// opcode: fmul.d ; op1:f17; op2:f22; dest:f11; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f11, f17, f22, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6:
// rs1==f4, rs2==f8, rd==f0, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and rm_val == 4  
// opcode: fmul.d ; op1:f4; op2:f8; dest:f0; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f0, f4, f8, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_7:
// rs1==f23, rs2==f18, rd==f25, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and rm_val == 3  
// opcode: fmul.d ; op1:f23; op2:f18; dest:f25; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f25, f23, f18, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_8:
// rs1==f19, rs2==f6, rd==f5, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and rm_val == 2  
// opcode: fmul.d ; op1:f19; op2:f6; dest:f5; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f5, f19, f6, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_9:
// rs1==f30, rs2==f0, rd==f21, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and rm_val == 1  
// opcode: fmul.d ; op1:f30; op2:f0; dest:f21; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f21, f30, f0, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_10:
// rs1==f8, rs2==f1, rd==f9, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9891b0b26904e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xe1360cb3a0f6b and rm_val == 0  
// opcode: fmul.d ; op1:f8; op2:f1; dest:f9; op1val:0x3fe9891b0b26904e; op2val:0x1e1360cb3a0f6b; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f9, f8, f1, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_11:
// rs1==f2, rs2==f19, rd==f16, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and rm_val == 4  
// opcode: fmul.d ; op1:f2; op2:f19; dest:f16; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f16, f2, f19, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_12:
// rs1==f7, rs2==f21, rd==f4, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and rm_val == 3  
// opcode: fmul.d ; op1:f7; op2:f21; dest:f4; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f4, f7, f21, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_13:
// rs1==f29, rs2==f17, rd==f23, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and rm_val == 2  
// opcode: fmul.d ; op1:f29; op2:f17; dest:f23; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f23, f29, f17, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_14:
// rs1==f5, rs2==f30, rd==f15, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and rm_val == 1  
// opcode: fmul.d ; op1:f5; op2:f30; dest:f15; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f15, f5, f30, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_15:
// rs1==f31, rs2==f12, rd==f27, fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf05337d9798fa and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8c20a29485c1b and rm_val == 0  
// opcode: fmul.d ; op1:f31; op2:f12; dest:f27; op1val:0x3fef05337d9798fa; op2val:0x18c20a29485c1b; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f27, f31, f12, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_16:
// rs1==f9, rs2==f11, rd==f28, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and rm_val == 4  
// opcode: fmul.d ; op1:f9; op2:f11; dest:f28; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f28, f9, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_17:
// rs1==f0, rs2==f29, rd==f24, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and rm_val == 3  
// opcode: fmul.d ; op1:f0; op2:f29; dest:f24; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f24, f0, f29, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_18:
// rs1==f21, rs2==f31, rd==f6, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and rm_val == 2  
// opcode: fmul.d ; op1:f21; op2:f31; dest:f6; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f6, f21, f31, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_19:
// rs1==f14, rs2==f4, rd==f22, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and rm_val == 1  
// opcode: fmul.d ; op1:f14; op2:f4; dest:f22; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f22, f14, f4, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_20:
// rs1==f10, rs2==f23, rd==f13, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x342aac39fad5a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3eff0646f6b06 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f23; dest:f13; op1val:0x3fd342aac39fad5a; op2val:0x33eff0646f6b06; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f13, f10, f23, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_21:
// rs1==f18, rs2==f25, rd==f19, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and rm_val == 4  
// opcode: fmul.d ; op1:f18; op2:f25; dest:f19; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f19, f18, f25, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_22:
// rs1==f27, rs2==f5, rd==f14, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and rm_val == 3  
// opcode: fmul.d ; op1:f27; op2:f5; dest:f14; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f14, f27, f5, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_23:
// rs1==f11, rs2==f9, rd==f8, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and rm_val == 2  
// opcode: fmul.d ; op1:f11; op2:f9; dest:f8; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f8, f11, f9, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_24:
// rs1==f28, rs2==f27, rd==f30, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and rm_val == 1  
// opcode: fmul.d ; op1:f28; op2:f27; dest:f30; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f30, f28, f27, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_25:
// rs1==f25, rs2==f10, rd==f12, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8ab303a513b04 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf21efa502f40a and rm_val == 0  
// opcode: fmul.d ; op1:f25; op2:f10; dest:f12; op1val:0x3fe8ab303a513b04; op2val:0x1f21efa502f40a; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f25, f10, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_26:
// rs1==f3, rs2==f15, rd==f17, fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and rm_val == 4  
// opcode: fmul.d ; op1:f3; op2:f15; dest:f17; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f17, f3, f15, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_27:
// rs1==f6, rs2==f7, rd==f18, fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and rm_val == 3  
// opcode: fmul.d ; op1:f6; op2:f7; dest:f18; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f18, f6, f7, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_28:
// rs1==f16, rs2==f3, rd==f7, fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and rm_val == 2  
// opcode: fmul.d ; op1:f16; op2:f3; dest:f7; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f7, f16, f3, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_29:
// rs1==f12, rs2==f14, rd==f31, fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and rm_val == 1  
// opcode: fmul.d ; op1:f12; op2:f14; dest:f31; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f31, f12, f14, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_30:
// rs1==f22, rs2==f16, rd==f10, fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe08dd382d6120 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x9920b6e8a3671 and rm_val == 0  
// opcode: fmul.d ; op1:f22; op2:f16; dest:f10; op1val:0x3fce08dd382d6120; op2val:0x39920b6e8a3671; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f10, f22, f16, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_31:
// rs1==f15, rs2==f13, rd==f29, fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and rm_val == 4  
// opcode: fmul.d ; op1:f15; op2:f13; dest:f29; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f29, f15, f13, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defcb6e91767 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x6c2c9cfbfa744 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defcb6e91767; op2val:0x26c2c9cfbfa744; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x8209bde69354c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xfd4c0454e5bf1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc8209bde69354c; op2val:0x3fd4c0454e5bf1; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3424eb2bec806 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3f04fb357f6eb and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3424eb2bec806; op2val:0x23f04fb357f6eb; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2365e1f6cd3d6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x515a62265c9f6 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2365e1f6cd3d6; op2val:0x2515a62265c9f6; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3ed282f314327 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3455b2b39dfa7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3ed282f314327; op2val:0x23455b2b39dfa7; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x7dd12a857b4e4 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x0176af992548e and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd7dd12a857b4e4; op2val:0x30176af992548e; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xca030e0aaaf93 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad43909486b87 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feca030e0aaaf93; op2val:0x1ad43909486b87; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x54050ea62efd0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x211cd43fb2bd6 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb54050ea62efd0; op2val:0x5211cd43fb2bd6; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x213173bcdd44a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x53eccf46208e3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd213173bcdd44a; op2val:0x353eccf46208e3; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2193539b2d7f8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x5379ead9c4597 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2193539b2d7f8; op2val:0x45379ead9c4597; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3de273ea72d5e and fs2 == 0 and fe2 == 0x002 and fm2 == 0x353e8b840f39c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3de273ea72d5e; op2val:0x2353e8b840f39c; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe4c8a95892dc8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x958ede343dbd7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee4c8a95892dc8; op2val:0x1958ede343dbd7; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc8955ce227001 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9b602f981eb and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec8955ce227001; op2val:0x1ae9b602f981eb; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbc897ddd6e721 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xba469c1da6224 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febc897ddd6e721; op2val:0x1ba469c1da6224; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb85659a838fe3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xbe7e7c01ba1fb and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb85659a838fe3; op2val:0x1be7e7c01ba1fb; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x45ca3c3c5aeb0 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2dbd8afb1830c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd45ca3c3c5aeb0; op2val:0x32dbd8afb1830c; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6c71ca2f8dfe0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x0dbc8e95388b0 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6c71ca2f8dfe0; op2val:0x40dbc8e95388b0; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x99cd1b1d0bc99 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xdfc3abd005090 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe99cd1b1d0bc99; op2val:0x1dfc3abd005090; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfdca0e3a9aae4 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x81aa4c8ad08ea and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfdca0e3a9aae4; op2val:0x281aa4c8ad08ea; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xc3d2b17c1cbc8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb324d215b5384 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdc3d2b17c1cbc8; op2val:0x2b324d215b5384; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8456a27bdd401 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xfa47b28665864 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8456a27bdd401; op2val:0x1fa47b28665864; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe684fd0912ddc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x941c7b32921d2 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee684fd0912ddc; op2val:0x1941c7b32921d2; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0xd2df717134480 and fs2 == 0 and fe2 == 0x006 and fm2 == 0xa51de8038e70e and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f9d2df717134480; op2val:0x6a51de8038e70e; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52294a8221c6e and fs2 == 0 and fe2 == 0x003 and fm2 == 0x22b3967105321 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52294a8221c6e; op2val:0x322b3967105321; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa75a6cfe67619 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd06811f7b0711 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea75a6cfe67619; op2val:0x1d06811f7b0711; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc9bf9d15341bb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xad82cf2ed8223 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec9bf9d15341bb; op2val:0x1ad82cf2ed8223; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9dd80f4aec684 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xdb13dc952f917 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9dd80f4aec684; op2val:0x3db13dc952f917; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_170:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd86759a6df597 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa02fb7e469494 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed86759a6df597; op2val:0x1a02fb7e469494; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x47f5153fffd9a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x2bbf0cbe6454a and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd47f5153fffd9a; op2val:0x32bbf0cbe6454a; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbe5b30f86b45d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb8792adc31368 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febe5b30f86b45d; op2val:0x1b8792adc31368; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc892e3631d635 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xae9db5a734da1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec892e3631d635; op2val:0x1ae9db5a734da1; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe6a388c60fb16 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x94031d958fbd2 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde6a388c60fb16; op2val:0x294031d958fbd2; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1741c9b528809 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x60051481198aa and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1741c9b528809; op2val:0x260051481198aa; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x6abd09944b940 and fs2 == 0 and fe2 == 0x008 and fm2 == 0x0f0154c64752f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f86abd09944b940; op2val:0x80f0154c64752f; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_202:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_203:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_204:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_205:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd87cceaaebd86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xa01cd16b2579b and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd87cceaaebd86; op2val:0x2a01cd16b2579b; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_206:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_207:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_208:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_209:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_210:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9c1f81f468f0a and fs2 == 0 and fe2 == 0x002 and fm2 == 0xdd0fb602d87c5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9c1f81f468f0a; op2val:0x2dd0fb602d87c5; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5dc74e1d24c33 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x8e2629b2b5d2f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5dc74e1d24c33; op2val:0x18e2629b2b5d2f; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0d6af460a6719 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x02741f97f217f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0d6af460a6719; op2val:0x202741f97f217f; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_221:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_222:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_223:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_224:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_225:
// fs1 == 0 and fe1 == 0x3f6 and fm1 == 0x5b2dfc88f5000 and fs2 == 0 and fe2 == 0x009 and fm2 == 0x9121282fbb0d5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f65b2dfc88f5000; op2val:0x99121282fbb0d5; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_226:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_227:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_228:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_229:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_230:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ef9938574634 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d0df5e2f66b3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ef9938574634; op2val:0x25d0df5e2f66b3; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_231:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_232:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_233:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_234:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_235:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x52ec319683eb8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9ae6ebf2e4a31 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe52ec319683eb8; op2val:0x19ae6ebf2e4a31; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_236:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_237:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_238:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_239:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_240:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe87549362bb46 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x1d1c005974b00 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde87549362bb46; op2val:0x21d1c005974b00; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_241:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_242:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_243:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_244:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_245:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xc502abba63f98 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x336b418560c0f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcc502abba63f98; op2val:0x3336b418560c0f; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_246:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_247:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_248:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_249:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_250:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x318364efdb33c and fs2 == 0 and fe2 == 0x003 and fm2 == 0xc7d6108f5fafb and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc318364efdb33c; op2val:0x3c7d6108f5fafb; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_251:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_252:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_253:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_3)

inst_254:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_255:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe06a62c8d020a and fs2 == 0 and fe2 == 0x001 and fm2 == 0x21e1e27587bb7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee06a62c8d020a; op2val:0x121e1e27587bb7; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_256:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_257:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_258:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_259:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_260:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4121cbd68796b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb1aa7767b0db5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4121cbd68796b; op2val:0x1b1aa7767b0db5; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_261:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_262:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_263:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_264:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_265:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ebda07a00be0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d427091f5336 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ebda07a00be0; op2val:0x25d427091f5336; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_266:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_267:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_268:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_269:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_270:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x81cd30d2bafca and fs2 == 0 and fe2 == 0x001 and fm2 == 0x68f921aefe5ae and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe81cd30d2bafca; op2val:0x168f921aefe5ae; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_271:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_272:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_273:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_274:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_275:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7fe8e6ba4b819 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6ac07cbc8481a and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7fe8e6ba4b819; op2val:0x16ac07cbc8481a; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f7f8bb6f3d5f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6b2424aee46b8 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f7f8bb6f3d5f; op2val:0x16b2424aee46b8; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_281:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_282:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_283:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_284:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_285:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb731914dd4ea8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3d17184267253 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb731914dd4ea8; op2val:0x13d17184267253; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_286:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_287:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_288:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_289:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_290:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2e607700cafb0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcc907d3854562 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2e607700cafb0; op2val:0x4cc907d3854562; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_291:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_292:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_293:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_294:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_295:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb2e75ce8f8af3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4037ccefd80fe and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb2e75ce8f8af3; op2val:0x14037ccefd80fe; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_296:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_297:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_298:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_299:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_300:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6e41eb61fd956 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7c3c375353a67 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6e41eb61fd956; op2val:0x17c3c375353a67; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_301:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_302:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_303:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_304:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_305:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x54ee6267c5580 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x987b33888b32c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc54ee6267c5580; op2val:0x3987b33888b32c; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_306:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_307:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_308:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_309:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_310:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd44a03d6fd618 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x296390d344303 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd44a03d6fd618; op2val:0x2296390d344303; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_311:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_312:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_313:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_314:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_315:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe852bd592685c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x1d302bdf82cf1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce852bd592685c; op2val:0x31d302bdf82cf1; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_316:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_317:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_318:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_319:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_320:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5154303e41e08 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9cd7ea3cf74c9 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5154303e41e08; op2val:0x49cd7ea3cf74c9; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_321:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_322:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_323:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_324:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_325:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4c6690354e783 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa2f6dc3f5765d and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4c6690354e783; op2val:0x1a2f6dc3f5765d; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_326:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_327:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_328:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_329:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_330:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xbef28d020c73f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3796d5672517b and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3febef28d020c73f; op2val:0x13796d5672517b; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa0899d2bd904c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4e5652cac2f28 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea0899d2bd904c; op2val:0x14e5652cac2f28; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_336:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_337:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_338:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_339:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_340:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0bf6a07a632a2 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03db3cd14f4f1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0bf6a07a632a2; op2val:0x203db3cd14f4f1; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_341:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_342:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_343:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_344:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_345:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5a6bbc6508aa0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0x920215aabb699 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5a6bbc6508aa0; op2val:0x5920215aabb699; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x35ab41e106257 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc1b80bdfb7ea5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe35ab41e106257; op2val:0x1c1b80bdfb7ea5; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_351:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_352:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_353:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_354:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_355:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x513f0bf6b2c7a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9cf1cbbc094bc and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd513f0bf6b2c7a; op2val:0x29cf1cbbc094bc; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_356:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_357:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_358:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_359:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_360:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6ab29f5df4b46 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7ff793adb4009 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6ab29f5df4b46; op2val:0x17ff793adb4009; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_361:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_362:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_363:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_364:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_365:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8c30007cd3dc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x13e685c6f44b4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8c30007cd3dc; op2val:0x313e685c6f44b4; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_366:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_367:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_368:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_369:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_370:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x0ba71e4ba55c8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x04286e1b62201 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc0ba71e4ba55c8; op2val:0x404286e1b62201; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_371:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_372:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_373:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_374:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_375:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x079e604cdfa6a and fs2 == 0 and fe2 == 0x003 and fm2 == 0x08239d5aba8f4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd079e604cdfa6a; op2val:0x308239d5aba8f4; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_376:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_377:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_378:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_379:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_380:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3d7504224a0a8 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb6afa13acca44 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3d7504224a0a8; op2val:0x2b6afa13acca44; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_4)

inst_381:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_382:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_383:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_384:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_385:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x2f684ccf4f608 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xcafffe8d00b3f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb2f684ccf4f608; op2val:0x4cafffe8d00b3f; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_386:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_387:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_388:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_389:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_390:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x50c42eae0848d and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9d8873e753c2c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe50c42eae0848d; op2val:0x19d8873e753c2c; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x33111b0c41a5d and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc587ab015a3c9 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe33111b0c41a5d; op2val:0x1c587ab015a3c9; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_396:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_397:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_398:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_399:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_400:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x881e15730be48 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6328a9745fcd5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc881e15730be48; op2val:0x36328a9745fcd5; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_401:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_402:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_403:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_404:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_405:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xa3a3d9dd57ab8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x4bdd892c8fdb2 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fca3a3d9dd57ab8; op2val:0x34bdd892c8fdb2; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x409ed0f4237b2 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb25ba0bb4b6bb and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe409ed0f4237b2; op2val:0x1b25ba0bb4b6bb; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9ef3cccfd9de9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4f9d4c2bd0f09 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9ef3cccfd9de9; op2val:0x14f9d4c2bd0f09; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcd0735072fa3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2e1299c70f8c4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecd0735072fa3c; op2val:0x12e1299c70f8c4; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_421:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_422:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_423:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_424:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_425:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x202f7d7434db8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xc6d1725d94971 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb202f7d7434db8; op2val:0x4c6d1725d94971; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_426:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_427:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_428:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_429:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_430:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db2a30097eef and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac749f066d6a and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db2a30097eef; op2val:0x1cac749f066d6a; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_431:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_432:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_433:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_434:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_435:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xafd401bb76ca8 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x2f8734d9a6dee and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbafd401bb76ca8; op2val:0x42f8734d9a6dee; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1db100085ba87 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcac9eabe2cdb6 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1db100085ba87; op2val:0x1cac9eabe2cdb6; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_441:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_442:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_443:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_444:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_445:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15d24328c984b and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7c90401ca1d9 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15d24328c984b; op2val:0x1d7c90401ca1d9; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_446:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_447:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_448:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_449:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_450:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5cfbc9a935f24 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x77950992a4e85 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5cfbc9a935f24; op2val:0x177950992a4e85; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_451:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_452:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_453:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_454:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_455:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3dd7a6492d833 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x9c61687141780 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3dd7a6492d833; op2val:0x19c61687141780; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_456:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_457:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_458:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_459:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_460:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc6ac6254c69d4 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x2046fb4097f31 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec6ac6254c69d4; op2val:0x12046fb4097f31; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x71ed48fc1427e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x62519366790c5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe71ed48fc1427e; op2val:0x162519366790c5; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_466:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_467:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_468:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_469:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_470:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x15bd8d1c139cf and fs2 == 0 and fe2 == 0x001 and fm2 == 0xd7ec325c63df0 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe15bd8d1c139cf; op2val:0x1d7ec325c63df0; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_471:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_472:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_473:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_474:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_475:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x62436ebd60bac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x71fc0dbade3c3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe62436ebd60bac; op2val:0x171fc0dbade3c3; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_476:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_477:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_478:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_479:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_480:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9df9047ecdecc and fs2 == 0 and fe2 == 0x003 and fm2 == 0x3c9eb1550c385 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9df9047ecdecc; op2val:0x33c9eb1550c385; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_481:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_482:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_483:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_484:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_485:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe0cd86136fb10 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x109c577b6ba53 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde0cd86136fb10; op2val:0x2109c577b6ba53; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_486:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_487:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_488:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_489:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_490:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x777c6de50aa68 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5d12a8b232469 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd777c6de50aa68; op2val:0x25d12a8b232469; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_491:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_492:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_493:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_494:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_495:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x463c94145a570 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x91c50c1bb8cc5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc463c94145a570; op2val:0x391c50c1bb8cc5; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_496:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_497:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_498:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_499:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_500:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x62e8a2adb9b34 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x714fd54f38add and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd62e8a2adb9b34; op2val:0x2714fd54f38add; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_501:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_502:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_503:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_504:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_505:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6a2e2a069ac5a and fs2 == 0 and fe2 == 0x002 and fm2 == 0x69e5a66ad7eb2 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6a2e2a069ac5a; op2val:0x269e5a66ad7eb2; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_506:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_507:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_5)

inst_508:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_509:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_510:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x67b079afda11c and fs2 == 0 and fe2 == 0x003 and fm2 == 0x6c6740bf5eb99 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc67b079afda11c; op2val:0x36c6740bf5eb99; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_511:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_512:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_513:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_514:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_515:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x5d604165036e0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x772908a3cd823 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb5d604165036e0; op2val:0x4772908a3cd823; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_516:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_517:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_518:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_519:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_520:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x084d2193dd23e and fs2 == 0 and fe2 == 0x001 and fm2 == 0xefeb3b589e495 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe084d2193dd23e; op2val:0x1efeb3b589e495; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_521:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_522:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_523:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_524:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_525:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x621567a01c36f and fs2 == 0 and fe2 == 0x001 and fm2 == 0x722c25fe44508 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe621567a01c36f; op2val:0x1722c25fe44508; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_526:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_527:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_528:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_529:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_530:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1d494172eadcd and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcb70c178544c8 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1d494172eadcd; op2val:0x1cb70c178544c8; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_531:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_532:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_533:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_534:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_535:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xd916ae1332170 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x150e516350934 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdd916ae1332170; op2val:0x2150e516350934; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_536:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_537:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_538:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_539:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_540:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x0f0adffe22ec0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe395afbbaedc0 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa0f0adffe22ec0; op2val:0x5e395afbbaedc0; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_541:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_542:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_543:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_544:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_545:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfaacd1ede8fbc and fs2 == 0 and fe2 == 0x001 and fm2 == 0x02b0c0d04fb6f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefaacd1ede8fbc; op2val:0x102b0c0d04fb6f; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_546:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_547:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_548:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_549:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_550:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x12188494c1b32 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xde32a40f8b125 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe12188494c1b32; op2val:0x1de32a40f8b125; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_551:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_552:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_553:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_554:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_555:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xacc39b20087a3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x31b27eaec2d69 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feacc39b20087a3; op2val:0x131b27eaec2d69; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_556:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_557:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_558:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_559:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_560:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x167a8847caae8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6abf0ce2f68d and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc167a8847caae8; op2val:0x3d6abf0ce2f68d; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_561:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_562:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_563:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_564:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_565:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4cce962ffbac6 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x89d680434df9e and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4cce962ffbac6; op2val:0x289d680434df9e; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_566:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_567:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_568:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_569:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_570:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xb999160094d08 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x28d01d16ac111 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcb999160094d08; op2val:0x328d01d16ac111; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_571:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_572:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_573:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_574:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_575:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa710d74f62515 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x35d09046a849a and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea710d74f62515; op2val:0x135d09046a849a; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_576:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_577:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_578:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_579:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_580:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd7235418bcae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x1633f708daf08 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed7235418bcae8; op2val:0x11633f708daf08; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_581:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_582:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_583:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_584:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_585:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfd0798c514364 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x017e6b923d9eb and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfd0798c514364; op2val:0x2017e6b923d9eb; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_586:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_587:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_588:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_589:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_590:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x548936e29abc6 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x80e62be5d682b and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe548936e29abc6; op2val:0x180e62be5d682b; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_591:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_592:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_593:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_594:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_595:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07ae0544cdde9 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf1167b1f6a9c1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07ae0544cdde9; op2val:0x1f1167b1f6a9c1; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_596:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_597:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_598:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_599:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_600:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5dcbd9779f824 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x76b5a35333d71 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5dcbd9779f824; op2val:0x276b5a35333d71; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_601:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_602:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_603:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_604:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_605:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x07769e9de09ae and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf17f0226c02e1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe07769e9de09ae; op2val:0x1f17f0226c02e1; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_606:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_607:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_608:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_609:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_610:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xdab6a22995b50 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x141b8e514cd56 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fedab6a22995b50; op2val:0x1141b8e514cd56; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_611:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_612:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_613:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_614:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_615:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x970a9181c46e3 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4202f5d8aeae3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe970a9181c46e3; op2val:0x14202f5d8aeae3; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_616:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_617:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_618:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_619:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_620:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbc51b0e9c8900 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x26fec4eac033d and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbc51b0e9c8900; op2val:0x226fec4eac033d; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_621:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_622:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_623:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_624:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_625:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2196966125fdb and fs2 == 0 and fe2 == 0x001 and fm2 == 0xc49d75b12d869 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2196966125fdb; op2val:0x1c49d75b12d869; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_626:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_627:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_628:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_629:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_630:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb968b17f74fe5 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x28f0a763219d5 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb968b17f74fe5; op2val:0x128f0a763219d5; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_631:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_632:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_633:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_634:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_6)

inst_635:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9df47160a70eb and fs2 == 0 and fe2 == 0x000 and fm2 == 0x13ca2311481c3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9df47160a70eb; op2val:0x13ca2311481c3; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_636:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_637:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_638:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_639:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_640:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x05e4750a0ffc4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3e8f5edb409b7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd05e4750a0ffc4; op2val:0x3e8f5edb409b7; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_641:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_642:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_643:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_644:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_645:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdd2eb732cadf4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x44ab747cfbe70 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdd2eb732cadf4; op2val:0x44ab747cfbe70; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_646:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_647:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_648:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_649:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_650:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc90d9a70a7ff and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11c96cd79d1f3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc90d9a70a7ff; op2val:0x11c96cd79d1f3; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_651:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_652:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_653:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_654:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_655:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x83cbff91aa168 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa8fee5a5ed7d3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb83cbff91aa168; op2val:0xa8fee5a5ed7d3; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_656:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_657:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_658:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_659:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_660:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x15077c37223e0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3b244b258c5a4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd15077c37223e0; op2val:0x3b244b258c5a4; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_661:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef739c46636880; op2val:0x10476b3053983; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_662:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef739c46636880; op2val:0x10476b3053983; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_663:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef739c46636880; op2val:0x10476b3053983; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_664:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef739c46636880; op2val:0x10476b3053983; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_665:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf739c46636880 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10476b3053983 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef739c46636880; op2val:0x10476b3053983; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_666:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_667:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_668:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_669:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_670:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x66501be94bfaa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2db9b37951ed7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd66501be94bfaa; op2val:0x2db9b37951ed7; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_671:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_672:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_673:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_674:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_675:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x27587e8bf0d24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x377956aa3acd6 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd27587e8bf0d24; op2val:0x377956aa3acd6; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_676:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_677:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_678:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_679:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_680:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfa0ece2bf8e3e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x10301873f2edf and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefa0ece2bf8e3e; op2val:0x10301873f2edf; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_681:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_682:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_683:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_684:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_685:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x74ff40f3d7680 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x5f66f73ece988 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f974ff40f3d7680; op2val:0x25f66f73ece988; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_686:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_687:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_688:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_689:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_690:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x31ce2ccbc1e66 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ac9ccbd0e93e and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe31ce2ccbc1e66; op2val:0x1ac9ccbd0e93e; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_691:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_692:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_693:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_694:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_695:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8cccf25de5b64 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x14a52755f43bc and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8cccf25de5b64; op2val:0x14a52755f43bc; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_696:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_697:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_698:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_699:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_700:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe8399b2e29734 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x431dd901d710d and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce8399b2e29734; op2val:0x431dd901d710d; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_701:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_702:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_703:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_704:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_705:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x047e170b449d4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3ee56faafc279 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd047e170b449d4; op2val:0x3ee56faafc279; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_706:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_707:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_708:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_709:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_710:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x377b25cf47bc0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa4cd701113669 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa377b25cf47bc0; op2val:0x1a4cd701113669; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_711:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_712:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_713:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_714:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_715:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2dad942d10ae0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x364f3ef277503 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2dad942d10ae0; op2val:0x364f3ef277503; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_716:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_717:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_718:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_719:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_720:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x287d2722667ba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x374294cb0d2a1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd287d2722667ba; op2val:0x374294cb0d2a1; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_721:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_722:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_723:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_724:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_725:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x08fb38ee7799e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1eea56a7bc646 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe08fb38ee7799e; op2val:0x1eea56a7bc646; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_726:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_727:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_728:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_729:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_730:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa39f66a6db707 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1385b5899f510 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea39f66a6db707; op2val:0x1385b5899f510; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_731:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_732:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_733:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_734:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_735:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x9e8d484ef19ec and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2785ae814c793 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd9e8d484ef19ec; op2val:0x2785ae814c793; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_736:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_737:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_738:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_739:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_740:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1e1d3a51fe0f1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1ca1c5f4249aa and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1e1d3a51fe0f1; op2val:0x1ca1c5f4249aa; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_741:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_742:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_743:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_744:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_745:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xb4cc0a22b29a6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x258268dcec408 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdb4cc0a22b29a6; op2val:0x258268dcec408; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_746:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_747:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_748:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_749:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_750:
// fs1 == 0 and fe1 == 0x3f7 and fm1 == 0x3ef61486bb700 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x9aef15fb1c249 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f73ef61486bb700; op2val:0x49aef15fb1c249; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_751:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_752:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_753:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_754:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_755:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x2fe42861fda3a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x35e9fd8c3d2ca and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd2fe42861fda3a; op2val:0x35e9fd8c3d2ca; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_756:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_757:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_758:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_759:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_760:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xae80d9af5ab28 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x983b2a4090630 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbae80d9af5ab28; op2val:0x983b2a4090630; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_761:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_7)

inst_762:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_763:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_764:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_765:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x237767be2fcf6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x383659b16bdb6 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd237767be2fcf6; op2val:0x383659b16bdb6; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_766:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_767:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_768:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_769:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_770:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcec4d7aaf439e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x11b3bf6d862a1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecec4d7aaf439e; op2val:0x11b3bf6d862a1; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_771:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_772:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_773:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_774:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_775:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9a1a1c1fe37b0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x3f9bb97d13731 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9a1a1c1fe37b0; op2val:0x13f9bb97d13731; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_776:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_777:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_778:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_779:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_780:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc69eb9f603cc8 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1204fa4524e2e and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec69eb9f603cc8; op2val:0x1204fa4524e2e; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_781:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_782:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_783:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_784:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_785:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1f4f9934f5428 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1c833def8b3a4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1f4f9934f5428; op2val:0x1c833def8b3a4; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_786:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_787:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_788:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_789:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_790:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x512b8b8eb3302 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x3097ba21a05f3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd512b8b8eb3302; op2val:0x3097ba21a05f3; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_791:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_792:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_793:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_794:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_795:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x68408ce70081d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x16bd58486f709 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe68408ce70081d; op2val:0x16bd58486f709; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_796:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_797:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_798:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_799:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_800:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x685d2bfb30d8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x2d7713dc9124f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd685d2bfb30d8e; op2val:0x2d7713dc9124f; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_801:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_802:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_803:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_804:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_805:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xac07d2a325788 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x991c4de78594c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbac07d2a325788; op2val:0x991c4de78594c; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_806:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_807:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_808:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_809:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_810:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xddc73a0ce4388 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1125623de1321 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feddc73a0ce4388; op2val:0x1125623de1321; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_811:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_812:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_813:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_814:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_815:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb4fdd08c65822 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x12bf118e2a757 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb4fdd08c65822; op2val:0x12bf118e2a757; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_816:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_817:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_818:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_819:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_820:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x49b2ddf4ba36e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x18d8d04dff642 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe49b2ddf4ba36e; op2val:0x18d8d04dff642; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_821:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_822:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_823:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_824:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_825:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x75095a6c9b944 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x57d75cedfc60c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc75095a6c9b944; op2val:0x57d75cedfc60c; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_826:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_827:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_828:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_829:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_830:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x4d7ed1d4d5340 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc48330b5149bc and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb4d7ed1d4d5340; op2val:0xc48330b5149bc; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_831:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_832:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_833:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_834:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_835:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x250a8e937afc7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1bf4821442994 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe250a8e937afc7; op2val:0x1bf4821442994; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_836:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_837:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_838:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_839:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_840:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x05bd62d9d2083 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x1f4c5ac545d82 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe05bd62d9d2083; op2val:0x1f4c5ac545d82; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_841:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_842:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_843:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_844:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_845:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x680e97a6bdb27 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb603fff83dd96 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe680e97a6bdb27; op2val:0xb603fff83dd96; valaddr_reg:x16; val_offset:1328; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1328, x17, x15, 1328, x18)

inst_846:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4; valaddr_reg:x16; val_offset:1344; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1344, x17, x15, 1344, x18)

inst_847:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4; valaddr_reg:x16; val_offset:1360; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1360, x17, x15, 1360, x18)

inst_848:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4; valaddr_reg:x16; val_offset:1376; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1376, x17, x15, 1376, x18)

inst_849:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4; valaddr_reg:x16; val_offset:1392; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1392, x17, x15, 1392, x18)

inst_850:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x164eb10408a50 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xd6f615847e2a4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb164eb10408a50; op2val:0x3d6f615847e2a4; valaddr_reg:x16; val_offset:1408; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1408, x17, x15, 1408, x18)

inst_851:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66; valaddr_reg:x16; val_offset:1424; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1424, x17, x15, 1424, x18)

inst_852:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66; valaddr_reg:x16; val_offset:1440; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1440, x17, x15, 1440, x18)

inst_853:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66; valaddr_reg:x16; val_offset:1456; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1456, x17, x15, 1456, x18)

inst_854:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66; valaddr_reg:x16; val_offset:1472; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1472, x17, x15, 1472, x18)

inst_855:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x731f99169dd60 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x612d220ad5b66 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa731f99169dd60; op2val:0x4612d220ad5b66; valaddr_reg:x16; val_offset:1488; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1488, x17, x15, 1488, x18)

inst_856:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441; valaddr_reg:x16; val_offset:1504; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1504, x17, x15, 1504, x18)

inst_857:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441; valaddr_reg:x16; val_offset:1520; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1520, x17, x15, 1520, x18)

inst_858:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441; valaddr_reg:x16; val_offset:1536; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1536, x17, x15, 1536, x18)

inst_859:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441; valaddr_reg:x16; val_offset:1552; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1552, x17, x15, 1552, x18)

inst_860:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe510a1912dae8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0e3721430a441 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde510a1912dae8; op2val:0x10e3721430a441; valaddr_reg:x16; val_offset:1568; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1568, x17, x15, 1568, x18)

inst_861:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b; valaddr_reg:x16; val_offset:1584; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1584, x17, x15, 1584, x18)

inst_862:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b; valaddr_reg:x16; val_offset:1600; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1600, x17, x15, 1600, x18)

inst_863:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b; valaddr_reg:x16; val_offset:1616; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1616, x17, x15, 1616, x18)

inst_864:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b; valaddr_reg:x16; val_offset:1632; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1632, x17, x15, 1632, x18)

inst_865:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x9c3798a005bc0 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x3df7e38652a3b and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc9c3798a005bc0; op2val:0x23df7e38652a3b; valaddr_reg:x16; val_offset:1648; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1648, x17, x15, 1648, x18)

inst_866:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439; valaddr_reg:x16; val_offset:1664; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1664, x17, x15, 1664, x18)

inst_867:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439; valaddr_reg:x16; val_offset:1680; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1680, x17, x15, 1680, x18)

inst_868:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439; valaddr_reg:x16; val_offset:1696; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1696, x17, x15, 1696, x18)

inst_869:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439; valaddr_reg:x16; val_offset:1712; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1712, x17, x15, 1712, x18)

inst_870:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x48eaab4295ebc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xc73f7ef5a1439 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe48eaab4295ebc; op2val:0xc73f7ef5a1439; valaddr_reg:x16; val_offset:1728; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1728, x17, x15, 1728, x18)

inst_871:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b; valaddr_reg:x16; val_offset:1744; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1744, x17, x15, 1744, x18)

inst_872:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b; valaddr_reg:x16; val_offset:1760; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1760, x17, x15, 1760, x18)

inst_873:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b; valaddr_reg:x16; val_offset:1776; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1776, x17, x15, 1776, x18)

inst_874:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b; valaddr_reg:x16; val_offset:1792; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1792, x17, x15, 1792, x18)

inst_875:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1b1e0625a83ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcef5c7fd0470b and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1b1e0625a83ac; op2val:0x1cef5c7fd0470b; valaddr_reg:x16; val_offset:1808; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1808, x17, x15, 1808, x18)

inst_876:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475; valaddr_reg:x16; val_offset:1824; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1824, x17, x15, 1824, x18)

inst_877:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475; valaddr_reg:x16; val_offset:1840; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1840, x17, x15, 1840, x18)

inst_878:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475; valaddr_reg:x16; val_offset:1856; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1856, x17, x15, 1856, x18)

inst_879:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475; valaddr_reg:x16; val_offset:1872; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1872, x17, x15, 1872, x18)

inst_880:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5d053fc3cac4e and fs2 == 0 and fe2 == 0x001 and fm2 == 0x778adb2373475 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5d053fc3cac4e; op2val:0x1778adb2373475; valaddr_reg:x16; val_offset:1888; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1888, x17, x15, 1888, x18)

inst_881:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219; valaddr_reg:x16; val_offset:1904; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1904, x17, x15, 1904, x18)

inst_882:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219; valaddr_reg:x16; val_offset:1920; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1920, x17, x15, 1920, x18)

inst_883:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219; valaddr_reg:x16; val_offset:1936; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1936, x17, x15, 1936, x18)

inst_884:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219; valaddr_reg:x16; val_offset:1952; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1952, x17, x15, 1952, x18)

inst_885:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x3ab94a728237c and fs2 == 0 and fe2 == 0x001 and fm2 == 0xa0777dfda8219 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd3ab94a728237c; op2val:0x1a0777dfda8219; valaddr_reg:x16; val_offset:1968; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1968, x17, x15, 1968, x18)

inst_886:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35; valaddr_reg:x16; val_offset:1984; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1984, x17, x15, 1984, x18)

inst_887:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35; valaddr_reg:x16; val_offset:2000; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 2000, x17, x15, 2000, x18)

inst_888:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35; valaddr_reg:x16; val_offset:2016; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_8)

inst_889:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35; valaddr_reg:x16; val_offset:0; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 0, x17, x15, 0, x18)

inst_890:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x6f9fe64df04ac and fs2 == 0 and fe2 == 0x001 and fm2 == 0x6489a0f8e6b35 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd6f9fe64df04ac; op2val:0x16489a0f8e6b35; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 16, x17, x15, 16, x18)

inst_891:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579; valaddr_reg:x16; val_offset:32; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 32, x17, x15, 32, x18)

inst_892:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579; valaddr_reg:x16; val_offset:48; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 48, x17, x15, 48, x18)

inst_893:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579; valaddr_reg:x16; val_offset:64; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 64, x17, x15, 64, x18)

inst_894:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579; valaddr_reg:x16; val_offset:80; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 80, x17, x15, 80, x18)

inst_895:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd6c74c988a95b and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b352cabde579 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed6c74c988a95b; op2val:0x8b352cabde579; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 96, x17, x15, 96, x18)

inst_896:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3; valaddr_reg:x16; val_offset:112; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 112, x17, x15, 112, x18)

inst_897:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3; valaddr_reg:x16; val_offset:128; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 128, x17, x15, 128, x18)

inst_898:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3; valaddr_reg:x16; val_offset:144; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 144, x17, x15, 144, x18)

inst_899:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3; valaddr_reg:x16; val_offset:160; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 160, x17, x15, 160, x18)

inst_900:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc1acac6fbbce3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x91bdb065bafe3 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec1acac6fbbce3; op2val:0x91bdb065bafe3; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 176, x17, x15, 176, x18)

inst_901:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36; valaddr_reg:x16; val_offset:192; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 192, x17, x15, 192, x18)

inst_902:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36; valaddr_reg:x16; val_offset:208; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 208, x17, x15, 208, x18)

inst_903:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36; valaddr_reg:x16; val_offset:224; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 224, x17, x15, 224, x18)

inst_904:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36; valaddr_reg:x16; val_offset:240; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 240, x17, x15, 240, x18)

inst_905:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf8aac8a7b2128 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x03b83f0621f36 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf8aac8a7b2128; op2val:0x203b83f0621f36; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 256, x17, x15, 256, x18)

inst_906:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433; valaddr_reg:x16; val_offset:272; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 272, x17, x15, 272, x18)

inst_907:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433; valaddr_reg:x16; val_offset:288; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 288, x17, x15, 288, x18)

inst_908:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433; valaddr_reg:x16; val_offset:304; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 304, x17, x15, 304, x18)

inst_909:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433; valaddr_reg:x16; val_offset:320; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 320, x17, x15, 320, x18)

inst_910:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x37687c122e4a5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd273541640433 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe37687c122e4a5; op2val:0xd273541640433; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 336, x17, x15, 336, x18)

inst_911:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4; valaddr_reg:x16; val_offset:352; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 352, x17, x15, 352, x18)

inst_912:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4; valaddr_reg:x16; val_offset:368; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 368, x17, x15, 368, x18)

inst_913:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4; valaddr_reg:x16; val_offset:384; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 384, x17, x15, 384, x18)

inst_914:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4; valaddr_reg:x16; val_offset:400; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 400, x17, x15, 400, x18)

inst_915:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9d831ab897405 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9e7c7d0eedbe4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9d831ab897405; op2val:0x9e7c7d0eedbe4; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 416, x17, x15, 416, x18)

inst_916:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c; valaddr_reg:x16; val_offset:432; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 432, x17, x15, 432, x18)

inst_917:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c; valaddr_reg:x16; val_offset:448; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 448, x17, x15, 448, x18)

inst_918:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c; valaddr_reg:x16; val_offset:464; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 464, x17, x15, 464, x18)

inst_919:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c; valaddr_reg:x16; val_offset:480; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 480, x17, x15, 480, x18)

inst_920:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd8ceabf1f9324 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a9c41b72cd7c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed8ceabf1f9324; op2val:0x8a9c41b72cd7c; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 496, x17, x15, 496, x18)

inst_921:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f; valaddr_reg:x16; val_offset:512; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 512, x17, x15, 512, x18)

inst_922:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f; valaddr_reg:x16; val_offset:528; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 528, x17, x15, 528, x18)

inst_923:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f; valaddr_reg:x16; val_offset:544; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 544, x17, x15, 544, x18)

inst_924:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f; valaddr_reg:x16; val_offset:560; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 560, x17, x15, 560, x18)

inst_925:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4112f9ac6d6c3 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xcc1d6790db60f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4112f9ac6d6c3; op2val:0xcc1d6790db60f; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 576, x17, x15, 576, x18)

inst_926:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4; valaddr_reg:x16; val_offset:592; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 592, x17, x15, 592, x18)

inst_927:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4; valaddr_reg:x16; val_offset:608; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 608, x17, x15, 608, x18)

inst_928:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4; valaddr_reg:x16; val_offset:624; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 624, x17, x15, 624, x18)

inst_929:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4; valaddr_reg:x16; val_offset:640; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 640, x17, x15, 640, x18)

inst_930:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xda38497fa8b3c and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8a328f43b02b4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feda38497fa8b3c; op2val:0x8a328f43b02b4; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 656, x17, x15, 656, x18)

inst_931:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615; valaddr_reg:x16; val_offset:672; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 672, x17, x15, 672, x18)

inst_932:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615; valaddr_reg:x16; val_offset:688; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 688, x17, x15, 688, x18)

inst_933:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615; valaddr_reg:x16; val_offset:704; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 704, x17, x15, 704, x18)

inst_934:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615; valaddr_reg:x16; val_offset:720; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 720, x17, x15, 720, x18)

inst_935:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9560a9c711bee and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa1aaa3955c615 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9560a9c711bee; op2val:0xa1aaa3955c615; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 736, x17, x15, 736, x18)

inst_936:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087; valaddr_reg:x16; val_offset:752; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 752, x17, x15, 752, x18)

inst_937:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087; valaddr_reg:x16; val_offset:768; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 768, x17, x15, 768, x18)

inst_938:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087; valaddr_reg:x16; val_offset:784; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 784, x17, x15, 784, x18)

inst_939:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087; valaddr_reg:x16; val_offset:800; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 800, x17, x15, 800, x18)

inst_940:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2dbc1697368fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd932898aef087 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2dbc1697368fe; op2val:0xd932898aef087; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 816, x17, x15, 816, x18)

inst_941:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7; valaddr_reg:x16; val_offset:832; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 832, x17, x15, 832, x18)

inst_942:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7; valaddr_reg:x16; val_offset:848; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 848, x17, x15, 848, x18)

inst_943:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7; valaddr_reg:x16; val_offset:864; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 864, x17, x15, 864, x18)

inst_944:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7; valaddr_reg:x16; val_offset:880; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 880, x17, x15, 880, x18)

inst_945:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf7f346cc0733d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x820b68f292ba7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef7f346cc0733d; op2val:0x820b68f292ba7; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 896, x17, x15, 896, x18)

inst_946:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6; valaddr_reg:x16; val_offset:912; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 912, x17, x15, 912, x18)

inst_947:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6; valaddr_reg:x16; val_offset:928; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 928, x17, x15, 928, x18)

inst_948:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6; valaddr_reg:x16; val_offset:944; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 944, x17, x15, 944, x18)

inst_949:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6; valaddr_reg:x16; val_offset:960; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 960, x17, x15, 960, x18)

inst_950:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x466d613983784 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x9188fb6dcebd6 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc466d613983784; op2val:0x29188fb6dcebd6; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 976, x17, x15, 976, x18)

inst_951:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995; valaddr_reg:x16; val_offset:992; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 992, x17, x15, 992, x18)

inst_952:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995; valaddr_reg:x16; val_offset:1008; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1008, x17, x15, 1008, x18)

inst_953:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995; valaddr_reg:x16; val_offset:1024; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1024, x17, x15, 1024, x18)

inst_954:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995; valaddr_reg:x16; val_offset:1040; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1040, x17, x15, 1040, x18)

inst_955:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcc3482b94768d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e67f3d962995 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecc3482b94768d; op2val:0x8e67f3d962995; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1056, x17, x15, 1056, x18)

inst_956:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc; valaddr_reg:x16; val_offset:1072; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1072, x17, x15, 1072, x18)

inst_957:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc; valaddr_reg:x16; val_offset:1088; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1088, x17, x15, 1088, x18)

inst_958:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc; valaddr_reg:x16; val_offset:1104; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1104, x17, x15, 1104, x18)

inst_959:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc; valaddr_reg:x16; val_offset:1120; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1120, x17, x15, 1120, x18)

inst_960:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf63e68c80ab2e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x827c86d9a51bc and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef63e68c80ab2e; op2val:0x827c86d9a51bc; valaddr_reg:x16; val_offset:1136; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1136, x17, x15, 1136, x18)

inst_961:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd; valaddr_reg:x16; val_offset:1152; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1152, x17, x15, 1152, x18)

inst_962:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd; valaddr_reg:x16; val_offset:1168; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1168, x17, x15, 1168, x18)

inst_963:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd; valaddr_reg:x16; val_offset:1184; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1184, x17, x15, 1184, x18)

inst_964:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd; valaddr_reg:x16; val_offset:1200; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1200, x17, x15, 1200, x18)

inst_965:
// fs1 == 0 and fe1 == 0x3f9 and fm1 == 0x0dfda08a590e0 and fs2 == 0 and fe2 == 0x005 and fm2 == 0xe577f0cb610bd and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f90dfda08a590e0; op2val:0x5e577f0cb610bd; valaddr_reg:x16; val_offset:1216; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1216, x17, x15, 1216, x18)

inst_966:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394; valaddr_reg:x16; val_offset:1232; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1232, x17, x15, 1232, x18)

inst_967:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394; valaddr_reg:x16; val_offset:1248; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1248, x17, x15, 1248, x18)

inst_968:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394; valaddr_reg:x16; val_offset:1264; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1264, x17, x15, 1264, x18)

inst_969:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394; valaddr_reg:x16; val_offset:1280; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1280, x17, x15, 1280, x18)

inst_970:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x8ed660d117174 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x48a29a3c41394 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd8ed660d117174; op2val:0x148a29a3c41394; valaddr_reg:x16; val_offset:1296; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1296, x17, x15, 1296, x18)

inst_971:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744; valaddr_reg:x16; val_offset:1312; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1312, x17, x15, 1312, x18)

inst_972:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744; valaddr_reg:x16; val_offset:1328; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1328, x17, x15, 1328, x18)

inst_973:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744; valaddr_reg:x16; val_offset:1344; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1344, x17, x15, 1344, x18)

inst_974:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744; valaddr_reg:x16; val_offset:1360; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1360, x17, x15, 1360, x18)

inst_975:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xec544b8508c48 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0a3a73a8e2744 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdec544b8508c48; op2val:0x10a3a73a8e2744; valaddr_reg:x16; val_offset:1376; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1376, x17, x15, 1376, x18)

inst_976:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383; valaddr_reg:x16; val_offset:1392; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1392, x17, x15, 1392, x18)

inst_977:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383; valaddr_reg:x16; val_offset:1408; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1408, x17, x15, 1408, x18)

inst_978:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383; valaddr_reg:x16; val_offset:1424; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1424, x17, x15, 1424, x18)

inst_979:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383; valaddr_reg:x16; val_offset:1440; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1440, x17, x15, 1440, x18)

inst_980:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x942981852ba5c and fs2 == 0 and fe2 == 0x002 and fm2 == 0x444e34d859383 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc942981852ba5c; op2val:0x2444e34d859383; valaddr_reg:x16; val_offset:1456; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1456, x17, x15, 1456, x18)

inst_981:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb; valaddr_reg:x16; val_offset:1472; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1472, x17, x15, 1472, x18)

inst_982:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb; valaddr_reg:x16; val_offset:1488; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1488, x17, x15, 1488, x18)

inst_983:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb; valaddr_reg:x16; val_offset:1504; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1504, x17, x15, 1504, x18)

inst_984:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb; valaddr_reg:x16; val_offset:1520; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1520, x17, x15, 1520, x18)

inst_985:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa3367805149f4 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9c54c404c67bb and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea3367805149f4; op2val:0x9c54c404c67bb; valaddr_reg:x16; val_offset:1536; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1536, x17, x15, 1536, x18)

inst_986:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d; valaddr_reg:x16; val_offset:1552; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1552, x17, x15, 1552, x18)

inst_987:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d; valaddr_reg:x16; val_offset:1568; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1568, x17, x15, 1568, x18)

inst_988:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d; valaddr_reg:x16; val_offset:1584; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1584, x17, x15, 1584, x18)

inst_989:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d; valaddr_reg:x16; val_offset:1600; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1600, x17, x15, 1600, x18)

inst_990:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x29f9c1848d382 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xdbeffdaf5b76d and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe29f9c1848d382; op2val:0xdbeffdaf5b76d; valaddr_reg:x16; val_offset:1616; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1616, x17, x15, 1616, x18)

inst_991:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638; valaddr_reg:x16; val_offset:1632; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1632, x17, x15, 1632, x18)

inst_992:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638; valaddr_reg:x16; val_offset:1648; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1648, x17, x15, 1648, x18)

inst_993:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638; valaddr_reg:x16; val_offset:1664; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1664, x17, x15, 1664, x18)

inst_994:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638; valaddr_reg:x16; val_offset:1680; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1680, x17, x15, 1680, x18)

inst_995:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacfa55344ee06 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x318b7ed9f1638 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacfa55344ee06; op2val:0x1318b7ed9f1638; valaddr_reg:x16; val_offset:1696; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1696, x17, x15, 1696, x18)

inst_996:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe; valaddr_reg:x16; val_offset:1712; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1712, x17, x15, 1712, x18)

inst_997:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe; valaddr_reg:x16; val_offset:1728; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1728, x17, x15, 1728, x18)

inst_998:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe; valaddr_reg:x16; val_offset:1744; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1744, x17, x15, 1744, x18)

inst_999:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe; valaddr_reg:x16; val_offset:1760; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1760, x17, x15, 1760, x18)

inst_1000:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x21eda264c2fca and fs2 == 0 and fe2 == 0x000 and fm2 == 0xe20ac8bfa6abe and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe21eda264c2fca; op2val:0xe20ac8bfa6abe; valaddr_reg:x16; val_offset:1776; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1776, x17, x15, 1776, x18)

inst_1001:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299; valaddr_reg:x16; val_offset:1792; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1792, x17, x15, 1792, x18)

inst_1002:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299; valaddr_reg:x16; val_offset:1808; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1808, x17, x15, 1808, x18)

inst_1003:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299; valaddr_reg:x16; val_offset:1824; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1824, x17, x15, 1824, x18)

inst_1004:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299; valaddr_reg:x16; val_offset:1840; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1840, x17, x15, 1840, x18)

inst_1005:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x2e25fb28d0ed0 and fs2 == 0 and fe2 == 0x004 and fm2 == 0xb1ccd571b8299 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa2e25fb28d0ed0; op2val:0x4b1ccd571b8299; valaddr_reg:x16; val_offset:1856; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1856, x17, x15, 1856, x18)

inst_1006:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac; valaddr_reg:x16; val_offset:1872; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1872, x17, x15, 1872, x18)

inst_1007:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac; valaddr_reg:x16; val_offset:1888; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1888, x17, x15, 1888, x18)

inst_1008:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac; valaddr_reg:x16; val_offset:1904; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1904, x17, x15, 1904, x18)

inst_1009:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac; valaddr_reg:x16; val_offset:1920; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1920, x17, x15, 1920, x18)

inst_1010:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x9339c9942e184 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa28780dbb0cac and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe9339c9942e184; op2val:0xa28780dbb0cac; valaddr_reg:x16; val_offset:1936; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1936, x17, x15, 1936, x18)

inst_1011:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63; valaddr_reg:x16; val_offset:1952; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1952, x17, x15, 1952, x18)

inst_1012:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63; valaddr_reg:x16; val_offset:1968; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1968, x17, x15, 1968, x18)

inst_1013:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63; valaddr_reg:x16; val_offset:1984; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1984, x17, x15, 1984, x18)

inst_1014:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63; valaddr_reg:x16; val_offset:2000; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 2000, x17, x15, 2000, x18)

inst_1015:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x616b959db9d26 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xb96f025724a63 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe616b959db9d26; op2val:0xb96f025724a63; valaddr_reg:x16; val_offset:2016; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_9)

inst_1016:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14; valaddr_reg:x16; val_offset:0; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 0, x17, x15, 0, x18)

inst_1017:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14; valaddr_reg:x16; val_offset:16; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 16, x17, x15, 16, x18)

inst_1018:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14; valaddr_reg:x16; val_offset:32; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 32, x17, x15, 32, x18)

inst_1019:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14; valaddr_reg:x16; val_offset:48; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 48, x17, x15, 48, x18)

inst_1020:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xeac4162a4e298 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x0b138e0e53a14 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdeac4162a4e298; op2val:0x10b138e0e53a14; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 64, x17, x15, 64, x18)

inst_1021:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85; valaddr_reg:x16; val_offset:80; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 80, x17, x15, 80, x18)

inst_1022:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85; valaddr_reg:x16; val_offset:96; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 96, x17, x15, 96, x18)

inst_1023:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85; valaddr_reg:x16; val_offset:112; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 112, x17, x15, 112, x18)

inst_1024:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85; valaddr_reg:x16; val_offset:128; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 128, x17, x15, 128, x18)

inst_1025:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x89757fb944015 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6905162cbd85 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe89757fb944015; op2val:0xa6905162cbd85; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 144, x17, x15, 144, x18)

inst_1026:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7; valaddr_reg:x16; val_offset:160; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 160, x17, x15, 160, x18)

inst_1027:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7; valaddr_reg:x16; val_offset:176; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 176, x17, x15, 176, x18)

inst_1028:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7; valaddr_reg:x16; val_offset:192; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 192, x17, x15, 192, x18)

inst_1029:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7; valaddr_reg:x16; val_offset:208; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 208, x17, x15, 208, x18)

inst_1030:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xccea8abebb915 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e2fb62a341c7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feccea8abebb915; op2val:0x8e2fb62a341c7; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 224, x17, x15, 224, x18)

inst_1031:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839; valaddr_reg:x16; val_offset:240; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 240, x17, x15, 240, x18)

inst_1032:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839; valaddr_reg:x16; val_offset:256; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 256, x17, x15, 256, x18)

inst_1033:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839; valaddr_reg:x16; val_offset:272; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 272, x17, x15, 272, x18)

inst_1034:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839; valaddr_reg:x16; val_offset:288; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 288, x17, x15, 288, x18)

inst_1035:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adc1f74c2452 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xcf61a472d8839 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adc1f74c2452; op2val:0x1cf61a472d8839; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 304, x17, x15, 304, x18)

inst_1036:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08; valaddr_reg:x16; val_offset:320; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 320, x17, x15, 320, x18)

inst_1037:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08; valaddr_reg:x16; val_offset:336; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 336, x17, x15, 336, x18)

inst_1038:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08; valaddr_reg:x16; val_offset:352; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 352, x17, x15, 352, x18)

inst_1039:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08; valaddr_reg:x16; val_offset:368; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 368, x17, x15, 368, x18)

inst_1040:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2ebb6935beb29 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd87b5aa363c08 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2ebb6935beb29; op2val:0xd87b5aa363c08; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 384, x17, x15, 384, x18)

inst_1041:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6; valaddr_reg:x16; val_offset:400; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 400, x17, x15, 400, x18)

inst_1042:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6; valaddr_reg:x16; val_offset:416; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 416, x17, x15, 416, x18)

inst_1043:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6; valaddr_reg:x16; val_offset:432; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 432, x17, x15, 432, x18)

inst_1044:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6; valaddr_reg:x16; val_offset:448; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 448, x17, x15, 448, x18)

inst_1045:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xfd879b36541fe and fs2 == 0 and fe2 == 0x000 and fm2 == 0x809edd6b00df6 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fefd879b36541fe; op2val:0x809edd6b00df6; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 464, x17, x15, 464, x18)

inst_1046:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8; valaddr_reg:x16; val_offset:480; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 480, x17, x15, 480, x18)

inst_1047:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8; valaddr_reg:x16; val_offset:496; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 496, x17, x15, 496, x18)

inst_1048:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8; valaddr_reg:x16; val_offset:512; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 512, x17, x15, 512, x18)

inst_1049:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8; valaddr_reg:x16; val_offset:528; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 528, x17, x15, 528, x18)

inst_1050:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x276a536e292bc and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddd7f5d4603a8 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe276a536e292bc; op2val:0xddd7f5d4603a8; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 544, x17, x15, 544, x18)

inst_1051:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61; valaddr_reg:x16; val_offset:560; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 560, x17, x15, 560, x18)

inst_1052:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61; valaddr_reg:x16; val_offset:576; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 576, x17, x15, 576, x18)

inst_1053:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61; valaddr_reg:x16; val_offset:592; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 592, x17, x15, 592, x18)

inst_1054:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61; valaddr_reg:x16; val_offset:608; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 608, x17, x15, 608, x18)

inst_1055:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x297946d1f11f8 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xb89df6e6cca61 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd297946d1f11f8; op2val:0x1b89df6e6cca61; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 624, x17, x15, 624, x18)

inst_1056:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0; valaddr_reg:x16; val_offset:640; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 640, x17, x15, 640, x18)

inst_1057:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0; valaddr_reg:x16; val_offset:656; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 656, x17, x15, 656, x18)

inst_1058:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0; valaddr_reg:x16; val_offset:672; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 672, x17, x15, 672, x18)

inst_1059:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0; valaddr_reg:x16; val_offset:688; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 688, x17, x15, 688, x18)

inst_1060:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x80db239aad63c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x5492f9eee0ed0 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd80db239aad63c; op2val:0x15492f9eee0ed0; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 704, x17, x15, 704, x18)

inst_1061:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b; valaddr_reg:x16; val_offset:720; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 720, x17, x15, 720, x18)

inst_1062:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b; valaddr_reg:x16; val_offset:736; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 736, x17, x15, 736, x18)

inst_1063:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b; valaddr_reg:x16; val_offset:752; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 752, x17, x15, 752, x18)

inst_1064:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b; valaddr_reg:x16; val_offset:768; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 768, x17, x15, 768, x18)

inst_1065:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x7f99a9fada3f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xaad8325d6bb4b and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe7f99a9fada3f7; op2val:0xaad8325d6bb4b; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 784, x17, x15, 784, x18)

inst_1066:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c; valaddr_reg:x16; val_offset:800; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 800, x17, x15, 800, x18)

inst_1067:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c; valaddr_reg:x16; val_offset:816; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 816, x17, x15, 816, x18)

inst_1068:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c; valaddr_reg:x16; val_offset:832; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 832, x17, x15, 832, x18)

inst_1069:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c; valaddr_reg:x16; val_offset:848; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 848, x17, x15, 848, x18)

inst_1070:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x88f930524ffed and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa6c501e4f606c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe88f930524ffed; op2val:0xa6c501e4f606c; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 864, x17, x15, 864, x18)

inst_1071:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589; valaddr_reg:x16; val_offset:880; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 880, x17, x15, 880, x18)

inst_1072:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589; valaddr_reg:x16; val_offset:896; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 896, x17, x15, 896, x18)

inst_1073:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589; valaddr_reg:x16; val_offset:912; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 912, x17, x15, 912, x18)

inst_1074:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589; valaddr_reg:x16; val_offset:928; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 928, x17, x15, 928, x18)

inst_1075:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x0dcd5defec2a8 and fs2 == 0 and fe2 == 0x003 and fm2 == 0xe5cec70b9a589 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb0dcd5defec2a8; op2val:0x3e5cec70b9a589; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 944, x17, x15, 944, x18)

inst_1076:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288; valaddr_reg:x16; val_offset:960; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 960, x17, x15, 960, x18)

inst_1077:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288; valaddr_reg:x16; val_offset:976; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 976, x17, x15, 976, x18)

inst_1078:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288; valaddr_reg:x16; val_offset:992; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 992, x17, x15, 992, x18)

inst_1079:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288; valaddr_reg:x16; val_offset:1008; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1008, x17, x15, 1008, x18)

inst_1080:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf78ae78ab378c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x044cbae37e288 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf78ae78ab378c; op2val:0x1044cbae37e288; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1024, x17, x15, 1024, x18)

inst_1081:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a; valaddr_reg:x16; val_offset:1040; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1040, x17, x15, 1040, x18)

inst_1082:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a; valaddr_reg:x16; val_offset:1056; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1056, x17, x15, 1056, x18)

inst_1083:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a; valaddr_reg:x16; val_offset:1072; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1072, x17, x15, 1072, x18)

inst_1084:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a; valaddr_reg:x16; val_offset:1088; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1088, x17, x15, 1088, x18)

inst_1085:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcee9df62fba8e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8d92a7557356a and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecee9df62fba8e; op2val:0x8d92a7557356a; valaddr_reg:x16; val_offset:1104; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1104, x17, x15, 1104, x18)

inst_1086:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46; valaddr_reg:x16; val_offset:1120; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1120, x17, x15, 1120, x18)

inst_1087:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46; valaddr_reg:x16; val_offset:1136; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1136, x17, x15, 1136, x18)

inst_1088:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46; valaddr_reg:x16; val_offset:1152; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1152, x17, x15, 1152, x18)

inst_1089:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46; valaddr_reg:x16; val_offset:1168; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1168, x17, x15, 1168, x18)

inst_1090:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xeed1b73792322 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8471bfeb66e46 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feeed1b73792322; op2val:0x8471bfeb66e46; valaddr_reg:x16; val_offset:1184; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1184, x17, x15, 1184, x18)

inst_1091:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea; valaddr_reg:x16; val_offset:1200; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1200, x17, x15, 1200, x18)

inst_1092:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea; valaddr_reg:x16; val_offset:1216; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1216, x17, x15, 1216, x18)

inst_1093:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea; valaddr_reg:x16; val_offset:1232; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1232, x17, x15, 1232, x18)

inst_1094:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea; valaddr_reg:x16; val_offset:1248; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1248, x17, x15, 1248, x18)

inst_1095:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xb8074a5515862 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x94ef9192c64ea and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feb8074a5515862; op2val:0x94ef9192c64ea; valaddr_reg:x16; val_offset:1264; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1264, x17, x15, 1264, x18)

inst_1096:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa; valaddr_reg:x16; val_offset:1280; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1280, x17, x15, 1280, x18)

inst_1097:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa; valaddr_reg:x16; val_offset:1296; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1296, x17, x15, 1296, x18)

inst_1098:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa; valaddr_reg:x16; val_offset:1312; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1312, x17, x15, 1312, x18)

inst_1099:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa; valaddr_reg:x16; val_offset:1328; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1328, x17, x15, 1328, x18)

inst_1100:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf6c459933bd24 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8259c3a747daa and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef6c459933bd24; op2val:0x8259c3a747daa; valaddr_reg:x16; val_offset:1344; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1344, x17, x15, 1344, x18)

inst_1101:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983; valaddr_reg:x16; val_offset:1360; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1360, x17, x15, 1360, x18)

inst_1102:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983; valaddr_reg:x16; val_offset:1376; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1376, x17, x15, 1376, x18)

inst_1103:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983; valaddr_reg:x16; val_offset:1392; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1392, x17, x15, 1392, x18)

inst_1104:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983; valaddr_reg:x16; val_offset:1408; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1408, x17, x15, 1408, x18)

inst_1105:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93604e03c0a3c and fs2 == 0 and fe2 == 0x001 and fm2 == 0x44eff7bc2b983 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93604e03c0a3c; op2val:0x144eff7bc2b983; valaddr_reg:x16; val_offset:1424; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1424, x17, x15, 1424, x18)

inst_1106:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea; valaddr_reg:x16; val_offset:1440; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1440, x17, x15, 1440, x18)

inst_1107:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea; valaddr_reg:x16; val_offset:1456; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1456, x17, x15, 1456, x18)

inst_1108:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea; valaddr_reg:x16; val_offset:1472; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1472, x17, x15, 1472, x18)

inst_1109:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea; valaddr_reg:x16; val_offset:1488; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1488, x17, x15, 1488, x18)

inst_1110:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x49e1d2a2c3850 and fs2 == 0 and fe2 == 0x004 and fm2 == 0x8d546e64735ea and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa49e1d2a2c3850; op2val:0x48d546e64735ea; valaddr_reg:x16; val_offset:1504; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1504, x17, x15, 1504, x18)

inst_1111:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa; valaddr_reg:x16; val_offset:1520; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1520, x17, x15, 1520, x18)

inst_1112:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa; valaddr_reg:x16; val_offset:1536; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1536, x17, x15, 1536, x18)

inst_1113:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa; valaddr_reg:x16; val_offset:1552; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1552, x17, x15, 1552, x18)

inst_1114:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa; valaddr_reg:x16; val_offset:1568; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1568, x17, x15, 1568, x18)

inst_1115:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf0d78fd605616 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x07cf69972dffa and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf0d78fd605616; op2val:0x107cf69972dffa; valaddr_reg:x16; val_offset:1584; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1584, x17, x15, 1584, x18)

inst_1116:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314; valaddr_reg:x16; val_offset:1600; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1600, x17, x15, 1600, x18)

inst_1117:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314; valaddr_reg:x16; val_offset:1616; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1616, x17, x15, 1616, x18)

inst_1118:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314; valaddr_reg:x16; val_offset:1632; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1632, x17, x15, 1632, x18)

inst_1119:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314; valaddr_reg:x16; val_offset:1648; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1648, x17, x15, 1648, x18)

inst_1120:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xa9015f9c063d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x34669ba8df314 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fda9015f9c063d0; op2val:0x134669ba8df314; valaddr_reg:x16; val_offset:1664; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1664, x17, x15, 1664, x18)

inst_1121:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9; valaddr_reg:x16; val_offset:1680; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1680, x17, x15, 1680, x18)

inst_1122:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9; valaddr_reg:x16; val_offset:1696; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1696, x17, x15, 1696, x18)

inst_1123:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9; valaddr_reg:x16; val_offset:1712; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1712, x17, x15, 1712, x18)

inst_1124:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9; valaddr_reg:x16; val_offset:1728; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1728, x17, x15, 1728, x18)

inst_1125:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x007c3c0d49b24 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xff08003f7aac9 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc007c3c0d49b24; op2val:0x2ff08003f7aac9; valaddr_reg:x16; val_offset:1744; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1744, x17, x15, 1744, x18)

inst_1126:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d; valaddr_reg:x16; val_offset:1760; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1760, x17, x15, 1760, x18)

inst_1127:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d; valaddr_reg:x16; val_offset:1776; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1776, x17, x15, 1776, x18)

inst_1128:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d; valaddr_reg:x16; val_offset:1792; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1792, x17, x15, 1792, x18)

inst_1129:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d; valaddr_reg:x16; val_offset:1808; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1808, x17, x15, 1808, x18)

inst_1130:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xcbc0383e7371d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8e8bf9241d21d and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fecbc0383e7371d; op2val:0x8e8bf9241d21d; valaddr_reg:x16; val_offset:1824; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1824, x17, x15, 1824, x18)

inst_1131:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c; valaddr_reg:x16; val_offset:1840; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1840, x17, x15, 1840, x18)

inst_1132:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c; valaddr_reg:x16; val_offset:1856; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1856, x17, x15, 1856, x18)

inst_1133:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c; valaddr_reg:x16; val_offset:1872; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1872, x17, x15, 1872, x18)

inst_1134:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c; valaddr_reg:x16; val_offset:1888; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1888, x17, x15, 1888, x18)

inst_1135:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x5b4fc628036d0 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x7963e401c3d5c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd5b4fc628036d0; op2val:0x17963e401c3d5c; valaddr_reg:x16; val_offset:1904; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1904, x17, x15, 1904, x18)

inst_1136:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e; valaddr_reg:x16; val_offset:1920; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1920, x17, x15, 1920, x18)

inst_1137:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e; valaddr_reg:x16; val_offset:1936; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1936, x17, x15, 1936, x18)

inst_1138:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e; valaddr_reg:x16; val_offset:1952; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1952, x17, x15, 1952, x18)

inst_1139:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e; valaddr_reg:x16; val_offset:1968; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1968, x17, x15, 1968, x18)

inst_1140:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x0defd802a3484 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xf2c85d57d5f4e and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe0defd802a3484; op2val:0xf2c85d57d5f4e; valaddr_reg:x16; val_offset:1984; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1984, x17, x15, 1984, x18)

inst_1141:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7; valaddr_reg:x16; val_offset:2000; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 2000, x17, x15, 2000, x18)

inst_1142:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7; valaddr_reg:x16; val_offset:2016; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_10)

inst_1143:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7; valaddr_reg:x16; val_offset:0; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 0, x17, x15, 0, x18)

inst_1144:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7; valaddr_reg:x16; val_offset:16; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 16, x17, x15, 16, x18)

inst_1145:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x19b60760df248 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xd145647273fb7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc19b60760df248; op2val:0x2d145647273fb7; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 32, x17, x15, 32, x18)

inst_1146:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2; valaddr_reg:x16; val_offset:48; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 48, x17, x15, 48, x18)

inst_1147:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2; valaddr_reg:x16; val_offset:64; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 64, x17, x15, 64, x18)

inst_1148:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2; valaddr_reg:x16; val_offset:80; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 80, x17, x15, 80, x18)

inst_1149:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2; valaddr_reg:x16; val_offset:96; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 96, x17, x15, 96, x18)

inst_1150:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x91534f78dc928 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x469908ef336d2 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb91534f78dc928; op2val:0x3469908ef336d2; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 112, x17, x15, 112, x18)

inst_1151:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334; valaddr_reg:x16; val_offset:128; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 128, x17, x15, 128, x18)

inst_1152:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334; valaddr_reg:x16; val_offset:144; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 144, x17, x15, 144, x18)

inst_1153:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334; valaddr_reg:x16; val_offset:160; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 160, x17, x15, 160, x18)

inst_1154:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334; valaddr_reg:x16; val_offset:176; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 176, x17, x15, 176, x18)

inst_1155:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xdf4b276514808 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x117819828a334 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcdf4b276514808; op2val:0x2117819828a334; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 192, x17, x15, 192, x18)

inst_1156:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66; valaddr_reg:x16; val_offset:208; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 208, x17, x15, 208, x18)

inst_1157:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66; valaddr_reg:x16; val_offset:224; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 224, x17, x15, 224, x18)

inst_1158:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66; valaddr_reg:x16; val_offset:240; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 240, x17, x15, 240, x18)

inst_1159:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66; valaddr_reg:x16; val_offset:256; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 256, x17, x15, 256, x18)

inst_1160:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf0398f2c43690 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8411b4befbb66 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef0398f2c43690; op2val:0x8411b4befbb66; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 272, x17, x15, 272, x18)

inst_1161:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7; valaddr_reg:x16; val_offset:288; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 288, x17, x15, 288, x18)

inst_1162:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7; valaddr_reg:x16; val_offset:304; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 304, x17, x15, 304, x18)

inst_1163:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7; valaddr_reg:x16; val_offset:320; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 320, x17, x15, 320, x18)

inst_1164:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7; valaddr_reg:x16; val_offset:336; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 336, x17, x15, 336, x18)

inst_1165:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc615cdadb1bd6 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x905349fccaba7 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec615cdadb1bd6; op2val:0x905349fccaba7; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 352, x17, x15, 352, x18)

inst_1166:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852; valaddr_reg:x16; val_offset:368; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 368, x17, x15, 368, x18)

inst_1167:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852; valaddr_reg:x16; val_offset:384; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 384, x17, x15, 384, x18)

inst_1168:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852; valaddr_reg:x16; val_offset:400; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 400, x17, x15, 400, x18)

inst_1169:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852; valaddr_reg:x16; val_offset:416; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 416, x17, x15, 416, x18)

inst_1170:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x89fea92fa5aec and fs2 == 0 and fe2 == 0x001 and fm2 == 0x4caca9e6ef852 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd89fea92fa5aec; op2val:0x14caca9e6ef852; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 432, x17, x15, 432, x18)

inst_1171:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c; valaddr_reg:x16; val_offset:448; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 448, x17, x15, 448, x18)

inst_1172:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c; valaddr_reg:x16; val_offset:464; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 464, x17, x15, 464, x18)

inst_1173:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c; valaddr_reg:x16; val_offset:480; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 480, x17, x15, 480, x18)

inst_1174:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c; valaddr_reg:x16; val_offset:496; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 496, x17, x15, 496, x18)

inst_1175:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed6e267fbb404 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x84d1305d6a52c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed6e267fbb404; op2val:0x84d1305d6a52c; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 512, x17, x15, 512, x18)

inst_1176:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea; valaddr_reg:x16; val_offset:528; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 528, x17, x15, 528, x18)

inst_1177:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea; valaddr_reg:x16; val_offset:544; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 544, x17, x15, 544, x18)

inst_1178:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea; valaddr_reg:x16; val_offset:560; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 560, x17, x15, 560, x18)

inst_1179:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea; valaddr_reg:x16; val_offset:576; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 576, x17, x15, 576, x18)

inst_1180:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x47a11c08e6900 and fs2 == 0 and fe2 == 0x006 and fm2 == 0x900fd5e7998ea and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3f847a11c08e6900; op2val:0x6900fd5e7998ea; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 592, x17, x15, 592, x18)

inst_1181:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4; valaddr_reg:x16; val_offset:608; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 608, x17, x15, 608, x18)

inst_1182:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4; valaddr_reg:x16; val_offset:624; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 624, x17, x15, 624, x18)

inst_1183:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4; valaddr_reg:x16; val_offset:640; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 640, x17, x15, 640, x18)

inst_1184:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4; valaddr_reg:x16; val_offset:656; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 656, x17, x15, 656, x18)

inst_1185:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3a971bda4650f and fs2 == 0 and fe2 == 0x000 and fm2 == 0xd0525f2eeabd4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3a971bda4650f; op2val:0xd0525f2eeabd4; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 672, x17, x15, 672, x18)

inst_1186:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18; valaddr_reg:x16; val_offset:688; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 688, x17, x15, 688, x18)

inst_1187:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18; valaddr_reg:x16; val_offset:704; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 704, x17, x15, 704, x18)

inst_1188:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18; valaddr_reg:x16; val_offset:720; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 720, x17, x15, 720, x18)

inst_1189:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18; valaddr_reg:x16; val_offset:736; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 736, x17, x15, 736, x18)

inst_1190:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa1ecfc9e85aba and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9cd0035fc8d18 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea1ecfc9e85aba; op2val:0x9cd0035fc8d18; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 752, x17, x15, 752, x18)

inst_1191:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807; valaddr_reg:x16; val_offset:768; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 768, x17, x15, 768, x18)

inst_1192:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807; valaddr_reg:x16; val_offset:784; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 784, x17, x15, 784, x18)

inst_1193:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807; valaddr_reg:x16; val_offset:800; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 800, x17, x15, 800, x18)

inst_1194:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807; valaddr_reg:x16; val_offset:816; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 816, x17, x15, 816, x18)

inst_1195:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x7e400e1064944 and fs2 == 0 and fe2 == 0x002 and fm2 == 0x56e5545361807 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc7e400e1064944; op2val:0x256e5545361807; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 832, x17, x15, 832, x18)

inst_1196:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30; valaddr_reg:x16; val_offset:848; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 848, x17, x15, 848, x18)

inst_1197:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30; valaddr_reg:x16; val_offset:864; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 864, x17, x15, 864, x18)

inst_1198:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30; valaddr_reg:x16; val_offset:880; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 880, x17, x15, 880, x18)

inst_1199:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30; valaddr_reg:x16; val_offset:896; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 896, x17, x15, 896, x18)

inst_1200:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf52c7fe81f2ca and fs2 == 0 and fe2 == 0x000 and fm2 == 0x82c3d7a299a30 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef52c7fe81f2ca; op2val:0x82c3d7a299a30; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 912, x17, x15, 912, x18)

inst_1201:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef306047d624fa; op2val:0x8354177563369; valaddr_reg:x16; val_offset:928; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 928, x17, x15, 928, x18)

inst_1202:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef306047d624fa; op2val:0x8354177563369; valaddr_reg:x16; val_offset:944; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 944, x17, x15, 944, x18)

inst_1203:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef306047d624fa; op2val:0x8354177563369; valaddr_reg:x16; val_offset:960; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 960, x17, x15, 960, x18)

inst_1204:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef306047d624fa; op2val:0x8354177563369; valaddr_reg:x16; val_offset:976; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 976, x17, x15, 976, x18)

inst_1205:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xf306047d624fa and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8354177563369 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fef306047d624fa; op2val:0x8354177563369; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 992, x17, x15, 992, x18)

inst_1206:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976; valaddr_reg:x16; val_offset:1008; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1008, x17, x15, 1008, x18)

inst_1207:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976; valaddr_reg:x16; val_offset:1024; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1024, x17, x15, 1024, x18)

inst_1208:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976; valaddr_reg:x16; val_offset:1040; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1040, x17, x15, 1040, x18)

inst_1209:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976; valaddr_reg:x16; val_offset:1056; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1056, x17, x15, 1056, x18)

inst_1210:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xd58db6f8a02f7 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8b92246f9d976 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fed58db6f8a02f7; op2val:0x8b92246f9d976; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1072, x17, x15, 1072, x18)

inst_1211:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a; valaddr_reg:x16; val_offset:1088; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1088, x17, x15, 1088, x18)

inst_1212:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a; valaddr_reg:x16; val_offset:1104; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1104, x17, x15, 1104, x18)

inst_1213:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a; valaddr_reg:x16; val_offset:1120; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1120, x17, x15, 1120, x18)

inst_1214:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a; valaddr_reg:x16; val_offset:1136; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1136, x17, x15, 1136, x18)

inst_1215:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xa7ff36f0082a1 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x9a9131253762a and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fea7ff36f0082a1; op2val:0x9a9131253762a; valaddr_reg:x16; val_offset:1152; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1152, x17, x15, 1152, x18)

inst_1216:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc; valaddr_reg:x16; val_offset:1168; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1168, x17, x15, 1168, x18)

inst_1217:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc; valaddr_reg:x16; val_offset:1184; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1184, x17, x15, 1184, x18)

inst_1218:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc; valaddr_reg:x16; val_offset:1200; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1200, x17, x15, 1200, x18)

inst_1219:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc; valaddr_reg:x16; val_offset:1216; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1216, x17, x15, 1216, x18)

inst_1220:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xefae553c5d72a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8436cd2d997bc and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feefae553c5d72a; op2val:0x8436cd2d997bc; valaddr_reg:x16; val_offset:1232; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1232, x17, x15, 1232, x18)

inst_1221:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd; valaddr_reg:x16; val_offset:1248; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1248, x17, x15, 1248, x18)

inst_1222:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd; valaddr_reg:x16; val_offset:1264; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1264, x17, x15, 1264, x18)

inst_1223:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd; valaddr_reg:x16; val_offset:1280; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1280, x17, x15, 1280, x18)

inst_1224:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd; valaddr_reg:x16; val_offset:1296; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1296, x17, x15, 1296, x18)

inst_1225:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x2777568687b1d and fs2 == 0 and fe2 == 0x000 and fm2 == 0xddce30c1f58dd and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe2777568687b1d; op2val:0xddce30c1f58dd; valaddr_reg:x16; val_offset:1312; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1312, x17, x15, 1312, x18)

inst_1226:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_1227:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169; valaddr_reg:x16; val_offset:1344; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1344, x17, x15, 1344, x18)

inst_1228:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169; valaddr_reg:x16; val_offset:1360; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1360, x17, x15, 1360, x18)

inst_1229:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169; valaddr_reg:x16; val_offset:1376; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1376, x17, x15, 1376, x18)

inst_1230:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x943c1ac39c5ea and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa21fa4854a169 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe943c1ac39c5ea; op2val:0xa21fa4854a169; valaddr_reg:x16; val_offset:1392; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1392, x17, x15, 1392, x18)

inst_1231:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4; valaddr_reg:x16; val_offset:1408; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1408, x17, x15, 1408, x18)

inst_1232:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4; valaddr_reg:x16; val_offset:1424; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1424, x17, x15, 1424, x18)

inst_1233:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4; valaddr_reg:x16; val_offset:1440; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1440, x17, x15, 1440, x18)

inst_1234:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4; valaddr_reg:x16; val_offset:1456; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1456, x17, x15, 1456, x18)

inst_1235:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x2b1fedbbf1d4c and fs2 == 0 and fe2 == 0x002 and fm2 == 0xb62f639c243d4 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc2b1fedbbf1d4c; op2val:0x2b62f639c243d4; valaddr_reg:x16; val_offset:1472; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1472, x17, x15, 1472, x18)

inst_1236:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36; valaddr_reg:x16; val_offset:1488; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1488, x17, x15, 1488, x18)

inst_1237:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36; valaddr_reg:x16; val_offset:1504; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1504, x17, x15, 1504, x18)

inst_1238:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36; valaddr_reg:x16; val_offset:1520; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1520, x17, x15, 1520, x18)

inst_1239:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36; valaddr_reg:x16; val_offset:1536; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1536, x17, x15, 1536, x18)

inst_1240:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xc997814fb867d and fs2 == 0 and fe2 == 0x000 and fm2 == 0x8f3826f3bfa36 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fec997814fb867d; op2val:0x8f3826f3bfa36; valaddr_reg:x16; val_offset:1552; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1552, x17, x15, 1552, x18)

inst_1241:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d; valaddr_reg:x16; val_offset:1568; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1568, x17, x15, 1568, x18)

inst_1242:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d; valaddr_reg:x16; val_offset:1584; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1584, x17, x15, 1584, x18)

inst_1243:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d; valaddr_reg:x16; val_offset:1600; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1600, x17, x15, 1600, x18)

inst_1244:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d; valaddr_reg:x16; val_offset:1616; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1616, x17, x15, 1616, x18)

inst_1245:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8bf8eb1452494 and fs2 == 0 and fe2 == 0x000 and fm2 == 0xa581aab66927d and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8bf8eb1452494; op2val:0xa581aab66927d; valaddr_reg:x16; val_offset:1632; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1632, x17, x15, 1632, x18)

inst_1246:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f; valaddr_reg:x16; val_offset:1648; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1648, x17, x15, 1648, x18)

inst_1247:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f; valaddr_reg:x16; val_offset:1664; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1664, x17, x15, 1664, x18)

inst_1248:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f; valaddr_reg:x16; val_offset:1680; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1680, x17, x15, 1680, x18)

inst_1249:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f; valaddr_reg:x16; val_offset:1696; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1696, x17, x15, 1696, x18)

inst_1250:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x636b9479bd502 and fs2 == 0 and fe2 == 0x001 and fm2 == 0x70c7c54fcdd5f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd636b9479bd502; op2val:0x170c7c54fcdd5f; valaddr_reg:x16; val_offset:1712; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1712, x17, x15, 1712, x18)

inst_1251:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1; valaddr_reg:x16; val_offset:1728; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1728, x17, x15, 1728, x18)

inst_1252:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1; valaddr_reg:x16; val_offset:1744; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1744, x17, x15, 1744, x18)

inst_1253:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1; valaddr_reg:x16; val_offset:1760; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1760, x17, x15, 1760, x18)

inst_1254:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1; valaddr_reg:x16; val_offset:1776; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1776, x17, x15, 1776, x18)

inst_1255:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0557ad7269734 and fs2 == 0 and fe2 == 0x001 and fm2 == 0xf5888ff9c29f1 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0557ad7269734; op2val:0x1f5888ff9c29f1; valaddr_reg:x16; val_offset:1792; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1792, x17, x15, 1792, x18)

inst_1256:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c; valaddr_reg:x16; val_offset:1808; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1808, x17, x15, 1808, x18)

inst_1257:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c; valaddr_reg:x16; val_offset:1824; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1824, x17, x15, 1824, x18)

inst_1258:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c; valaddr_reg:x16; val_offset:1840; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1840, x17, x15, 1840, x18)

inst_1259:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c; valaddr_reg:x16; val_offset:1856; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1856, x17, x15, 1856, x18)

inst_1260:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x7a40325eb0860 and fs2 == 0 and fe2 == 0x003 and fm2 == 0x5a857ceaaf63c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb7a40325eb0860; op2val:0x35a857ceaaf63c; valaddr_reg:x16; val_offset:1872; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1872, x17, x15, 1872, x18)

inst_1261:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6fd220a896260; op2val:0xb; valaddr_reg:x16; val_offset:1888; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1888, x17, x15, 1888, x18)

inst_1262:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6fd220a896260; op2val:0xb; valaddr_reg:x16; val_offset:1904; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1904, x17, x15, 1904, x18)

inst_1263:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6fd220a896260; op2val:0xb; valaddr_reg:x16; val_offset:1920; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1920, x17, x15, 1920, x18)

inst_1264:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6fd220a896260; op2val:0xb; valaddr_reg:x16; val_offset:1936; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1936, x17, x15, 1936, x18)

inst_1265:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x6fd220a896260 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000b and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc6fd220a896260; op2val:0xb; valaddr_reg:x16; val_offset:1952; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1952, x17, x15, 1952, x18)

inst_1266:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd81c6cc0f18586; op2val:0x5; valaddr_reg:x16; val_offset:1968; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1968, x17, x15, 1968, x18)

inst_1267:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd81c6cc0f18586; op2val:0x5; valaddr_reg:x16; val_offset:1984; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1984, x17, x15, 1984, x18)

inst_1268:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd81c6cc0f18586; op2val:0x5; valaddr_reg:x16; val_offset:2000; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 2000, x17, x15, 2000, x18)

inst_1269:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd81c6cc0f18586; op2val:0x5; valaddr_reg:x16; val_offset:2016; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_11)

inst_1270:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x81c6cc0f18586 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd81c6cc0f18586; op2val:0x5; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1271:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf3d2ac51134f2; op2val:0x4; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_1272:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf3d2ac51134f2; op2val:0x4; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_1273:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf3d2ac51134f2; op2val:0x4; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_1274:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf3d2ac51134f2; op2val:0x4; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_1275:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf3d2ac51134f2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf3d2ac51134f2; op2val:0x4; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_1276:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6055f0d13871f; op2val:0x3; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_1277:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6055f0d13871f; op2val:0x3; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_1278:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6055f0d13871f; op2val:0x3; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_1279:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6055f0d13871f; op2val:0x3; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_1280:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x6055f0d13871f and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe6055f0d13871f; op2val:0x3; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_1281:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64f39fb12d326; op2val:0x6; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_1282:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64f39fb12d326; op2val:0x6; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_1283:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64f39fb12d326; op2val:0x6; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_1284:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64f39fb12d326; op2val:0x6; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_1285:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x64f39fb12d326 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd64f39fb12d326; op2val:0x6; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_1286:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfba632b80a336; op2val:0x4; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_1287:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfba632b80a336; op2val:0x4; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_1288:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfba632b80a336; op2val:0x4; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_1289:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfba632b80a336; op2val:0x4; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_1290:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xfba632b80a336 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdfba632b80a336; op2val:0x4; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_1291:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5d4af8cd8f150; op2val:0x2f; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_1292:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5d4af8cd8f150; op2val:0x2f; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_1293:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5d4af8cd8f150; op2val:0x2f; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_1294:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5d4af8cd8f150; op2val:0x2f; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_1295:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x5d4af8cd8f150 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002f and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa5d4af8cd8f150; op2val:0x2f; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_1296:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6aff130a5c178; op2val:0x17; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_1297:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6aff130a5c178; op2val:0x17; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_1298:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6aff130a5c178; op2val:0x17; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_1299:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6aff130a5c178; op2val:0x17; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_1300:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x6aff130a5c178 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000017 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb6aff130a5c178; op2val:0x17; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_1301:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb791362c46e498; op2val:0x16; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_1302:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb791362c46e498; op2val:0x16; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_1303:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb791362c46e498; op2val:0x16; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_1304:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb791362c46e498; op2val:0x16; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_1305:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x791362c46e498 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000016 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb791362c46e498; op2val:0x16; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_1306:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd33a37e151ddae; op2val:0x7; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_1307:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd33a37e151ddae; op2val:0x7; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_1308:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd33a37e151ddae; op2val:0x7; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_1309:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd33a37e151ddae; op2val:0x7; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_1310:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x33a37e151ddae and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd33a37e151ddae; op2val:0x7; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_1311:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8e6ec983cd445; op2val:0x3; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_1312:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8e6ec983cd445; op2val:0x3; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_1313:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8e6ec983cd445; op2val:0x3; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_1314:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8e6ec983cd445; op2val:0x3; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_1315:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x8e6ec983cd445 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe8e6ec983cd445; op2val:0x3; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_1316:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adb43458fbbc; op2val:0x7; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_1317:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adb43458fbbc; op2val:0x7; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_1318:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adb43458fbbc; op2val:0x7; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_1319:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adb43458fbbc; op2val:0x7; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_1320:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1adb43458fbbc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1adb43458fbbc; op2val:0x7; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_1321:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbaab85a31631a; op2val:0x5; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_1322:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbaab85a31631a; op2val:0x5; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_1323:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbaab85a31631a; op2val:0x5; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_1324:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbaab85a31631a; op2val:0x5; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_1325:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xbaab85a31631a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdbaab85a31631a; op2val:0x5; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_1326:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9ad38e3192d48; op2val:0x14; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_1327:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9ad38e3192d48; op2val:0x14; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_1328:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9ad38e3192d48; op2val:0x14; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_1329:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9ad38e3192d48; op2val:0x14; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_1330:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0x9ad38e3192d48 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000014 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fb9ad38e3192d48; op2val:0x14; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_1331:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4aca7255a6f18; op2val:0x3; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_1332:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4aca7255a6f18; op2val:0x3; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_1333:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4aca7255a6f18; op2val:0x3; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_1334:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4aca7255a6f18; op2val:0x3; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_1335:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4aca7255a6f18 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4aca7255a6f18; op2val:0x3; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_1336:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdff23853e07a0e; op2val:0x4; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_1337:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdff23853e07a0e; op2val:0x4; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_1338:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdff23853e07a0e; op2val:0x4; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_1339:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdff23853e07a0e; op2val:0x4; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_1340:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xff23853e07a0e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdff23853e07a0e; op2val:0x4; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_1341:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe051ce52e23306; op2val:0x4; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_1342:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe051ce52e23306; op2val:0x4; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_1343:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe051ce52e23306; op2val:0x4; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_1344:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe051ce52e23306; op2val:0x4; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_1345:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x051ce52e23306 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe051ce52e23306; op2val:0x4; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_1346:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe13c2805615f05; op2val:0x4; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_1347:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe13c2805615f05; op2val:0x4; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_1348:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe13c2805615f05; op2val:0x4; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_1349:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe13c2805615f05; op2val:0x4; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_1350:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x13c2805615f05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe13c2805615f05; op2val:0x4; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_1351:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf7ccb699a28c0; op2val:0x8; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_1352:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf7ccb699a28c0; op2val:0x8; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_1353:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf7ccb699a28c0; op2val:0x8; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_1354:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf7ccb699a28c0; op2val:0x8; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_1355:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xf7ccb699a28c0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fcf7ccb699a28c0; op2val:0x8; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_1356:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa381b863788580; op2val:0x34; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_1357:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa381b863788580; op2val:0x34; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_1358:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa381b863788580; op2val:0x34; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_1359:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa381b863788580; op2val:0x34; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_1360:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x381b863788580 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000034 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa381b863788580; op2val:0x34; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_1361:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4adc6ee8d6da9; op2val:0x3; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_1362:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4adc6ee8d6da9; op2val:0x3; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_1363:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4adc6ee8d6da9; op2val:0x3; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_1364:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4adc6ee8d6da9; op2val:0x3; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_1365:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x4adc6ee8d6da9 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe4adc6ee8d6da9; op2val:0x3; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_1366:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce59c4ba2c0268; op2val:0x8; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_1367:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce59c4ba2c0268; op2val:0x8; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_1368:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce59c4ba2c0268; op2val:0x8; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_1369:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce59c4ba2c0268; op2val:0x8; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_1370:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0xe59c4ba2c0268 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fce59c4ba2c0268; op2val:0x8; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_1371:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0ff900bcc0d10; op2val:0x8; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_1372:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0ff900bcc0d10; op2val:0x8; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_1373:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0ff900bcc0d10; op2val:0x8; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_1374:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0ff900bcc0d10; op2val:0x8; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_1375:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x0ff900bcc0d10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000008 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd0ff900bcc0d10; op2val:0x8; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_1376:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb3ee551bd5638; op2val:0x13; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_1377:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb3ee551bd5638; op2val:0x13; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_1378:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb3ee551bd5638; op2val:0x13; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_1379:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb3ee551bd5638; op2val:0x13; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_1380:
// fs1 == 0 and fe1 == 0x3fb and fm1 == 0xb3ee551bd5638 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000013 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fbb3ee551bd5638; op2val:0x13; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_1381:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5531b85583a; op2val:0x6; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_1382:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5531b85583a; op2val:0x6; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_1383:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5531b85583a; op2val:0x6; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_1384:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5531b85583a; op2val:0x6; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_1385:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x4d5531b85583a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd4d5531b85583a; op2val:0x6; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_1386:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf587e151f5a1e; op2val:0x4; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_1387:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf587e151f5a1e; op2val:0x4; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_1388:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf587e151f5a1e; op2val:0x4; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_1389:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf587e151f5a1e; op2val:0x4; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_1390:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xf587e151f5a1e and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdf587e151f5a1e; op2val:0x4; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_1391:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5986ddb4e3ec0; op2val:0x3; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_1392:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5986ddb4e3ec0; op2val:0x3; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_1393:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5986ddb4e3ec0; op2val:0x3; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_1394:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5986ddb4e3ec0; op2val:0x3; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_1395:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x5986ddb4e3ec0 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe5986ddb4e3ec0; op2val:0x3; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_1396:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe871ad5313dce5; op2val:0x3; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_12)

inst_1397:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe871ad5313dce5; op2val:0x3; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_1398:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe871ad5313dce5; op2val:0x3; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_1399:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe871ad5313dce5; op2val:0x3; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_1400:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x871ad5313dce5 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe871ad5313dce5; op2val:0x3; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_1401:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde5a110eaf20b2; op2val:0x4; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_1402:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde5a110eaf20b2; op2val:0x4; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_1403:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde5a110eaf20b2; op2val:0x4; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_1404:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde5a110eaf20b2; op2val:0x4; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_1405:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xe5a110eaf20b2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fde5a110eaf20b2; op2val:0x4; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_1406:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3d6eaf24e38ee; op2val:0x3; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_1407:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3d6eaf24e38ee; op2val:0x3; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_1408:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3d6eaf24e38ee; op2val:0x3; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_1409:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3d6eaf24e38ee; op2val:0x3; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_1410:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x3d6eaf24e38ee and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000003 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe3d6eaf24e38ee; op2val:0x3; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_1411:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe11f96e845ca05; op2val:0x4; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_1412:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe11f96e845ca05; op2val:0x4; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_1413:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe11f96e845ca05; op2val:0x4; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_1414:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe11f96e845ca05; op2val:0x4; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_1415:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x11f96e845ca05 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe11f96e845ca05; op2val:0x4; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_1416:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9b538840fef; op2val:0x2; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_1417:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9b538840fef; op2val:0x2; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_1418:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9b538840fef; op2val:0x2; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_1419:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9b538840fef; op2val:0x2; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_1420:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xed9b538840fef and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3feed9b538840fef; op2val:0x2; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_1421:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c3c125fde213; op2val:0x4; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_1422:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c3c125fde213; op2val:0x4; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_1423:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c3c125fde213; op2val:0x4; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_1424:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c3c125fde213; op2val:0x4; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_1425:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x1c3c125fde213 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe1c3c125fde213; op2val:0x4; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_1426:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9e8d628302a10; op2val:0x28; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_1427:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9e8d628302a10; op2val:0x28; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_1428:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9e8d628302a10; op2val:0x28; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_1429:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9e8d628302a10; op2val:0x28; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_1430:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x9e8d628302a10 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000028 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa9e8d628302a10; op2val:0x28; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_1431:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1ba2b891e3858; op2val:0x7; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_1432:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1ba2b891e3858; op2val:0x7; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_1433:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1ba2b891e3858; op2val:0x7; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_1434:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1ba2b891e3858; op2val:0x7; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_1435:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x1ba2b891e3858 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000007 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd1ba2b891e3858; op2val:0x7; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_1436:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe237f44d723492; op2val:0x4; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_1437:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe237f44d723492; op2val:0x4; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_1438:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe237f44d723492; op2val:0x4; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_1439:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe237f44d723492; op2val:0x4; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_1440:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0x237f44d723492 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000004 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fe237f44d723492; op2val:0x4; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_1441:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacd8daa8ccece; op2val:0x5; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_1442:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacd8daa8ccece; op2val:0x5; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_1443:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacd8daa8ccece; op2val:0x5; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_1444:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacd8daa8ccece; op2val:0x5; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_1445:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xacd8daa8ccece and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdacd8daa8ccece; op2val:0x5; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_1446:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93835f64d603a; op2val:0x5; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_1447:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93835f64d603a; op2val:0x5; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_1448:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93835f64d603a; op2val:0x5; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_1449:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93835f64d603a; op2val:0x5; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_1450:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93835f64d603a and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000005 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd93835f64d603a; op2val:0x5; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_1451:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52323192b58e2; op2val:0x6; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_1452:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52323192b58e2; op2val:0x6; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_1453:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52323192b58e2; op2val:0x6; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_1454:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52323192b58e2; op2val:0x6; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_1455:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0x52323192b58e2 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000006 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fd52323192b58e2; op2val:0x6; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_1456:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc50e5f6d4b6efc; op2val:0xc; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_1457:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc50e5f6d4b6efc; op2val:0xc; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_1458:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc50e5f6d4b6efc; op2val:0xc; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_1459:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc50e5f6d4b6efc; op2val:0xc; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_1460:
// fs1 == 0 and fe1 == 0x3fc and fm1 == 0x50e5f6d4b6efc and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000000c and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fc50e5f6d4b6efc; op2val:0xc; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_1461:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee30bb2fa23799; op2val:0x2; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_1462:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee30bb2fa23799; op2val:0x2; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_1463:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee30bb2fa23799; op2val:0x2; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_1464:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee30bb2fa23799; op2val:0x2; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_1465:
// fs1 == 0 and fe1 == 0x3fe and fm1 == 0xe30bb2fa23799 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x0000000000002 and rm_val == 0  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fee30bb2fa23799; op2val:0x2; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_1466:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and rm_val == 4  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa682ad08c2d120; op2val:0x2d; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_1467:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and rm_val == 3  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa682ad08c2d120; op2val:0x2d; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_1468:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa682ad08c2d120; op2val:0x2d; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_1469:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0x682ad08c2d120 and fs2 == 0 and fe2 == 0x000 and fm2 == 0x000000000002d and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fa682ad08c2d120; op2val:0x2d; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_1470:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and rm_val == 2  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_1471:
// fs1 == 0 and fe1 == 0x3fd and fm1 == 0xae4d63fafea86 and fs2 == 0 and fe2 == 0x002 and fm2 == 0xc8e81c6c2f341 and rm_val == 1  
// opcode: fmul.d ; op1:f10; op2:f11; dest:f12; op1val:0x3fdae4d63fafea86; op2val:0x2c8e81c6c2f341; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fmul.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x3fa682ad08c2d120
.dword 0x2d
.dword 0x3fdae4d63fafea86
.dword 0x2c8e81c6c2f341
.dword 0x3fdae4d63fafea86
.dword 0x2c8e81c6c2f341
.dword 0x3fdae4d63fafea86
.dword 0x3fdae4d63fafea86
.dword 0x3fdae4d63fafea86
.dword 0x3fdae4d63fafea86
.dword 0x3fdae4d63fafea86
.dword 0x2c8e81c6c2f341
.dword 0x3fe9891b0b26904e
.dword 0x1e1360cb3a0f6b
.dword 0x3fe9891b0b26904e
.dword 0x1e1360cb3a0f6b
.dword 0x3fe9891b0b26904e
.dword 0x1e1360cb3a0f6b
.dword 0x3fe9891b0b26904e
.dword 0x1e1360cb3a0f6b
.dword 0x3fe9891b0b26904e
.dword 0x1e1360cb3a0f6b
.dword 0x3fef05337d9798fa
.dword 0x18c20a29485c1b
.dword 0x3fef05337d9798fa
.dword 0x18c20a29485c1b
.dword 0x3fef05337d9798fa
.dword 0x18c20a29485c1b
.dword 0x3fef05337d9798fa
.dword 0x18c20a29485c1b
.dword 0x3fef05337d9798fa
.dword 0x18c20a29485c1b
.dword 0x3fd342aac39fad5a
.dword 0x33eff0646f6b06
.dword 0x3fd342aac39fad5a
.dword 0x33eff0646f6b06
.dword 0x3fd342aac39fad5a
.dword 0x33eff0646f6b06
.dword 0x3fd342aac39fad5a
.dword 0x33eff0646f6b06
.dword 0x3fd342aac39fad5a
.dword 0x33eff0646f6b06
.dword 0x3fe8ab303a513b04
.dword 0x1f21efa502f40a
.dword 0x3fe8ab303a513b04
.dword 0x1f21efa502f40a
.dword 0x3fe8ab303a513b04
.dword 0x1f21efa502f40a
.dword 0x3fe8ab303a513b04
.dword 0x1f21efa502f40a
.dword 0x3fe8ab303a513b04
.dword 0x1f21efa502f40a
.dword 0x3fce08dd382d6120
.dword 0x39920b6e8a3671
.dword 0x3fce08dd382d6120
.dword 0x39920b6e8a3671
.dword 0x3fce08dd382d6120
.dword 0x39920b6e8a3671
.dword 0x3fce08dd382d6120
.dword 0x39920b6e8a3671
.dword 0x3fce08dd382d6120
.dword 0x39920b6e8a3671
.dword 0x3fe0defcb6e91767
.dword 0x26c2c9cfbfa744
.dword 0x3fe0defcb6e91767
.dword 0x26c2c9cfbfa744
.dword 0x3fe0defcb6e91767
.dword 0x26c2c9cfbfa744
.dword 0x3fe0defcb6e91767
.dword 0x26c2c9cfbfa744
.dword 0x3fe0defcb6e91767
.dword 0x26c2c9cfbfa744
.dword 0x3fc8209bde69354c
.dword 0x3fd4c0454e5bf1
.dword 0x3fc8209bde69354c
.dword 0x3fd4c0454e5bf1
.dword 0x3fc8209bde69354c
.dword 0x3fd4c0454e5bf1
.dword 0x3fc8209bde69354c
.dword 0x3fd4c0454e5bf1
.dword 0x3fc8209bde69354c
.dword 0x3fd4c0454e5bf1
.dword 0x3fe3424eb2bec806
.dword 0x23f04fb357f6eb
.dword 0x3fe3424eb2bec806
.dword 0x23f04fb357f6eb
.dword 0x3fe3424eb2bec806
.dword 0x23f04fb357f6eb
.dword 0x3fe3424eb2bec806
.dword 0x23f04fb357f6eb
.dword 0x3fe3424eb2bec806
.dword 0x23f04fb357f6eb
.dword 0x3fe2365e1f6cd3d6
.dword 0x2515a62265c9f6
.dword 0x3fe2365e1f6cd3d6
.dword 0x2515a62265c9f6
.dword 0x3fe2365e1f6cd3d6
.dword 0x2515a62265c9f6
.dword 0x3fe2365e1f6cd3d6
.dword 0x2515a62265c9f6
.dword 0x3fe2365e1f6cd3d6
.dword 0x2515a62265c9f6
.dword 0x3fe3ed282f314327
.dword 0x23455b2b39dfa7
.dword 0x3fe3ed282f314327
.dword 0x23455b2b39dfa7
.dword 0x3fe3ed282f314327
.dword 0x23455b2b39dfa7
.dword 0x3fe3ed282f314327
.dword 0x23455b2b39dfa7
.dword 0x3fe3ed282f314327
.dword 0x23455b2b39dfa7
.dword 0x3fd7dd12a857b4e4
.dword 0x30176af992548e
.dword 0x3fd7dd12a857b4e4
.dword 0x30176af992548e
.dword 0x3fd7dd12a857b4e4
.dword 0x30176af992548e
.dword 0x3fd7dd12a857b4e4
.dword 0x30176af992548e
.dword 0x3fd7dd12a857b4e4
.dword 0x30176af992548e
.dword 0x3feca030e0aaaf93
.dword 0x1ad43909486b87
.dword 0x3feca030e0aaaf93
.dword 0x1ad43909486b87
.dword 0x3feca030e0aaaf93
.dword 0x1ad43909486b87
.dword 0x3feca030e0aaaf93
.dword 0x1ad43909486b87
.dword 0x3feca030e0aaaf93
.dword 0x1ad43909486b87
.dword 0x3fb54050ea62efd0
.dword 0x5211cd43fb2bd6
.dword 0x3fb54050ea62efd0
.dword 0x5211cd43fb2bd6
.dword 0x3fb54050ea62efd0
.dword 0x5211cd43fb2bd6
.dword 0x3fb54050ea62efd0
.dword 0x5211cd43fb2bd6
.dword 0x3fb54050ea62efd0
.dword 0x5211cd43fb2bd6
.dword 0x3fd213173bcdd44a
.dword 0x353eccf46208e3
.dword 0x3fd213173bcdd44a
.dword 0x353eccf46208e3
.dword 0x3fd213173bcdd44a
.dword 0x353eccf46208e3
.dword 0x3fd213173bcdd44a
.dword 0x353eccf46208e3
.dword 0x3fd213173bcdd44a
.dword 0x353eccf46208e3
.dword 0x3fc2193539b2d7f8
.dword 0x45379ead9c4597
.dword 0x3fc2193539b2d7f8
.dword 0x45379ead9c4597
.dword 0x3fc2193539b2d7f8
.dword 0x45379ead9c4597
.dword 0x3fc2193539b2d7f8
.dword 0x45379ead9c4597
.dword 0x3fc2193539b2d7f8
.dword 0x45379ead9c4597
.dword 0x3fe3de273ea72d5e
.dword 0x2353e8b840f39c
.dword 0x3fe3de273ea72d5e
.dword 0x2353e8b840f39c
.dword 0x3fe3de273ea72d5e
.dword 0x2353e8b840f39c
.dword 0x3fe3de273ea72d5e
.dword 0x2353e8b840f39c
.dword 0x3fe3de273ea72d5e
.dword 0x2353e8b840f39c
.dword 0x3fee4c8a95892dc8
.dword 0x1958ede343dbd7
.dword 0x3fee4c8a95892dc8
.dword 0x1958ede343dbd7
.dword 0x3fee4c8a95892dc8
.dword 0x1958ede343dbd7
.dword 0x3fee4c8a95892dc8
.dword 0x1958ede343dbd7
.dword 0x3fee4c8a95892dc8
.dword 0x1958ede343dbd7
.dword 0x3fec8955ce227001
.dword 0x1ae9b602f981eb
.dword 0x3fec8955ce227001
.dword 0x1ae9b602f981eb
.dword 0x3fec8955ce227001
.dword 0x1ae9b602f981eb
.dword 0x3fec8955ce227001
.dword 0x1ae9b602f981eb
.dword 0x3fec8955ce227001
.dword 0x1ae9b602f981eb
.dword 0x3febc897ddd6e721
.dword 0x1ba469c1da6224
.dword 0x3febc897ddd6e721
.dword 0x1ba469c1da6224
.dword 0x3febc897ddd6e721
.dword 0x1ba469c1da6224
.dword 0x3febc897ddd6e721
.dword 0x1ba469c1da6224
.dword 0x3febc897ddd6e721
.dword 0x1ba469c1da6224
.dword 0x3feb85659a838fe3
.dword 0x1be7e7c01ba1fb
.dword 0x3feb85659a838fe3
.dword 0x1be7e7c01ba1fb
.dword 0x3feb85659a838fe3
.dword 0x1be7e7c01ba1fb
.dword 0x3feb85659a838fe3
.dword 0x1be7e7c01ba1fb
.dword 0x3feb85659a838fe3
.dword 0x1be7e7c01ba1fb
.dword 0x3fd45ca3c3c5aeb0
.dword 0x32dbd8afb1830c
.dword 0x3fd45ca3c3c5aeb0
.dword 0x32dbd8afb1830c
.dword 0x3fd45ca3c3c5aeb0
.dword 0x32dbd8afb1830c
.dword 0x3fd45ca3c3c5aeb0
.dword 0x32dbd8afb1830c
.dword 0x3fd45ca3c3c5aeb0
.dword 0x32dbd8afb1830c
.dword 0x3fc6c71ca2f8dfe0
.dword 0x40dbc8e95388b0
.dword 0x3fc6c71ca2f8dfe0
.dword 0x40dbc8e95388b0
.dword 0x3fc6c71ca2f8dfe0
.dword 0x40dbc8e95388b0
.dword 0x3fc6c71ca2f8dfe0
.dword 0x40dbc8e95388b0
.dword 0x3fc6c71ca2f8dfe0
.dword 0x40dbc8e95388b0
.dword 0x3fe99cd1b1d0bc99
.dword 0x1dfc3abd005090
.dword 0x3fe99cd1b1d0bc99
.dword 0x1dfc3abd005090
.dword 0x3fe99cd1b1d0bc99
.dword 0x1dfc3abd005090
.dword 0x3fe99cd1b1d0bc99
.dword 0x1dfc3abd005090
.dword 0x3fe99cd1b1d0bc99
.dword 0x1dfc3abd005090
.dword 0x3fdfdca0e3a9aae4
.dword 0x281aa4c8ad08ea
.dword 0x3fdfdca0e3a9aae4
.dword 0x281aa4c8ad08ea
.dword 0x3fdfdca0e3a9aae4
.dword 0x281aa4c8ad08ea
.dword 0x3fdfdca0e3a9aae4
.dword 0x281aa4c8ad08ea
.dword 0x3fdfdca0e3a9aae4
.dword 0x281aa4c8ad08ea
.dword 0x3fdc3d2b17c1cbc8
.dword 0x2b324d215b5384
.dword 0x3fdc3d2b17c1cbc8
.dword 0x2b324d215b5384
.dword 0x3fdc3d2b17c1cbc8
.dword 0x2b324d215b5384
.dword 0x3fdc3d2b17c1cbc8
.dword 0x2b324d215b5384
.dword 0x3fdc3d2b17c1cbc8
.dword 0x2b324d215b5384
.dword 0x3fe8456a27bdd401
.dword 0x1fa47b28665864
.dword 0x3fe8456a27bdd401
.dword 0x1fa47b28665864
.dword 0x3fe8456a27bdd401
.dword 0x1fa47b28665864
.dword 0x3fe8456a27bdd401
.dword 0x1fa47b28665864
.dword 0x3fe8456a27bdd401
.dword 0x1fa47b28665864
.dword 0x3fee684fd0912ddc
.dword 0x1941c7b32921d2
.dword 0x3fee684fd0912ddc
.dword 0x1941c7b32921d2
.dword 0x3fee684fd0912ddc
.dword 0x1941c7b32921d2
.dword 0x3fee684fd0912ddc
.dword 0x1941c7b32921d2
.dword 0x3fee684fd0912ddc
.dword 0x1941c7b32921d2
.dword 0x3f9d2df717134480
.dword 0x6a51de8038e70e
.dword 0x3f9d2df717134480
.dword 0x6a51de8038e70e
.dword 0x3f9d2df717134480
.dword 0x6a51de8038e70e
.dword 0x3f9d2df717134480
.dword 0x6a51de8038e70e
.dword 0x3f9d2df717134480
.dword 0x6a51de8038e70e
.dword 0x3fd52294a8221c6e
.dword 0x322b3967105321
.dword 0x3fd52294a8221c6e
.dword 0x322b3967105321
.dword 0x3fd52294a8221c6e
.dword 0x322b3967105321
.dword 0x3fd52294a8221c6e
.dword 0x322b3967105321
.dword 0x3fd52294a8221c6e
.dword 0x322b3967105321
.dword 0x3fea75a6cfe67619
.dword 0x1d06811f7b0711
.dword 0x3fea75a6cfe67619
.dword 0x1d06811f7b0711
.dword 0x3fea75a6cfe67619
.dword 0x1d06811f7b0711
.dword 0x3fea75a6cfe67619
.dword 0x1d06811f7b0711
.dword 0x3fea75a6cfe67619
.dword 0x1d06811f7b0711
.dword 0x3fec9bf9d15341bb
.dword 0x1ad82cf2ed8223
.dword 0x3fec9bf9d15341bb
.dword 0x1ad82cf2ed8223
.dword 0x3fec9bf9d15341bb
.dword 0x1ad82cf2ed8223
.dword 0x3fec9bf9d15341bb
.dword 0x1ad82cf2ed8223
.dword 0x3fec9bf9d15341bb
.dword 0x1ad82cf2ed8223
.dword 0x3fc9dd80f4aec684
.dword 0x3db13dc952f917
.dword 0x3fc9dd80f4aec684
.dword 0x3db13dc952f917
.dword 0x3fc9dd80f4aec684
.dword 0x3db13dc952f917
.dword 0x3fc9dd80f4aec684
.dword 0x3db13dc952f917
.dword 0x3fc9dd80f4aec684
.dword 0x3db13dc952f917
.dword 0x3fed86759a6df597
.dword 0x1a02fb7e469494
.dword 0x3fed86759a6df597
.dword 0x1a02fb7e469494
.dword 0x3fed86759a6df597
.dword 0x1a02fb7e469494
.dword 0x3fed86759a6df597
.dword 0x1a02fb7e469494
.dword 0x3fed86759a6df597
.dword 0x1a02fb7e469494
.dword 0x3fd47f5153fffd9a
.dword 0x32bbf0cbe6454a
.dword 0x3fd47f5153fffd9a
.dword 0x32bbf0cbe6454a
.dword 0x3fd47f5153fffd9a
.dword 0x32bbf0cbe6454a
.dword 0x3fd47f5153fffd9a
.dword 0x32bbf0cbe6454a
.dword 0x3fd47f5153fffd9a
.dword 0x32bbf0cbe6454a
.dword 0x3febe5b30f86b45d
.dword 0x1b8792adc31368
.dword 0x3febe5b30f86b45d
.dword 0x1b8792adc31368
.dword 0x3febe5b30f86b45d
.dword 0x1b8792adc31368
.dword 0x3febe5b30f86b45d
.dword 0x1b8792adc31368
.dword 0x3febe5b30f86b45d
.dword 0x1b8792adc31368
.dword 0x3fec892e3631d635
.dword 0x1ae9db5a734da1
.dword 0x3fec892e3631d635
.dword 0x1ae9db5a734da1
.dword 0x3fec892e3631d635
.dword 0x1ae9db5a734da1
.dword 0x3fec892e3631d635
.dword 0x1ae9db5a734da1
.dword 0x3fec892e3631d635
.dword 0x1ae9db5a734da1
.dword 0x3fde6a388c60fb16
.dword 0x294031d958fbd2
.dword 0x3fde6a388c60fb16
.dword 0x294031d958fbd2
.dword 0x3fde6a388c60fb16
.dword 0x294031d958fbd2
.dword 0x3fde6a388c60fb16
.dword 0x294031d958fbd2
.dword 0x3fde6a388c60fb16
.dword 0x294031d958fbd2
.dword 0x3fe1741c9b528809
.dword 0x260051481198aa
.dword 0x3fe1741c9b528809
.dword 0x260051481198aa
.dword 0x3fe1741c9b528809
.dword 0x260051481198aa
.dword 0x3fe1741c9b528809
.dword 0x260051481198aa
.dword 0x3fe1741c9b528809
.dword 0x260051481198aa
.dword 0x3f86abd09944b940
.dword 0x80f0154c64752f
.dword 0x3f86abd09944b940
.dword 0x80f0154c64752f
.dword 0x3f86abd09944b940
.dword 0x80f0154c64752f
.dword 0x3f86abd09944b940
.dword 0x80f0154c64752f
.dword 0x3f86abd09944b940
.dword 0x80f0154c64752f
.dword 0x3fdd87cceaaebd86
.dword 0x2a01cd16b2579b
.dword 0x3fdd87cceaaebd86
.dword 0x2a01cd16b2579b
.dword 0x3fdd87cceaaebd86
.dword 0x2a01cd16b2579b
.dword 0x3fdd87cceaaebd86
.dword 0x2a01cd16b2579b
.dword 0x3fdd87cceaaebd86
.dword 0x2a01cd16b2579b
.dword 0x3fd9c1f81f468f0a
.dword 0x2dd0fb602d87c5
.dword 0x3fd9c1f81f468f0a
.dword 0x2dd0fb602d87c5
.dword 0x3fd9c1f81f468f0a
.dword 0x2dd0fb602d87c5
.dword 0x3fd9c1f81f468f0a
.dword 0x2dd0fb602d87c5
.dword 0x3fd9c1f81f468f0a
.dword 0x2dd0fb602d87c5
.dword 0x3fe5dc74e1d24c33
.dword 0x18e2629b2b5d2f
.dword 0x3fe5dc74e1d24c33
.dword 0x18e2629b2b5d2f
.dword 0x3fe5dc74e1d24c33
.dword 0x18e2629b2b5d2f
.dword 0x3fe5dc74e1d24c33
.dword 0x18e2629b2b5d2f
.dword 0x3fe5dc74e1d24c33
.dword 0x18e2629b2b5d2f
.dword 0x3fe0d6af460a6719
.dword 0x202741f97f217f
.dword 0x3fe0d6af460a6719
.dword 0x202741f97f217f
.dword 0x3fe0d6af460a6719
.dword 0x202741f97f217f
.dword 0x3fe0d6af460a6719
.dword 0x202741f97f217f
.dword 0x3fe0d6af460a6719
.dword 0x202741f97f217f
.dword 0x3f65b2dfc88f5000
.dword 0x99121282fbb0d5
.dword 0x3f65b2dfc88f5000
.dword 0x99121282fbb0d5
.dword 0x3f65b2dfc88f5000
.dword 0x99121282fbb0d5
.dword 0x3f65b2dfc88f5000
.dword 0x99121282fbb0d5
.dword 0x3f65b2dfc88f5000
.dword 0x99121282fbb0d5
.dword 0x3fd8ef9938574634
.dword 0x25d0df5e2f66b3
.dword 0x3fd8ef9938574634
.dword 0x25d0df5e2f66b3
.dword 0x3fd8ef9938574634
.dword 0x25d0df5e2f66b3
.dword 0x3fd8ef9938574634
.dword 0x25d0df5e2f66b3
.dword 0x3fd8ef9938574634
.dword 0x25d0df5e2f66b3
.dword 0x3fe52ec319683eb8
.dword 0x19ae6ebf2e4a31
.dword 0x3fe52ec319683eb8
.dword 0x19ae6ebf2e4a31
.dword 0x3fe52ec319683eb8
.dword 0x19ae6ebf2e4a31
.dword 0x3fe52ec319683eb8
.dword 0x19ae6ebf2e4a31
.dword 0x3fe52ec319683eb8
.dword 0x19ae6ebf2e4a31
.dword 0x3fde87549362bb46
.dword 0x21d1c005974b00
.dword 0x3fde87549362bb46
.dword 0x21d1c005974b00
.dword 0x3fde87549362bb46
.dword 0x21d1c005974b00
.dword 0x3fde87549362bb46
.dword 0x21d1c005974b00
.dword 0x3fde87549362bb46
.dword 0x21d1c005974b00
.dword 0x3fcc502abba63f98
.dword 0x3336b418560c0f
.dword 0x3fcc502abba63f98
.dword 0x3336b418560c0f
.dword 0x3fcc502abba63f98
.dword 0x3336b418560c0f
.dword 0x3fcc502abba63f98
.dword 0x3336b418560c0f
.dword 0x3fcc502abba63f98
.dword 0x3336b418560c0f
.dword 0x3fc318364efdb33c
.dword 0x3c7d6108f5fafb
.dword 0x3fc318364efdb33c
.dword 0x3c7d6108f5fafb
.dword 0x3fc318364efdb33c
.dword 0x3c7d6108f5fafb
.dword 0x3fc318364efdb33c
.dword 0x3c7d6108f5fafb
.dword 0x3fc318364efdb33c
.dword 0x3c7d6108f5fafb
.dword 0x3fee06a62c8d020a
.dword 0x121e1e27587bb7
.dword 0x3fee06a62c8d020a
.dword 0x121e1e27587bb7
.dword 0x3fee06a62c8d020a
.dword 0x121e1e27587bb7
.dword 0x3fee06a62c8d020a
.dword 0x121e1e27587bb7
.dword 0x3fee06a62c8d020a
.dword 0x121e1e27587bb7
.dword 0x3fe4121cbd68796b
.dword 0x1b1aa7767b0db5
.dword 0x3fe4121cbd68796b
.dword 0x1b1aa7767b0db5
.dword 0x3fe4121cbd68796b
.dword 0x1b1aa7767b0db5
.dword 0x3fe4121cbd68796b
.dword 0x1b1aa7767b0db5
.dword 0x3fe4121cbd68796b
.dword 0x1b1aa7767b0db5
.dword 0x3fd8ebda07a00be0
.dword 0x25d427091f5336
.dword 0x3fd8ebda07a00be0
.dword 0x25d427091f5336
.dword 0x3fd8ebda07a00be0
.dword 0x25d427091f5336
.dword 0x3fd8ebda07a00be0
.dword 0x25d427091f5336
.dword 0x3fd8ebda07a00be0
.dword 0x25d427091f5336
.dword 0x3fe81cd30d2bafca
.dword 0x168f921aefe5ae
.dword 0x3fe81cd30d2bafca
.dword 0x168f921aefe5ae
.dword 0x3fe81cd30d2bafca
.dword 0x168f921aefe5ae
.dword 0x3fe81cd30d2bafca
.dword 0x168f921aefe5ae
.dword 0x3fe81cd30d2bafca
.dword 0x168f921aefe5ae
.dword 0x3fe7fe8e6ba4b819
.dword 0x16ac07cbc8481a
.dword 0x3fe7fe8e6ba4b819
.dword 0x16ac07cbc8481a
.dword 0x3fe7fe8e6ba4b819
.dword 0x16ac07cbc8481a
.dword 0x3fe7fe8e6ba4b819
.dword 0x16ac07cbc8481a
.dword 0x3fe7fe8e6ba4b819
.dword 0x16ac07cbc8481a
.dword 0x3fe7f7f8bb6f3d5f
.dword 0x16b2424aee46b8
.dword 0x3fe7f7f8bb6f3d5f
.dword 0x16b2424aee46b8
.dword 0x3fe7f7f8bb6f3d5f
.dword 0x16b2424aee46b8
.dword 0x3fe7f7f8bb6f3d5f
.dword 0x16b2424aee46b8
.dword 0x3fe7f7f8bb6f3d5f
.dword 0x16b2424aee46b8
.dword 0x3feb731914dd4ea8
.dword 0x13d17184267253
.dword 0x3feb731914dd4ea8
.dword 0x13d17184267253
.dword 0x3feb731914dd4ea8
.dword 0x13d17184267253
.dword 0x3feb731914dd4ea8
.dword 0x13d17184267253
.dword 0x3feb731914dd4ea8
.dword 0x13d17184267253
.dword 0x3fb2e607700cafb0
.dword 0x4cc907d3854562
.dword 0x3fb2e607700cafb0
.dword 0x4cc907d3854562
.dword 0x3fb2e607700cafb0
.dword 0x4cc907d3854562
.dword 0x3fb2e607700cafb0
.dword 0x4cc907d3854562
.dword 0x3fb2e607700cafb0
.dword 0x4cc907d3854562
.dword 0x3feb2e75ce8f8af3
.dword 0x14037ccefd80fe
.dword 0x3feb2e75ce8f8af3
.dword 0x14037ccefd80fe
.dword 0x3feb2e75ce8f8af3
.dword 0x14037ccefd80fe
.dword 0x3feb2e75ce8f8af3
.dword 0x14037ccefd80fe
.dword 0x3feb2e75ce8f8af3
.dword 0x14037ccefd80fe
.dword 0x3fe6e41eb61fd956
.dword 0x17c3c375353a67
.dword 0x3fe6e41eb61fd956
.dword 0x17c3c375353a67
.dword 0x3fe6e41eb61fd956
.dword 0x17c3c375353a67
.dword 0x3fe6e41eb61fd956
.dword 0x17c3c375353a67
.dword 0x3fe6e41eb61fd956
.dword 0x17c3c375353a67
.dword 0x3fc54ee6267c5580
.dword 0x3987b33888b32c
.dword 0x3fc54ee6267c5580
.dword 0x3987b33888b32c
.dword 0x3fc54ee6267c5580
.dword 0x3987b33888b32c
.dword 0x3fc54ee6267c5580
.dword 0x3987b33888b32c
.dword 0x3fc54ee6267c5580
.dword 0x3987b33888b32c
.dword 0x3fdd44a03d6fd618
.dword 0x2296390d344303
.dword 0x3fdd44a03d6fd618
.dword 0x2296390d344303
.dword 0x3fdd44a03d6fd618
.dword 0x2296390d344303
.dword 0x3fdd44a03d6fd618
.dword 0x2296390d344303
.dword 0x3fdd44a03d6fd618
.dword 0x2296390d344303
.dword 0x3fce852bd592685c
.dword 0x31d302bdf82cf1
.dword 0x3fce852bd592685c
.dword 0x31d302bdf82cf1
.dword 0x3fce852bd592685c
.dword 0x31d302bdf82cf1
.dword 0x3fce852bd592685c
.dword 0x31d302bdf82cf1
.dword 0x3fce852bd592685c
.dword 0x31d302bdf82cf1
.dword 0x3fb5154303e41e08
.dword 0x49cd7ea3cf74c9
.dword 0x3fb5154303e41e08
.dword 0x49cd7ea3cf74c9
.dword 0x3fb5154303e41e08
.dword 0x49cd7ea3cf74c9
.dword 0x3fb5154303e41e08
.dword 0x49cd7ea3cf74c9
.dword 0x3fb5154303e41e08
.dword 0x49cd7ea3cf74c9
.dword 0x3fe4c6690354e783
.dword 0x1a2f6dc3f5765d
.dword 0x3fe4c6690354e783
.dword 0x1a2f6dc3f5765d
.dword 0x3fe4c6690354e783
.dword 0x1a2f6dc3f5765d
.dword 0x3fe4c6690354e783
.dword 0x1a2f6dc3f5765d
.dword 0x3fe4c6690354e783
.dword 0x1a2f6dc3f5765d
.dword 0x3febef28d020c73f
.dword 0x13796d5672517b
.dword 0x3febef28d020c73f
.dword 0x13796d5672517b
.dword 0x3febef28d020c73f
.dword 0x13796d5672517b
.dword 0x3febef28d020c73f
.dword 0x13796d5672517b
.dword 0x3febef28d020c73f
.dword 0x13796d5672517b
.dword 0x3fea0899d2bd904c
.dword 0x14e5652cac2f28
.dword 0x3fea0899d2bd904c
.dword 0x14e5652cac2f28
.dword 0x3fea0899d2bd904c
.dword 0x14e5652cac2f28
.dword 0x3fea0899d2bd904c
.dword 0x14e5652cac2f28
.dword 0x3fea0899d2bd904c
.dword 0x14e5652cac2f28
.dword 0x3fe0bf6a07a632a2
.dword 0x203db3cd14f4f1
.dword 0x3fe0bf6a07a632a2
.dword 0x203db3cd14f4f1
.dword 0x3fe0bf6a07a632a2
.dword 0x203db3cd14f4f1
.dword 0x3fe0bf6a07a632a2
.dword 0x203db3cd14f4f1
.dword 0x3fe0bf6a07a632a2
.dword 0x203db3cd14f4f1
.dword 0x3fa5a6bbc6508aa0
.dword 0x5920215aabb699
.dword 0x3fa5a6bbc6508aa0
.dword 0x5920215aabb699
.dword 0x3fa5a6bbc6508aa0
.dword 0x5920215aabb699
.dword 0x3fa5a6bbc6508aa0
.dword 0x5920215aabb699
.dword 0x3fa5a6bbc6508aa0
.dword 0x5920215aabb699
.dword 0x3fe35ab41e106257
.dword 0x1c1b80bdfb7ea5
.dword 0x3fe35ab41e106257
.dword 0x1c1b80bdfb7ea5
.dword 0x3fe35ab41e106257
.dword 0x1c1b80bdfb7ea5
.dword 0x3fe35ab41e106257
.dword 0x1c1b80bdfb7ea5
.dword 0x3fe35ab41e106257
.dword 0x1c1b80bdfb7ea5
.dword 0x3fd513f0bf6b2c7a
.dword 0x29cf1cbbc094bc
.dword 0x3fd513f0bf6b2c7a
.dword 0x29cf1cbbc094bc
.dword 0x3fd513f0bf6b2c7a
.dword 0x29cf1cbbc094bc
.dword 0x3fd513f0bf6b2c7a
.dword 0x29cf1cbbc094bc
.dword 0x3fd513f0bf6b2c7a
.dword 0x29cf1cbbc094bc
.dword 0x3fe6ab29f5df4b46
.dword 0x17ff793adb4009
.dword 0x3fe6ab29f5df4b46
.dword 0x17ff793adb4009
.dword 0x3fe6ab29f5df4b46
.dword 0x17ff793adb4009
.dword 0x3fe6ab29f5df4b46
.dword 0x17ff793adb4009
.dword 0x3fe6ab29f5df4b46
.dword 0x17ff793adb4009
.dword 0x3fcf8c30007cd3dc
.dword 0x313e685c6f44b4
.dword 0x3fcf8c30007cd3dc
.dword 0x313e685c6f44b4
.dword 0x3fcf8c30007cd3dc
.dword 0x313e685c6f44b4
.dword 0x3fcf8c30007cd3dc
.dword 0x313e685c6f44b4
.dword 0x3fcf8c30007cd3dc
.dword 0x313e685c6f44b4
.dword 0x3fc0ba71e4ba55c8
.dword 0x404286e1b62201
.dword 0x3fc0ba71e4ba55c8
.dword 0x404286e1b62201
.dword 0x3fc0ba71e4ba55c8
.dword 0x404286e1b62201
.dword 0x3fc0ba71e4ba55c8
.dword 0x404286e1b62201
.dword 0x3fc0ba71e4ba55c8
.dword 0x404286e1b62201
.dword 0x3fd079e604cdfa6a
.dword 0x308239d5aba8f4
.dword 0x3fd079e604cdfa6a
.dword 0x308239d5aba8f4
.dword 0x3fd079e604cdfa6a
.dword 0x308239d5aba8f4
.dword 0x3fd079e604cdfa6a
.dword 0x308239d5aba8f4
.dword 0x3fd079e604cdfa6a
.dword 0x308239d5aba8f4
.dword 0x3fd3d7504224a0a8
.dword 0x2b6afa13acca44
.dword 0x3fd3d7504224a0a8
.dword 0x2b6afa13acca44
.dword 0x3fd3d7504224a0a8
.dword 0x2b6afa13acca44
.dword 0x3fd3d7504224a0a8
.dword 0x2b6afa13acca44
.dword 0x3fd3d7504224a0a8
.dword 0x2b6afa13acca44
.dword 0x3fb2f684ccf4f608
.dword 0x4cafffe8d00b3f
.dword 0x3fb2f684ccf4f608
.dword 0x4cafffe8d00b3f
.dword 0x3fb2f684ccf4f608
.dword 0x4cafffe8d00b3f
.dword 0x3fb2f684ccf4f608
.dword 0x4cafffe8d00b3f
.dword 0x3fb2f684ccf4f608
.dword 0x4cafffe8d00b3f
.dword 0x3fe50c42eae0848d
.dword 0x19d8873e753c2c
.dword 0x3fe50c42eae0848d
.dword 0x19d8873e753c2c
.dword 0x3fe50c42eae0848d
.dword 0x19d8873e753c2c
.dword 0x3fe50c42eae0848d
.dword 0x19d8873e753c2c
.dword 0x3fe50c42eae0848d
.dword 0x19d8873e753c2c
.dword 0x3fe33111b0c41a5d
.dword 0x1c587ab015a3c9
.dword 0x3fe33111b0c41a5d
.dword 0x1c587ab015a3c9
.dword 0x3fe33111b0c41a5d
.dword 0x1c587ab015a3c9
.dword 0x3fe33111b0c41a5d
.dword 0x1c587ab015a3c9
.dword 0x3fe33111b0c41a5d
.dword 0x1c587ab015a3c9
.dword 0x3fc881e15730be48
.dword 0x36328a9745fcd5
.dword 0x3fc881e15730be48
.dword 0x36328a9745fcd5
.dword 0x3fc881e15730be48
.dword 0x36328a9745fcd5
.dword 0x3fc881e15730be48
.dword 0x36328a9745fcd5
.dword 0x3fc881e15730be48
.dword 0x36328a9745fcd5
.dword 0x3fca3a3d9dd57ab8
.dword 0x34bdd892c8fdb2
.dword 0x3fca3a3d9dd57ab8
.dword 0x34bdd892c8fdb2
.dword 0x3fca3a3d9dd57ab8
.dword 0x34bdd892c8fdb2
.dword 0x3fca3a3d9dd57ab8
.dword 0x34bdd892c8fdb2
.dword 0x3fca3a3d9dd57ab8
.dword 0x34bdd892c8fdb2
.dword 0x3fe409ed0f4237b2
.dword 0x1b25ba0bb4b6bb
.dword 0x3fe409ed0f4237b2
.dword 0x1b25ba0bb4b6bb
.dword 0x3fe409ed0f4237b2
.dword 0x1b25ba0bb4b6bb
.dword 0x3fe409ed0f4237b2
.dword 0x1b25ba0bb4b6bb
.dword 0x3fe409ed0f4237b2
.dword 0x1b25ba0bb4b6bb
.dword 0x3fe9ef3cccfd9de9
.dword 0x14f9d4c2bd0f09
.dword 0x3fe9ef3cccfd9de9
.dword 0x14f9d4c2bd0f09
.dword 0x3fe9ef3cccfd9de9
.dword 0x14f9d4c2bd0f09
.dword 0x3fe9ef3cccfd9de9
.dword 0x14f9d4c2bd0f09
.dword 0x3fe9ef3cccfd9de9
.dword 0x14f9d4c2bd0f09
.dword 0x3fecd0735072fa3c
.dword 0x12e1299c70f8c4
.dword 0x3fecd0735072fa3c
.dword 0x12e1299c70f8c4
.dword 0x3fecd0735072fa3c
.dword 0x12e1299c70f8c4
.dword 0x3fecd0735072fa3c
.dword 0x12e1299c70f8c4
.dword 0x3fecd0735072fa3c
.dword 0x12e1299c70f8c4
.dword 0x3fb202f7d7434db8
.dword 0x4c6d1725d94971
.dword 0x3fb202f7d7434db8
.dword 0x4c6d1725d94971
.dword 0x3fb202f7d7434db8
.dword 0x4c6d1725d94971
.dword 0x3fb202f7d7434db8
.dword 0x4c6d1725d94971
.dword 0x3fb202f7d7434db8
.dword 0x4c6d1725d94971
.dword 0x3fe1db2a30097eef
.dword 0x1cac749f066d6a
.dword 0x3fe1db2a30097eef
.dword 0x1cac749f066d6a
.dword 0x3fe1db2a30097eef
.dword 0x1cac749f066d6a
.dword 0x3fe1db2a30097eef
.dword 0x1cac749f066d6a
.dword 0x3fe1db2a30097eef
.dword 0x1cac749f066d6a
.dword 0x3fbafd401bb76ca8
.dword 0x42f8734d9a6dee
.dword 0x3fbafd401bb76ca8
.dword 0x42f8734d9a6dee
.dword 0x3fbafd401bb76ca8
.dword 0x42f8734d9a6dee
.dword 0x3fbafd401bb76ca8
.dword 0x42f8734d9a6dee
.dword 0x3fbafd401bb76ca8
.dword 0x42f8734d9a6dee
.dword 0x3fe1db100085ba87
.dword 0x1cac9eabe2cdb6
.dword 0x3fe1db100085ba87
.dword 0x1cac9eabe2cdb6
.dword 0x3fe1db100085ba87
.dword 0x1cac9eabe2cdb6
.dword 0x3fe1db100085ba87
.dword 0x1cac9eabe2cdb6
.dword 0x3fe1db100085ba87
.dword 0x1cac9eabe2cdb6
.dword 0x3fe15d24328c984b
.dword 0x1d7c90401ca1d9
.dword 0x3fe15d24328c984b
.dword 0x1d7c90401ca1d9
.dword 0x3fe15d24328c984b
.dword 0x1d7c90401ca1d9
.dword 0x3fe15d24328c984b
.dword 0x1d7c90401ca1d9
.dword 0x3fe15d24328c984b
.dword 0x1d7c90401ca1d9
.dword 0x3fe5cfbc9a935f24
.dword 0x177950992a4e85
.dword 0x3fe5cfbc9a935f24
.dword 0x177950992a4e85
.dword 0x3fe5cfbc9a935f24
.dword 0x177950992a4e85
.dword 0x3fe5cfbc9a935f24
.dword 0x177950992a4e85
.dword 0x3fe5cfbc9a935f24
.dword 0x177950992a4e85
.dword 0x3fe3dd7a6492d833
.dword 0x19c61687141780
.dword 0x3fe3dd7a6492d833
.dword 0x19c61687141780
.dword 0x3fe3dd7a6492d833
.dword 0x19c61687141780
.dword 0x3fe3dd7a6492d833
.dword 0x19c61687141780
.dword 0x3fe3dd7a6492d833
.dword 0x19c61687141780
.dword 0x3fec6ac6254c69d4
.dword 0x12046fb4097f31
.dword 0x3fec6ac6254c69d4
.dword 0x12046fb4097f31
.dword 0x3fec6ac6254c69d4
.dword 0x12046fb4097f31
.dword 0x3fec6ac6254c69d4
.dword 0x12046fb4097f31
.dword 0x3fec6ac6254c69d4
.dword 0x12046fb4097f31
.dword 0x3fe71ed48fc1427e
.dword 0x162519366790c5
.dword 0x3fe71ed48fc1427e
.dword 0x162519366790c5
.dword 0x3fe71ed48fc1427e
.dword 0x162519366790c5
.dword 0x3fe71ed48fc1427e
.dword 0x162519366790c5
.dword 0x3fe71ed48fc1427e
.dword 0x162519366790c5
.dword 0x3fe15bd8d1c139cf
.dword 0x1d7ec325c63df0
.dword 0x3fe15bd8d1c139cf
.dword 0x1d7ec325c63df0
.dword 0x3fe15bd8d1c139cf
.dword 0x1d7ec325c63df0
.dword 0x3fe15bd8d1c139cf
.dword 0x1d7ec325c63df0
.dword 0x3fe15bd8d1c139cf
.dword 0x1d7ec325c63df0
.dword 0x3fe62436ebd60bac
.dword 0x171fc0dbade3c3
.dword 0x3fe62436ebd60bac
.dword 0x171fc0dbade3c3
.dword 0x3fe62436ebd60bac
.dword 0x171fc0dbade3c3
.dword 0x3fe62436ebd60bac
.dword 0x171fc0dbade3c3
.dword 0x3fe62436ebd60bac
.dword 0x171fc0dbade3c3
.dword 0x3fc9df9047ecdecc
.dword 0x33c9eb1550c385
.dword 0x3fc9df9047ecdecc
.dword 0x33c9eb1550c385
.dword 0x3fc9df9047ecdecc
.dword 0x33c9eb1550c385
.dword 0x3fc9df9047ecdecc
.dword 0x33c9eb1550c385
.dword 0x3fc9df9047ecdecc
.dword 0x33c9eb1550c385
.dword 0x3fde0cd86136fb10
.dword 0x2109c577b6ba53
.dword 0x3fde0cd86136fb10
.dword 0x2109c577b6ba53
.dword 0x3fde0cd86136fb10
.dword 0x2109c577b6ba53
.dword 0x3fde0cd86136fb10
.dword 0x2109c577b6ba53
.dword 0x3fde0cd86136fb10
.dword 0x2109c577b6ba53
.dword 0x3fd777c6de50aa68
.dword 0x25d12a8b232469
.dword 0x3fd777c6de50aa68
.dword 0x25d12a8b232469
.dword 0x3fd777c6de50aa68
.dword 0x25d12a8b232469
.dword 0x3fd777c6de50aa68
.dword 0x25d12a8b232469
.dword 0x3fd777c6de50aa68
.dword 0x25d12a8b232469
.dword 0x3fc463c94145a570
.dword 0x391c50c1bb8cc5
.dword 0x3fc463c94145a570
.dword 0x391c50c1bb8cc5
.dword 0x3fc463c94145a570
.dword 0x391c50c1bb8cc5
.dword 0x3fc463c94145a570
.dword 0x391c50c1bb8cc5
.dword 0x3fc463c94145a570
.dword 0x391c50c1bb8cc5
.dword 0x3fd62e8a2adb9b34
.dword 0x2714fd54f38add
.dword 0x3fd62e8a2adb9b34
.dword 0x2714fd54f38add
.dword 0x3fd62e8a2adb9b34
.dword 0x2714fd54f38add
.dword 0x3fd62e8a2adb9b34
.dword 0x2714fd54f38add
.dword 0x3fd62e8a2adb9b34
.dword 0x2714fd54f38add
.dword 0x3fd6a2e2a069ac5a
.dword 0x269e5a66ad7eb2
.dword 0x3fd6a2e2a069ac5a
.dword 0x269e5a66ad7eb2
.dword 0x3fd6a2e2a069ac5a
.dword 0x269e5a66ad7eb2
.dword 0x3fd6a2e2a069ac5a
.dword 0x269e5a66ad7eb2
.dword 0x3fd6a2e2a069ac5a
.dword 0x269e5a66ad7eb2
.dword 0x3fc67b079afda11c
.dword 0x36c6740bf5eb99
.dword 0x3fc67b079afda11c
.dword 0x36c6740bf5eb99
.dword 0x3fc67b079afda11c
.dword 0x36c6740bf5eb99
.dword 0x3fc67b079afda11c
.dword 0x36c6740bf5eb99
.dword 0x3fc67b079afda11c
.dword 0x36c6740bf5eb99
.dword 0x3fb5d604165036e0
.dword 0x4772908a3cd823
.dword 0x3fb5d604165036e0
.dword 0x4772908a3cd823
.dword 0x3fb5d604165036e0
.dword 0x4772908a3cd823
.dword 0x3fb5d604165036e0
.dword 0x4772908a3cd823
.dword 0x3fb5d604165036e0
.dword 0x4772908a3cd823
.dword 0x3fe084d2193dd23e
.dword 0x1efeb3b589e495
.dword 0x3fe084d2193dd23e
.dword 0x1efeb3b589e495
.dword 0x3fe084d2193dd23e
.dword 0x1efeb3b589e495
.dword 0x3fe084d2193dd23e
.dword 0x1efeb3b589e495
.dword 0x3fe084d2193dd23e
.dword 0x1efeb3b589e495
.dword 0x3fe621567a01c36f
.dword 0x1722c25fe44508
.dword 0x3fe621567a01c36f
.dword 0x1722c25fe44508
.dword 0x3fe621567a01c36f
.dword 0x1722c25fe44508
.dword 0x3fe621567a01c36f
.dword 0x1722c25fe44508
.dword 0x3fe621567a01c36f
.dword 0x1722c25fe44508
.dword 0x3fe1d494172eadcd
.dword 0x1cb70c178544c8
.dword 0x3fe1d494172eadcd
.dword 0x1cb70c178544c8
.dword 0x3fe1d494172eadcd
.dword 0x1cb70c178544c8
.dword 0x3fe1d494172eadcd
.dword 0x1cb70c178544c8
.dword 0x3fe1d494172eadcd
.dword 0x1cb70c178544c8
.dword 0x3fdd916ae1332170
.dword 0x2150e516350934
.dword 0x3fdd916ae1332170
.dword 0x2150e516350934
.dword 0x3fdd916ae1332170
.dword 0x2150e516350934
.dword 0x3fdd916ae1332170
.dword 0x2150e516350934
.dword 0x3fdd916ae1332170
.dword 0x2150e516350934
.dword 0x3fa0f0adffe22ec0
.dword 0x5e395afbbaedc0
.dword 0x3fa0f0adffe22ec0
.dword 0x5e395afbbaedc0
.dword 0x3fa0f0adffe22ec0
.dword 0x5e395afbbaedc0
.dword 0x3fa0f0adffe22ec0
.dword 0x5e395afbbaedc0
.dword 0x3fa0f0adffe22ec0
.dword 0x5e395afbbaedc0
.dword 0x3fefaacd1ede8fbc
.dword 0x102b0c0d04fb6f
.dword 0x3fefaacd1ede8fbc
.dword 0x102b0c0d04fb6f
.dword 0x3fefaacd1ede8fbc
.dword 0x102b0c0d04fb6f
.dword 0x3fefaacd1ede8fbc
.dword 0x102b0c0d04fb6f
.dword 0x3fefaacd1ede8fbc
.dword 0x102b0c0d04fb6f
.dword 0x3fe12188494c1b32
.dword 0x1de32a40f8b125
.dword 0x3fe12188494c1b32
.dword 0x1de32a40f8b125
.dword 0x3fe12188494c1b32
.dword 0x1de32a40f8b125
.dword 0x3fe12188494c1b32
.dword 0x1de32a40f8b125
.dword 0x3fe12188494c1b32
.dword 0x1de32a40f8b125
.dword 0x3feacc39b20087a3
.dword 0x131b27eaec2d69
.dword 0x3feacc39b20087a3
.dword 0x131b27eaec2d69
.dword 0x3feacc39b20087a3
.dword 0x131b27eaec2d69
.dword 0x3feacc39b20087a3
.dword 0x131b27eaec2d69
.dword 0x3feacc39b20087a3
.dword 0x131b27eaec2d69
.dword 0x3fc167a8847caae8
.dword 0x3d6abf0ce2f68d
.dword 0x3fc167a8847caae8
.dword 0x3d6abf0ce2f68d
.dword 0x3fc167a8847caae8
.dword 0x3d6abf0ce2f68d
.dword 0x3fc167a8847caae8
.dword 0x3d6abf0ce2f68d
.dword 0x3fc167a8847caae8
.dword 0x3d6abf0ce2f68d
.dword 0x3fd4cce962ffbac6
.dword 0x289d680434df9e
.dword 0x3fd4cce962ffbac6
.dword 0x289d680434df9e
.dword 0x3fd4cce962ffbac6
.dword 0x289d680434df9e
.dword 0x3fd4cce962ffbac6
.dword 0x289d680434df9e
.dword 0x3fd4cce962ffbac6
.dword 0x289d680434df9e
.dword 0x3fcb999160094d08
.dword 0x328d01d16ac111
.dword 0x3fcb999160094d08
.dword 0x328d01d16ac111
.dword 0x3fcb999160094d08
.dword 0x328d01d16ac111
.dword 0x3fcb999160094d08
.dword 0x328d01d16ac111
.dword 0x3fcb999160094d08
.dword 0x328d01d16ac111
.dword 0x3fea710d74f62515
.dword 0x135d09046a849a
.dword 0x3fea710d74f62515
.dword 0x135d09046a849a
.dword 0x3fea710d74f62515
.dword 0x135d09046a849a
.dword 0x3fea710d74f62515
.dword 0x135d09046a849a
.dword 0x3fea710d74f62515
.dword 0x135d09046a849a
.dword 0x3fed7235418bcae8
.dword 0x11633f708daf08
.dword 0x3fed7235418bcae8
.dword 0x11633f708daf08
.dword 0x3fed7235418bcae8
.dword 0x11633f708daf08
.dword 0x3fed7235418bcae8
.dword 0x11633f708daf08
.dword 0x3fed7235418bcae8
.dword 0x11633f708daf08
.dword 0x3fdfd0798c514364
.dword 0x2017e6b923d9eb
.dword 0x3fdfd0798c514364
.dword 0x2017e6b923d9eb
.dword 0x3fdfd0798c514364
.dword 0x2017e6b923d9eb
.dword 0x3fdfd0798c514364
.dword 0x2017e6b923d9eb
.dword 0x3fdfd0798c514364
.dword 0x2017e6b923d9eb
.dword 0x3fe548936e29abc6
.dword 0x180e62be5d682b
.dword 0x3fe548936e29abc6
.dword 0x180e62be5d682b
.dword 0x3fe548936e29abc6
.dword 0x180e62be5d682b
.dword 0x3fe548936e29abc6
.dword 0x180e62be5d682b
.dword 0x3fe548936e29abc6
.dword 0x180e62be5d682b
.dword 0x3fe07ae0544cdde9
.dword 0x1f1167b1f6a9c1
.dword 0x3fe07ae0544cdde9
.dword 0x1f1167b1f6a9c1
.dword 0x3fe07ae0544cdde9
.dword 0x1f1167b1f6a9c1
.dword 0x3fe07ae0544cdde9
.dword 0x1f1167b1f6a9c1
.dword 0x3fe07ae0544cdde9
.dword 0x1f1167b1f6a9c1
.dword 0x3fd5dcbd9779f824
.dword 0x276b5a35333d71
.dword 0x3fd5dcbd9779f824
.dword 0x276b5a35333d71
.dword 0x3fd5dcbd9779f824
.dword 0x276b5a35333d71
.dword 0x3fd5dcbd9779f824
.dword 0x276b5a35333d71
.dword 0x3fd5dcbd9779f824
.dword 0x276b5a35333d71
.dword 0x3fe07769e9de09ae
.dword 0x1f17f0226c02e1
.dword 0x3fe07769e9de09ae
.dword 0x1f17f0226c02e1
.dword 0x3fe07769e9de09ae
.dword 0x1f17f0226c02e1
.dword 0x3fe07769e9de09ae
.dword 0x1f17f0226c02e1
.dword 0x3fe07769e9de09ae
.dword 0x1f17f0226c02e1
.dword 0x3fedab6a22995b50
.dword 0x1141b8e514cd56
.dword 0x3fedab6a22995b50
.dword 0x1141b8e514cd56
.dword 0x3fedab6a22995b50
.dword 0x1141b8e514cd56
.dword 0x3fedab6a22995b50
.dword 0x1141b8e514cd56
.dword 0x3fedab6a22995b50
.dword 0x1141b8e514cd56
.dword 0x3fe970a9181c46e3
.dword 0x14202f5d8aeae3
.dword 0x3fe970a9181c46e3
.dword 0x14202f5d8aeae3
.dword 0x3fe970a9181c46e3
.dword 0x14202f5d8aeae3
.dword 0x3fe970a9181c46e3
.dword 0x14202f5d8aeae3
.dword 0x3fe970a9181c46e3
.dword 0x14202f5d8aeae3
.dword 0x3fdbc51b0e9c8900
.dword 0x226fec4eac033d
.dword 0x3fdbc51b0e9c8900
.dword 0x226fec4eac033d
.dword 0x3fdbc51b0e9c8900
.dword 0x226fec4eac033d
.dword 0x3fdbc51b0e9c8900
.dword 0x226fec4eac033d
.dword 0x3fdbc51b0e9c8900
.dword 0x226fec4eac033d
.dword 0x3fe2196966125fdb
.dword 0x1c49d75b12d869
.dword 0x3fe2196966125fdb
.dword 0x1c49d75b12d869
.dword 0x3fe2196966125fdb
.dword 0x1c49d75b12d869
.dword 0x3fe2196966125fdb
.dword 0x1c49d75b12d869
.dword 0x3fe2196966125fdb
.dword 0x1c49d75b12d869
.dword 0x3feb968b17f74fe5
.dword 0x128f0a763219d5
.dword 0x3feb968b17f74fe5
.dword 0x128f0a763219d5
.dword 0x3feb968b17f74fe5
.dword 0x128f0a763219d5
.dword 0x3feb968b17f74fe5
.dword 0x128f0a763219d5
.dword 0x3feb968b17f74fe5
.dword 0x128f0a763219d5
.dword 0x3fe9df47160a70eb
.dword 0x13ca2311481c3
.dword 0x3fe9df47160a70eb
.dword 0x13ca2311481c3
.dword 0x3fe9df47160a70eb
.dword 0x13ca2311481c3
.dword 0x3fe9df47160a70eb
.dword 0x13ca2311481c3
.dword 0x3fe9df47160a70eb
.dword 0x13ca2311481c3
.dword 0x3fd05e4750a0ffc4
.dword 0x3e8f5edb409b7
.dword 0x3fd05e4750a0ffc4
.dword 0x3e8f5edb409b7
.dword 0x3fd05e4750a0ffc4
.dword 0x3e8f5edb409b7
.dword 0x3fd05e4750a0ffc4
.dword 0x3e8f5edb409b7
.dword 0x3fd05e4750a0ffc4
.dword 0x3e8f5edb409b7
.dword 0x3fcdd2eb732cadf4
.dword 0x44ab747cfbe70
.dword 0x3fcdd2eb732cadf4
.dword 0x44ab747cfbe70
.dword 0x3fcdd2eb732cadf4
.dword 0x44ab747cfbe70
.dword 0x3fcdd2eb732cadf4
.dword 0x44ab747cfbe70
.dword 0x3fcdd2eb732cadf4
.dword 0x44ab747cfbe70
.dword 0x3fecc90d9a70a7ff
.dword 0x11c96cd79d1f3
.dword 0x3fecc90d9a70a7ff
.dword 0x11c96cd79d1f3
.dword 0x3fecc90d9a70a7ff
.dword 0x11c96cd79d1f3
.dword 0x3fecc90d9a70a7ff
.dword 0x11c96cd79d1f3
.dword 0x3fecc90d9a70a7ff
.dword 0x11c96cd79d1f3
.dword 0x3fb83cbff91aa168
.dword 0xa8fee5a5ed7d3
.dword 0x3fb83cbff91aa168
.dword 0xa8fee5a5ed7d3
.dword 0x3fb83cbff91aa168
.dword 0xa8fee5a5ed7d3
.dword 0x3fb83cbff91aa168
.dword 0xa8fee5a5ed7d3
.dword 0x3fb83cbff91aa168
.dword 0xa8fee5a5ed7d3
.dword 0x3fd15077c37223e0
.dword 0x3b244b258c5a4
.dword 0x3fd15077c37223e0
.dword 0x3b244b258c5a4
.dword 0x3fd15077c37223e0
.dword 0x3b244b258c5a4
.dword 0x3fd15077c37223e0
.dword 0x3b244b258c5a4
.dword 0x3fd15077c37223e0
.dword 0x3b244b258c5a4
.dword 0x3fef739c46636880
.dword 0x10476b3053983
.dword 0x3fef739c46636880
.dword 0x10476b3053983
.dword 0x3fef739c46636880
.dword 0x10476b3053983
.dword 0x3fef739c46636880
.dword 0x10476b3053983
.dword 0x3fef739c46636880
.dword 0x10476b3053983
.dword 0x3fd66501be94bfaa
.dword 0x2db9b37951ed7
.dword 0x3fd66501be94bfaa
.dword 0x2db9b37951ed7
.dword 0x3fd66501be94bfaa
.dword 0x2db9b37951ed7
.dword 0x3fd66501be94bfaa
.dword 0x2db9b37951ed7
.dword 0x3fd66501be94bfaa
.dword 0x2db9b37951ed7
.dword 0x3fd27587e8bf0d24
.dword 0x377956aa3acd6
.dword 0x3fd27587e8bf0d24
.dword 0x377956aa3acd6
.dword 0x3fd27587e8bf0d24
.dword 0x377956aa3acd6
.dword 0x3fd27587e8bf0d24
.dword 0x377956aa3acd6
.dword 0x3fd27587e8bf0d24
.dword 0x377956aa3acd6
.dword 0x3fefa0ece2bf8e3e
.dword 0x10301873f2edf
.dword 0x3fefa0ece2bf8e3e
.dword 0x10301873f2edf
.dword 0x3fefa0ece2bf8e3e
.dword 0x10301873f2edf
.dword 0x3fefa0ece2bf8e3e
.dword 0x10301873f2edf
.dword 0x3fefa0ece2bf8e3e
.dword 0x10301873f2edf
.dword 0x3f974ff40f3d7680
.dword 0x25f66f73ece988
.dword 0x3f974ff40f3d7680
.dword 0x25f66f73ece988
.dword 0x3f974ff40f3d7680
.dword 0x25f66f73ece988
.dword 0x3f974ff40f3d7680
.dword 0x25f66f73ece988
.dword 0x3f974ff40f3d7680
.dword 0x25f66f73ece988
.dword 0x3fe31ce2ccbc1e66
.dword 0x1ac9ccbd0e93e
.dword 0x3fe31ce2ccbc1e66
.dword 0x1ac9ccbd0e93e
.dword 0x3fe31ce2ccbc1e66
.dword 0x1ac9ccbd0e93e
.dword 0x3fe31ce2ccbc1e66
.dword 0x1ac9ccbd0e93e
.dword 0x3fe31ce2ccbc1e66
.dword 0x1ac9ccbd0e93e
.dword 0x3fe8cccf25de5b64
.dword 0x14a52755f43bc
.dword 0x3fe8cccf25de5b64
.dword 0x14a52755f43bc
.dword 0x3fe8cccf25de5b64
.dword 0x14a52755f43bc
.dword 0x3fe8cccf25de5b64
.dword 0x14a52755f43bc
.dword 0x3fe8cccf25de5b64
.dword 0x14a52755f43bc
.dword 0x3fce8399b2e29734
.dword 0x431dd901d710d
.dword 0x3fce8399b2e29734
.dword 0x431dd901d710d
.dword 0x3fce8399b2e29734
.dword 0x431dd901d710d
.dword 0x3fce8399b2e29734
.dword 0x431dd901d710d
.dword 0x3fce8399b2e29734
.dword 0x431dd901d710d
.dword 0x3fd047e170b449d4
.dword 0x3ee56faafc279
.dword 0x3fd047e170b449d4
.dword 0x3ee56faafc279
.dword 0x3fd047e170b449d4
.dword 0x3ee56faafc279
.dword 0x3fd047e170b449d4
.dword 0x3ee56faafc279
.dword 0x3fd047e170b449d4
.dword 0x3ee56faafc279
.dword 0x3fa377b25cf47bc0
.dword 0x1a4cd701113669
.dword 0x3fa377b25cf47bc0
.dword 0x1a4cd701113669
.dword 0x3fa377b25cf47bc0
.dword 0x1a4cd701113669
.dword 0x3fa377b25cf47bc0
.dword 0x1a4cd701113669
.dword 0x3fa377b25cf47bc0
.dword 0x1a4cd701113669
.dword 0x3fd2dad942d10ae0
.dword 0x364f3ef277503
.dword 0x3fd2dad942d10ae0
.dword 0x364f3ef277503
.dword 0x3fd2dad942d10ae0
.dword 0x364f3ef277503
.dword 0x3fd2dad942d10ae0
.dword 0x364f3ef277503
.dword 0x3fd2dad942d10ae0
.dword 0x364f3ef277503
.dword 0x3fd287d2722667ba
.dword 0x374294cb0d2a1
.dword 0x3fd287d2722667ba
.dword 0x374294cb0d2a1
.dword 0x3fd287d2722667ba
.dword 0x374294cb0d2a1
.dword 0x3fd287d2722667ba
.dword 0x374294cb0d2a1
.dword 0x3fd287d2722667ba
.dword 0x374294cb0d2a1
.dword 0x3fe08fb38ee7799e
.dword 0x1eea56a7bc646
.dword 0x3fe08fb38ee7799e
.dword 0x1eea56a7bc646
.dword 0x3fe08fb38ee7799e
.dword 0x1eea56a7bc646
.dword 0x3fe08fb38ee7799e
.dword 0x1eea56a7bc646
.dword 0x3fe08fb38ee7799e
.dword 0x1eea56a7bc646
.dword 0x3fea39f66a6db707
.dword 0x1385b5899f510
.dword 0x3fea39f66a6db707
.dword 0x1385b5899f510
.dword 0x3fea39f66a6db707
.dword 0x1385b5899f510
.dword 0x3fea39f66a6db707
.dword 0x1385b5899f510
.dword 0x3fea39f66a6db707
.dword 0x1385b5899f510
.dword 0x3fd9e8d484ef19ec
.dword 0x2785ae814c793
.dword 0x3fd9e8d484ef19ec
.dword 0x2785ae814c793
.dword 0x3fd9e8d484ef19ec
.dword 0x2785ae814c793
.dword 0x3fd9e8d484ef19ec
.dword 0x2785ae814c793
.dword 0x3fd9e8d484ef19ec
.dword 0x2785ae814c793
.dword 0x3fe1e1d3a51fe0f1
.dword 0x1ca1c5f4249aa
.dword 0x3fe1e1d3a51fe0f1
.dword 0x1ca1c5f4249aa
.dword 0x3fe1e1d3a51fe0f1
.dword 0x1ca1c5f4249aa
.dword 0x3fe1e1d3a51fe0f1
.dword 0x1ca1c5f4249aa
.dword 0x3fe1e1d3a51fe0f1
.dword 0x1ca1c5f4249aa
.dword 0x3fdb4cc0a22b29a6
.dword 0x258268dcec408
.dword 0x3fdb4cc0a22b29a6
.dword 0x258268dcec408
.dword 0x3fdb4cc0a22b29a6
.dword 0x258268dcec408
.dword 0x3fdb4cc0a22b29a6
.dword 0x258268dcec408
.dword 0x3fdb4cc0a22b29a6
.dword 0x258268dcec408
.dword 0x3f73ef61486bb700
.dword 0x49aef15fb1c249
.dword 0x3f73ef61486bb700
.dword 0x49aef15fb1c249
.dword 0x3f73ef61486bb700
.dword 0x49aef15fb1c249
.dword 0x3f73ef61486bb700
.dword 0x49aef15fb1c249
.dword 0x3f73ef61486bb700
.dword 0x49aef15fb1c249
.dword 0x3fd2fe42861fda3a
.dword 0x35e9fd8c3d2ca
.dword 0x3fd2fe42861fda3a
.dword 0x35e9fd8c3d2ca
.dword 0x3fd2fe42861fda3a
.dword 0x35e9fd8c3d2ca
.dword 0x3fd2fe42861fda3a
.dword 0x35e9fd8c3d2ca
.dword 0x3fd2fe42861fda3a
.dword 0x35e9fd8c3d2ca
.dword 0x3fbae80d9af5ab28
.dword 0x983b2a4090630
.dword 0x3fbae80d9af5ab28
.dword 0x983b2a4090630
.dword 0x3fbae80d9af5ab28
.dword 0x983b2a4090630
.dword 0x3fbae80d9af5ab28
.dword 0x983b2a4090630
.dword 0x3fbae80d9af5ab28
.dword 0x983b2a4090630
.dword 0x3fd237767be2fcf6
.dword 0x383659b16bdb6
.dword 0x3fd237767be2fcf6
.dword 0x383659b16bdb6
.dword 0x3fd237767be2fcf6
.dword 0x383659b16bdb6
.dword 0x3fd237767be2fcf6
.dword 0x383659b16bdb6
.dword 0x3fd237767be2fcf6
.dword 0x383659b16bdb6
.dword 0x3fecec4d7aaf439e
.dword 0x11b3bf6d862a1
.dword 0x3fecec4d7aaf439e
.dword 0x11b3bf6d862a1
.dword 0x3fecec4d7aaf439e
.dword 0x11b3bf6d862a1
.dword 0x3fecec4d7aaf439e
.dword 0x11b3bf6d862a1
.dword 0x3fecec4d7aaf439e
.dword 0x11b3bf6d862a1
.dword 0x3fa9a1a1c1fe37b0
.dword 0x13f9bb97d13731
.dword 0x3fa9a1a1c1fe37b0
.dword 0x13f9bb97d13731
.dword 0x3fa9a1a1c1fe37b0
.dword 0x13f9bb97d13731
.dword 0x3fa9a1a1c1fe37b0
.dword 0x13f9bb97d13731
.dword 0x3fa9a1a1c1fe37b0
.dword 0x13f9bb97d13731
.dword 0x3fec69eb9f603cc8
.dword 0x1204fa4524e2e
.dword 0x3fec69eb9f603cc8
.dword 0x1204fa4524e2e
.dword 0x3fec69eb9f603cc8
.dword 0x1204fa4524e2e
.dword 0x3fec69eb9f603cc8
.dword 0x1204fa4524e2e
.dword 0x3fec69eb9f603cc8
.dword 0x1204fa4524e2e
.dword 0x3fe1f4f9934f5428
.dword 0x1c833def8b3a4
.dword 0x3fe1f4f9934f5428
.dword 0x1c833def8b3a4
.dword 0x3fe1f4f9934f5428
.dword 0x1c833def8b3a4
.dword 0x3fe1f4f9934f5428
.dword 0x1c833def8b3a4
.dword 0x3fe1f4f9934f5428
.dword 0x1c833def8b3a4
.dword 0x3fd512b8b8eb3302
.dword 0x3097ba21a05f3
.dword 0x3fd512b8b8eb3302
.dword 0x3097ba21a05f3
.dword 0x3fd512b8b8eb3302
.dword 0x3097ba21a05f3
.dword 0x3fd512b8b8eb3302
.dword 0x3097ba21a05f3
.dword 0x3fd512b8b8eb3302
.dword 0x3097ba21a05f3
.dword 0x3fe68408ce70081d
.dword 0x16bd58486f709
.dword 0x3fe68408ce70081d
.dword 0x16bd58486f709
.dword 0x3fe68408ce70081d
.dword 0x16bd58486f709
.dword 0x3fe68408ce70081d
.dword 0x16bd58486f709
.dword 0x3fe68408ce70081d
.dword 0x16bd58486f709
.dword 0x3fd685d2bfb30d8e
.dword 0x2d7713dc9124f
.dword 0x3fd685d2bfb30d8e
.dword 0x2d7713dc9124f
.dword 0x3fd685d2bfb30d8e
.dword 0x2d7713dc9124f
.dword 0x3fd685d2bfb30d8e
.dword 0x2d7713dc9124f
.dword 0x3fd685d2bfb30d8e
.dword 0x2d7713dc9124f
.dword 0x3fbac07d2a325788
.dword 0x991c4de78594c
.dword 0x3fbac07d2a325788
.dword 0x991c4de78594c
.dword 0x3fbac07d2a325788
.dword 0x991c4de78594c
.dword 0x3fbac07d2a325788
.dword 0x991c4de78594c
.dword 0x3fbac07d2a325788
.dword 0x991c4de78594c
.dword 0x3feddc73a0ce4388
.dword 0x1125623de1321
.dword 0x3feddc73a0ce4388
.dword 0x1125623de1321
.dword 0x3feddc73a0ce4388
.dword 0x1125623de1321
.dword 0x3feddc73a0ce4388
.dword 0x1125623de1321
.dword 0x3feddc73a0ce4388
.dword 0x1125623de1321
.dword 0x3feb4fdd08c65822
.dword 0x12bf118e2a757
.dword 0x3feb4fdd08c65822
.dword 0x12bf118e2a757
.dword 0x3feb4fdd08c65822
.dword 0x12bf118e2a757
.dword 0x3feb4fdd08c65822
.dword 0x12bf118e2a757
.dword 0x3feb4fdd08c65822
.dword 0x12bf118e2a757
.dword 0x3fe49b2ddf4ba36e
.dword 0x18d8d04dff642
.dword 0x3fe49b2ddf4ba36e
.dword 0x18d8d04dff642
.dword 0x3fe49b2ddf4ba36e
.dword 0x18d8d04dff642
.dword 0x3fe49b2ddf4ba36e
.dword 0x18d8d04dff642
.dword 0x3fe49b2ddf4ba36e
.dword 0x18d8d04dff642
.dword 0x3fc75095a6c9b944
.dword 0x57d75cedfc60c
.dword 0x3fc75095a6c9b944
.dword 0x57d75cedfc60c
.dword 0x3fc75095a6c9b944
.dword 0x57d75cedfc60c
.dword 0x3fc75095a6c9b944
.dword 0x57d75cedfc60c
.dword 0x3fc75095a6c9b944
.dword 0x57d75cedfc60c
.dword 0x3fb4d7ed1d4d5340
.dword 0xc48330b5149bc
.dword 0x3fb4d7ed1d4d5340
.dword 0xc48330b5149bc
.dword 0x3fb4d7ed1d4d5340
.dword 0xc48330b5149bc
.dword 0x3fb4d7ed1d4d5340
.dword 0xc48330b5149bc
.dword 0x3fb4d7ed1d4d5340
.dword 0xc48330b5149bc
.dword 0x3fe250a8e937afc7
.dword 0x1bf4821442994
.dword 0x3fe250a8e937afc7
.dword 0x1bf4821442994
.dword 0x3fe250a8e937afc7
.dword 0x1bf4821442994
.dword 0x3fe250a8e937afc7
.dword 0x1bf4821442994
.dword 0x3fe250a8e937afc7
.dword 0x1bf4821442994
.dword 0x3fe05bd62d9d2083
.dword 0x1f4c5ac545d82
.dword 0x3fe05bd62d9d2083
.dword 0x1f4c5ac545d82
.dword 0x3fe05bd62d9d2083
.dword 0x1f4c5ac545d82
.dword 0x3fe05bd62d9d2083
.dword 0x1f4c5ac545d82
.dword 0x3fe05bd62d9d2083
.dword 0x1f4c5ac545d82
.dword 0x3fe680e97a6bdb27
.dword 0xb603fff83dd96
.dword 0x3fe680e97a6bdb27
.dword 0xb603fff83dd96
.dword 0x3fe680e97a6bdb27
.dword 0xb603fff83dd96
.dword 0x3fe680e97a6bdb27
.dword 0xb603fff83dd96
.dword 0x3fe680e97a6bdb27
.dword 0xb603fff83dd96
.dword 0x3fb164eb10408a50
.dword 0x3d6f615847e2a4
.dword 0x3fb164eb10408a50
.dword 0x3d6f615847e2a4
.dword 0x3fb164eb10408a50
.dword 0x3d6f615847e2a4
.dword 0x3fb164eb10408a50
.dword 0x3d6f615847e2a4
.dword 0x3fb164eb10408a50
.dword 0x3d6f615847e2a4
.dword 0x3fa731f99169dd60
.dword 0x4612d220ad5b66
.dword 0x3fa731f99169dd60
.dword 0x4612d220ad5b66
.dword 0x3fa731f99169dd60
.dword 0x4612d220ad5b66
.dword 0x3fa731f99169dd60
.dword 0x4612d220ad5b66
.dword 0x3fa731f99169dd60
.dword 0x4612d220ad5b66
.dword 0x3fde510a1912dae8
.dword 0x10e3721430a441
.dword 0x3fde510a1912dae8
.dword 0x10e3721430a441
.dword 0x3fde510a1912dae8
.dword 0x10e3721430a441
.dword 0x3fde510a1912dae8
.dword 0x10e3721430a441
.dword 0x3fde510a1912dae8
.dword 0x10e3721430a441
.dword 0x3fc9c3798a005bc0
.dword 0x23df7e38652a3b
.dword 0x3fc9c3798a005bc0
.dword 0x23df7e38652a3b
.dword 0x3fc9c3798a005bc0
.dword 0x23df7e38652a3b
.dword 0x3fc9c3798a005bc0
.dword 0x23df7e38652a3b
.dword 0x3fc9c3798a005bc0
.dword 0x23df7e38652a3b
.dword 0x3fe48eaab4295ebc
.dword 0xc73f7ef5a1439
.dword 0x3fe48eaab4295ebc
.dword 0xc73f7ef5a1439
.dword 0x3fe48eaab4295ebc
.dword 0xc73f7ef5a1439
.dword 0x3fe48eaab4295ebc
.dword 0xc73f7ef5a1439
.dword 0x3fe48eaab4295ebc
.dword 0xc73f7ef5a1439
.dword 0x3fd1b1e0625a83ac
.dword 0x1cef5c7fd0470b
.dword 0x3fd1b1e0625a83ac
.dword 0x1cef5c7fd0470b
.dword 0x3fd1b1e0625a83ac
.dword 0x1cef5c7fd0470b
.dword 0x3fd1b1e0625a83ac
.dword 0x1cef5c7fd0470b
.dword 0x3fd1b1e0625a83ac
.dword 0x1cef5c7fd0470b
.dword 0x3fd5d053fc3cac4e
.dword 0x1778adb2373475
.dword 0x3fd5d053fc3cac4e
.dword 0x1778adb2373475
.dword 0x3fd5d053fc3cac4e
.dword 0x1778adb2373475
.dword 0x3fd5d053fc3cac4e
.dword 0x1778adb2373475
.dword 0x3fd5d053fc3cac4e
.dword 0x1778adb2373475
.dword 0x3fd3ab94a728237c
.dword 0x1a0777dfda8219
.dword 0x3fd3ab94a728237c
.dword 0x1a0777dfda8219
.dword 0x3fd3ab94a728237c
.dword 0x1a0777dfda8219
.dword 0x3fd3ab94a728237c
.dword 0x1a0777dfda8219
.dword 0x3fd3ab94a728237c
.dword 0x1a0777dfda8219
.dword 0x3fd6f9fe64df04ac
.dword 0x16489a0f8e6b35
.dword 0x3fd6f9fe64df04ac
.dword 0x16489a0f8e6b35
.dword 0x3fd6f9fe64df04ac
.dword 0x16489a0f8e6b35
.dword 0x3fd6f9fe64df04ac
.dword 0x16489a0f8e6b35
.dword 0x3fd6f9fe64df04ac
.dword 0x16489a0f8e6b35
.dword 0x3fed6c74c988a95b
.dword 0x8b352cabde579
.dword 0x3fed6c74c988a95b
.dword 0x8b352cabde579
.dword 0x3fed6c74c988a95b
.dword 0x8b352cabde579
.dword 0x3fed6c74c988a95b
.dword 0x8b352cabde579
.dword 0x3fed6c74c988a95b
.dword 0x8b352cabde579
.dword 0x3fec1acac6fbbce3
.dword 0x91bdb065bafe3
.dword 0x3fec1acac6fbbce3
.dword 0x91bdb065bafe3
.dword 0x3fec1acac6fbbce3
.dword 0x91bdb065bafe3
.dword 0x3fec1acac6fbbce3
.dword 0x91bdb065bafe3
.dword 0x3fec1acac6fbbce3
.dword 0x91bdb065bafe3
.dword 0x3fcf8aac8a7b2128
.dword 0x203b83f0621f36
.dword 0x3fcf8aac8a7b2128
.dword 0x203b83f0621f36
.dword 0x3fcf8aac8a7b2128
.dword 0x203b83f0621f36
.dword 0x3fcf8aac8a7b2128
.dword 0x203b83f0621f36
.dword 0x3fcf8aac8a7b2128
.dword 0x203b83f0621f36
.dword 0x3fe37687c122e4a5
.dword 0xd273541640433
.dword 0x3fe37687c122e4a5
.dword 0xd273541640433
.dword 0x3fe37687c122e4a5
.dword 0xd273541640433
.dword 0x3fe37687c122e4a5
.dword 0xd273541640433
.dword 0x3fe37687c122e4a5
.dword 0xd273541640433
.dword 0x3fe9d831ab897405
.dword 0x9e7c7d0eedbe4
.dword 0x3fe9d831ab897405
.dword 0x9e7c7d0eedbe4
.dword 0x3fe9d831ab897405
.dword 0x9e7c7d0eedbe4
.dword 0x3fe9d831ab897405
.dword 0x9e7c7d0eedbe4
.dword 0x3fe9d831ab897405
.dword 0x9e7c7d0eedbe4
.dword 0x3fed8ceabf1f9324
.dword 0x8a9c41b72cd7c
.dword 0x3fed8ceabf1f9324
.dword 0x8a9c41b72cd7c
.dword 0x3fed8ceabf1f9324
.dword 0x8a9c41b72cd7c
.dword 0x3fed8ceabf1f9324
.dword 0x8a9c41b72cd7c
.dword 0x3fed8ceabf1f9324
.dword 0x8a9c41b72cd7c
.dword 0x3fe4112f9ac6d6c3
.dword 0xcc1d6790db60f
.dword 0x3fe4112f9ac6d6c3
.dword 0xcc1d6790db60f
.dword 0x3fe4112f9ac6d6c3
.dword 0xcc1d6790db60f
.dword 0x3fe4112f9ac6d6c3
.dword 0xcc1d6790db60f
.dword 0x3fe4112f9ac6d6c3
.dword 0xcc1d6790db60f
.dword 0x3feda38497fa8b3c
.dword 0x8a328f43b02b4
.dword 0x3feda38497fa8b3c
.dword 0x8a328f43b02b4
.dword 0x3feda38497fa8b3c
.dword 0x8a328f43b02b4
.dword 0x3feda38497fa8b3c
.dword 0x8a328f43b02b4
.dword 0x3feda38497fa8b3c
.dword 0x8a328f43b02b4
.dword 0x3fe9560a9c711bee
.dword 0xa1aaa3955c615
.dword 0x3fe9560a9c711bee
.dword 0xa1aaa3955c615
.dword 0x3fe9560a9c711bee
.dword 0xa1aaa3955c615
.dword 0x3fe9560a9c711bee
.dword 0xa1aaa3955c615
.dword 0x3fe9560a9c711bee
.dword 0xa1aaa3955c615
.dword 0x3fe2dbc1697368fe
.dword 0xd932898aef087
.dword 0x3fe2dbc1697368fe
.dword 0xd932898aef087
.dword 0x3fe2dbc1697368fe
.dword 0xd932898aef087
.dword 0x3fe2dbc1697368fe
.dword 0xd932898aef087
.dword 0x3fe2dbc1697368fe
.dword 0xd932898aef087
.dword 0x3fef7f346cc0733d
.dword 0x820b68f292ba7
.dword 0x3fef7f346cc0733d
.dword 0x820b68f292ba7
.dword 0x3fef7f346cc0733d
.dword 0x820b68f292ba7
.dword 0x3fef7f346cc0733d
.dword 0x820b68f292ba7
.dword 0x3fef7f346cc0733d
.dword 0x820b68f292ba7
.dword 0x3fc466d613983784
.dword 0x29188fb6dcebd6
.dword 0x3fc466d613983784
.dword 0x29188fb6dcebd6
.dword 0x3fc466d613983784
.dword 0x29188fb6dcebd6
.dword 0x3fc466d613983784
.dword 0x29188fb6dcebd6
.dword 0x3fc466d613983784
.dword 0x29188fb6dcebd6
.dword 0x3fecc3482b94768d
.dword 0x8e67f3d962995
.dword 0x3fecc3482b94768d
.dword 0x8e67f3d962995
.dword 0x3fecc3482b94768d
.dword 0x8e67f3d962995
.dword 0x3fecc3482b94768d
.dword 0x8e67f3d962995
.dword 0x3fecc3482b94768d
.dword 0x8e67f3d962995
.dword 0x3fef63e68c80ab2e
.dword 0x827c86d9a51bc
.dword 0x3fef63e68c80ab2e
.dword 0x827c86d9a51bc
.dword 0x3fef63e68c80ab2e
.dword 0x827c86d9a51bc
.dword 0x3fef63e68c80ab2e
.dword 0x827c86d9a51bc
.dword 0x3fef63e68c80ab2e
.dword 0x827c86d9a51bc
.dword 0x3f90dfda08a590e0
.dword 0x5e577f0cb610bd
.dword 0x3f90dfda08a590e0
.dword 0x5e577f0cb610bd
.dword 0x3f90dfda08a590e0
.dword 0x5e577f0cb610bd
.dword 0x3f90dfda08a590e0
.dword 0x5e577f0cb610bd
.dword 0x3f90dfda08a590e0
.dword 0x5e577f0cb610bd
.dword 0x3fd8ed660d117174
.dword 0x148a29a3c41394
.dword 0x3fd8ed660d117174
.dword 0x148a29a3c41394
.dword 0x3fd8ed660d117174
.dword 0x148a29a3c41394
.dword 0x3fd8ed660d117174
.dword 0x148a29a3c41394
.dword 0x3fd8ed660d117174
.dword 0x148a29a3c41394
.dword 0x3fdec544b8508c48
.dword 0x10a3a73a8e2744
.dword 0x3fdec544b8508c48
.dword 0x10a3a73a8e2744
.dword 0x3fdec544b8508c48
.dword 0x10a3a73a8e2744
.dword 0x3fdec544b8508c48
.dword 0x10a3a73a8e2744
.dword 0x3fdec544b8508c48
.dword 0x10a3a73a8e2744
.dword 0x3fc942981852ba5c
.dword 0x2444e34d859383
.dword 0x3fc942981852ba5c
.dword 0x2444e34d859383
.dword 0x3fc942981852ba5c
.dword 0x2444e34d859383
.dword 0x3fc942981852ba5c
.dword 0x2444e34d859383
.dword 0x3fc942981852ba5c
.dword 0x2444e34d859383
.dword 0x3fea3367805149f4
.dword 0x9c54c404c67bb
.dword 0x3fea3367805149f4
.dword 0x9c54c404c67bb
.dword 0x3fea3367805149f4
.dword 0x9c54c404c67bb
.dword 0x3fea3367805149f4
.dword 0x9c54c404c67bb
.dword 0x3fea3367805149f4
.dword 0x9c54c404c67bb
.dword 0x3fe29f9c1848d382
.dword 0xdbeffdaf5b76d
.dword 0x3fe29f9c1848d382
.dword 0xdbeffdaf5b76d
.dword 0x3fe29f9c1848d382
.dword 0xdbeffdaf5b76d
.dword 0x3fe29f9c1848d382
.dword 0xdbeffdaf5b76d
.dword 0x3fe29f9c1848d382
.dword 0xdbeffdaf5b76d
.dword 0x3fdacfa55344ee06
.dword 0x1318b7ed9f1638
.dword 0x3fdacfa55344ee06
.dword 0x1318b7ed9f1638
.dword 0x3fdacfa55344ee06
.dword 0x1318b7ed9f1638
.dword 0x3fdacfa55344ee06
.dword 0x1318b7ed9f1638
.dword 0x3fdacfa55344ee06
.dword 0x1318b7ed9f1638
.dword 0x3fe21eda264c2fca
.dword 0xe20ac8bfa6abe
.dword 0x3fe21eda264c2fca
.dword 0xe20ac8bfa6abe
.dword 0x3fe21eda264c2fca
.dword 0xe20ac8bfa6abe
.dword 0x3fe21eda264c2fca
.dword 0xe20ac8bfa6abe
.dword 0x3fe21eda264c2fca
.dword 0xe20ac8bfa6abe
.dword 0x3fa2e25fb28d0ed0
.dword 0x4b1ccd571b8299
.dword 0x3fa2e25fb28d0ed0
.dword 0x4b1ccd571b8299
.dword 0x3fa2e25fb28d0ed0
.dword 0x4b1ccd571b8299
.dword 0x3fa2e25fb28d0ed0
.dword 0x4b1ccd571b8299
.dword 0x3fa2e25fb28d0ed0
.dword 0x4b1ccd571b8299
.dword 0x3fe9339c9942e184
.dword 0xa28780dbb0cac
.dword 0x3fe9339c9942e184
.dword 0xa28780dbb0cac
.dword 0x3fe9339c9942e184
.dword 0xa28780dbb0cac
.dword 0x3fe9339c9942e184
.dword 0xa28780dbb0cac
.dword 0x3fe9339c9942e184
.dword 0xa28780dbb0cac
.dword 0x3fe616b959db9d26
.dword 0xb96f025724a63
.dword 0x3fe616b959db9d26
.dword 0xb96f025724a63
.dword 0x3fe616b959db9d26
.dword 0xb96f025724a63
.dword 0x3fe616b959db9d26
.dword 0xb96f025724a63
.dword 0x3fe616b959db9d26
.dword 0xb96f025724a63
.dword 0x3fdeac4162a4e298
.dword 0x10b138e0e53a14
.dword 0x3fdeac4162a4e298
.dword 0x10b138e0e53a14
.dword 0x3fdeac4162a4e298
.dword 0x10b138e0e53a14
.dword 0x3fdeac4162a4e298
.dword 0x10b138e0e53a14
.dword 0x3fdeac4162a4e298
.dword 0x10b138e0e53a14
.dword 0x3fe89757fb944015
.dword 0xa6905162cbd85
.dword 0x3fe89757fb944015
.dword 0xa6905162cbd85
.dword 0x3fe89757fb944015
.dword 0xa6905162cbd85
.dword 0x3fe89757fb944015
.dword 0xa6905162cbd85
.dword 0x3fe89757fb944015
.dword 0xa6905162cbd85
.dword 0x3feccea8abebb915
.dword 0x8e2fb62a341c7
.dword 0x3feccea8abebb915
.dword 0x8e2fb62a341c7
.dword 0x3feccea8abebb915
.dword 0x8e2fb62a341c7
.dword 0x3feccea8abebb915
.dword 0x8e2fb62a341c7
.dword 0x3feccea8abebb915
.dword 0x8e2fb62a341c7
.dword 0x3fd1adc1f74c2452
.dword 0x1cf61a472d8839
.dword 0x3fd1adc1f74c2452
.dword 0x1cf61a472d8839
.dword 0x3fd1adc1f74c2452
.dword 0x1cf61a472d8839
.dword 0x3fd1adc1f74c2452
.dword 0x1cf61a472d8839
.dword 0x3fd1adc1f74c2452
.dword 0x1cf61a472d8839
.dword 0x3fe2ebb6935beb29
.dword 0xd87b5aa363c08
.dword 0x3fe2ebb6935beb29
.dword 0xd87b5aa363c08
.dword 0x3fe2ebb6935beb29
.dword 0xd87b5aa363c08
.dword 0x3fe2ebb6935beb29
.dword 0xd87b5aa363c08
.dword 0x3fe2ebb6935beb29
.dword 0xd87b5aa363c08
.dword 0x3fefd879b36541fe
.dword 0x809edd6b00df6
.dword 0x3fefd879b36541fe
.dword 0x809edd6b00df6
.dword 0x3fefd879b36541fe
.dword 0x809edd6b00df6
.dword 0x3fefd879b36541fe
.dword 0x809edd6b00df6
.dword 0x3fefd879b36541fe
.dword 0x809edd6b00df6
.dword 0x3fe276a536e292bc
.dword 0xddd7f5d4603a8
.dword 0x3fe276a536e292bc
.dword 0xddd7f5d4603a8
.dword 0x3fe276a536e292bc
.dword 0xddd7f5d4603a8
.dword 0x3fe276a536e292bc
.dword 0xddd7f5d4603a8
.dword 0x3fe276a536e292bc
.dword 0xddd7f5d4603a8
.dword 0x3fd297946d1f11f8
.dword 0x1b89df6e6cca61
.dword 0x3fd297946d1f11f8
.dword 0x1b89df6e6cca61
.dword 0x3fd297946d1f11f8
.dword 0x1b89df6e6cca61
.dword 0x3fd297946d1f11f8
.dword 0x1b89df6e6cca61
.dword 0x3fd297946d1f11f8
.dword 0x1b89df6e6cca61
.dword 0x3fd80db239aad63c
.dword 0x15492f9eee0ed0
.dword 0x3fd80db239aad63c
.dword 0x15492f9eee0ed0
.dword 0x3fd80db239aad63c
.dword 0x15492f9eee0ed0
.dword 0x3fd80db239aad63c
.dword 0x15492f9eee0ed0
.dword 0x3fd80db239aad63c
.dword 0x15492f9eee0ed0
.dword 0x3fe7f99a9fada3f7
.dword 0xaad8325d6bb4b
.dword 0x3fe7f99a9fada3f7
.dword 0xaad8325d6bb4b
.dword 0x3fe7f99a9fada3f7
.dword 0xaad8325d6bb4b
.dword 0x3fe7f99a9fada3f7
.dword 0xaad8325d6bb4b
.dword 0x3fe7f99a9fada3f7
.dword 0xaad8325d6bb4b
.dword 0x3fe88f930524ffed
.dword 0xa6c501e4f606c
.dword 0x3fe88f930524ffed
.dword 0xa6c501e4f606c
.dword 0x3fe88f930524ffed
.dword 0xa6c501e4f606c
.dword 0x3fe88f930524ffed
.dword 0xa6c501e4f606c
.dword 0x3fe88f930524ffed
.dword 0xa6c501e4f606c
.dword 0x3fb0dcd5defec2a8
.dword 0x3e5cec70b9a589
.dword 0x3fb0dcd5defec2a8
.dword 0x3e5cec70b9a589
.dword 0x3fb0dcd5defec2a8
.dword 0x3e5cec70b9a589
.dword 0x3fb0dcd5defec2a8
.dword 0x3e5cec70b9a589
.dword 0x3fb0dcd5defec2a8
.dword 0x3e5cec70b9a589
.dword 0x3fdf78ae78ab378c
.dword 0x1044cbae37e288
.dword 0x3fdf78ae78ab378c
.dword 0x1044cbae37e288
.dword 0x3fdf78ae78ab378c
.dword 0x1044cbae37e288
.dword 0x3fdf78ae78ab378c
.dword 0x1044cbae37e288
.dword 0x3fdf78ae78ab378c
.dword 0x1044cbae37e288
.dword 0x3fecee9df62fba8e
.dword 0x8d92a7557356a
.dword 0x3fecee9df62fba8e
.dword 0x8d92a7557356a
.dword 0x3fecee9df62fba8e
.dword 0x8d92a7557356a
.dword 0x3fecee9df62fba8e
.dword 0x8d92a7557356a
.dword 0x3fecee9df62fba8e
.dword 0x8d92a7557356a
.dword 0x3feeed1b73792322
.dword 0x8471bfeb66e46
.dword 0x3feeed1b73792322
.dword 0x8471bfeb66e46
.dword 0x3feeed1b73792322
.dword 0x8471bfeb66e46
.dword 0x3feeed1b73792322
.dword 0x8471bfeb66e46
.dword 0x3feeed1b73792322
.dword 0x8471bfeb66e46
.dword 0x3feb8074a5515862
.dword 0x94ef9192c64ea
.dword 0x3feb8074a5515862
.dword 0x94ef9192c64ea
.dword 0x3feb8074a5515862
.dword 0x94ef9192c64ea
.dword 0x3feb8074a5515862
.dword 0x94ef9192c64ea
.dword 0x3feb8074a5515862
.dword 0x94ef9192c64ea
.dword 0x3fef6c459933bd24
.dword 0x8259c3a747daa
.dword 0x3fef6c459933bd24
.dword 0x8259c3a747daa
.dword 0x3fef6c459933bd24
.dword 0x8259c3a747daa
.dword 0x3fef6c459933bd24
.dword 0x8259c3a747daa
.dword 0x3fef6c459933bd24
.dword 0x8259c3a747daa
.dword 0x3fd93604e03c0a3c
.dword 0x144eff7bc2b983
.dword 0x3fd93604e03c0a3c
.dword 0x144eff7bc2b983
.dword 0x3fd93604e03c0a3c
.dword 0x144eff7bc2b983
.dword 0x3fd93604e03c0a3c
.dword 0x144eff7bc2b983
.dword 0x3fd93604e03c0a3c
.dword 0x144eff7bc2b983
.dword 0x3fa49e1d2a2c3850
.dword 0x48d546e64735ea
.dword 0x3fa49e1d2a2c3850
.dword 0x48d546e64735ea
.dword 0x3fa49e1d2a2c3850
.dword 0x48d546e64735ea
.dword 0x3fa49e1d2a2c3850
.dword 0x48d546e64735ea
.dword 0x3fa49e1d2a2c3850
.dword 0x48d546e64735ea
.dword 0x3fdf0d78fd605616
.dword 0x107cf69972dffa
.dword 0x3fdf0d78fd605616
.dword 0x107cf69972dffa
.dword 0x3fdf0d78fd605616
.dword 0x107cf69972dffa
.dword 0x3fdf0d78fd605616
.dword 0x107cf69972dffa
.dword 0x3fdf0d78fd605616
.dword 0x107cf69972dffa
.dword 0x3fda9015f9c063d0
.dword 0x134669ba8df314
.dword 0x3fda9015f9c063d0
.dword 0x134669ba8df314
.dword 0x3fda9015f9c063d0
.dword 0x134669ba8df314
.dword 0x3fda9015f9c063d0
.dword 0x134669ba8df314
.dword 0x3fda9015f9c063d0
.dword 0x134669ba8df314
.dword 0x3fc007c3c0d49b24
.dword 0x2ff08003f7aac9
.dword 0x3fc007c3c0d49b24
.dword 0x2ff08003f7aac9
.dword 0x3fc007c3c0d49b24
.dword 0x2ff08003f7aac9
.dword 0x3fc007c3c0d49b24
.dword 0x2ff08003f7aac9
.dword 0x3fc007c3c0d49b24
.dword 0x2ff08003f7aac9
.dword 0x3fecbc0383e7371d
.dword 0x8e8bf9241d21d
.dword 0x3fecbc0383e7371d
.dword 0x8e8bf9241d21d
.dword 0x3fecbc0383e7371d
.dword 0x8e8bf9241d21d
.dword 0x3fecbc0383e7371d
.dword 0x8e8bf9241d21d
.dword 0x3fecbc0383e7371d
.dword 0x8e8bf9241d21d
.dword 0x3fd5b4fc628036d0
.dword 0x17963e401c3d5c
.dword 0x3fd5b4fc628036d0
.dword 0x17963e401c3d5c
.dword 0x3fd5b4fc628036d0
.dword 0x17963e401c3d5c
.dword 0x3fd5b4fc628036d0
.dword 0x17963e401c3d5c
.dword 0x3fd5b4fc628036d0
.dword 0x17963e401c3d5c
.dword 0x3fe0defd802a3484
.dword 0xf2c85d57d5f4e
.dword 0x3fe0defd802a3484
.dword 0xf2c85d57d5f4e
.dword 0x3fe0defd802a3484
.dword 0xf2c85d57d5f4e
.dword 0x3fe0defd802a3484
.dword 0xf2c85d57d5f4e
.dword 0x3fe0defd802a3484
.dword 0xf2c85d57d5f4e
.dword 0x3fc19b60760df248
.dword 0x2d145647273fb7
.dword 0x3fc19b60760df248
.dword 0x2d145647273fb7
.dword 0x3fc19b60760df248
.dword 0x2d145647273fb7
.dword 0x3fc19b60760df248
.dword 0x2d145647273fb7
.dword 0x3fc19b60760df248
.dword 0x2d145647273fb7
.dword 0x3fb91534f78dc928
.dword 0x3469908ef336d2
.dword 0x3fb91534f78dc928
.dword 0x3469908ef336d2
.dword 0x3fb91534f78dc928
.dword 0x3469908ef336d2
.dword 0x3fb91534f78dc928
.dword 0x3469908ef336d2
.dword 0x3fb91534f78dc928
.dword 0x3469908ef336d2
.dword 0x3fcdf4b276514808
.dword 0x2117819828a334
.dword 0x3fcdf4b276514808
.dword 0x2117819828a334
.dword 0x3fcdf4b276514808
.dword 0x2117819828a334
.dword 0x3fcdf4b276514808
.dword 0x2117819828a334
.dword 0x3fcdf4b276514808
.dword 0x2117819828a334
.dword 0x3fef0398f2c43690
.dword 0x8411b4befbb66
.dword 0x3fef0398f2c43690
.dword 0x8411b4befbb66
.dword 0x3fef0398f2c43690
.dword 0x8411b4befbb66
.dword 0x3fef0398f2c43690
.dword 0x8411b4befbb66
.dword 0x3fef0398f2c43690
.dword 0x8411b4befbb66
.dword 0x3fec615cdadb1bd6
.dword 0x905349fccaba7
.dword 0x3fec615cdadb1bd6
.dword 0x905349fccaba7
.dword 0x3fec615cdadb1bd6
.dword 0x905349fccaba7
.dword 0x3fec615cdadb1bd6
.dword 0x905349fccaba7
.dword 0x3fec615cdadb1bd6
.dword 0x905349fccaba7
.dword 0x3fd89fea92fa5aec
.dword 0x14caca9e6ef852
.dword 0x3fd89fea92fa5aec
.dword 0x14caca9e6ef852
.dword 0x3fd89fea92fa5aec
.dword 0x14caca9e6ef852
.dword 0x3fd89fea92fa5aec
.dword 0x14caca9e6ef852
.dword 0x3fd89fea92fa5aec
.dword 0x14caca9e6ef852
.dword 0x3feed6e267fbb404
.dword 0x84d1305d6a52c
.dword 0x3feed6e267fbb404
.dword 0x84d1305d6a52c
.dword 0x3feed6e267fbb404
.dword 0x84d1305d6a52c
.dword 0x3feed6e267fbb404
.dword 0x84d1305d6a52c
.dword 0x3feed6e267fbb404
.dword 0x84d1305d6a52c
.dword 0x3f847a11c08e6900
.dword 0x6900fd5e7998ea
.dword 0x3f847a11c08e6900
.dword 0x6900fd5e7998ea
.dword 0x3f847a11c08e6900
.dword 0x6900fd5e7998ea
.dword 0x3f847a11c08e6900
.dword 0x6900fd5e7998ea
.dword 0x3f847a11c08e6900
.dword 0x6900fd5e7998ea
.dword 0x3fe3a971bda4650f
.dword 0xd0525f2eeabd4
.dword 0x3fe3a971bda4650f
.dword 0xd0525f2eeabd4
.dword 0x3fe3a971bda4650f
.dword 0xd0525f2eeabd4
.dword 0x3fe3a971bda4650f
.dword 0xd0525f2eeabd4
.dword 0x3fe3a971bda4650f
.dword 0xd0525f2eeabd4
.dword 0x3fea1ecfc9e85aba
.dword 0x9cd0035fc8d18
.dword 0x3fea1ecfc9e85aba
.dword 0x9cd0035fc8d18
.dword 0x3fea1ecfc9e85aba
.dword 0x9cd0035fc8d18
.dword 0x3fea1ecfc9e85aba
.dword 0x9cd0035fc8d18
.dword 0x3fea1ecfc9e85aba
.dword 0x9cd0035fc8d18
.dword 0x3fc7e400e1064944
.dword 0x256e5545361807
.dword 0x3fc7e400e1064944
.dword 0x256e5545361807
.dword 0x3fc7e400e1064944
.dword 0x256e5545361807
.dword 0x3fc7e400e1064944
.dword 0x256e5545361807
.dword 0x3fc7e400e1064944
.dword 0x256e5545361807
.dword 0x3fef52c7fe81f2ca
.dword 0x82c3d7a299a30
.dword 0x3fef52c7fe81f2ca
.dword 0x82c3d7a299a30
.dword 0x3fef52c7fe81f2ca
.dword 0x82c3d7a299a30
.dword 0x3fef52c7fe81f2ca
.dword 0x82c3d7a299a30
.dword 0x3fef52c7fe81f2ca
.dword 0x82c3d7a299a30
.dword 0x3fef306047d624fa
.dword 0x8354177563369
.dword 0x3fef306047d624fa
.dword 0x8354177563369
.dword 0x3fef306047d624fa
.dword 0x8354177563369
.dword 0x3fef306047d624fa
.dword 0x8354177563369
.dword 0x3fef306047d624fa
.dword 0x8354177563369
.dword 0x3fed58db6f8a02f7
.dword 0x8b92246f9d976
.dword 0x3fed58db6f8a02f7
.dword 0x8b92246f9d976
.dword 0x3fed58db6f8a02f7
.dword 0x8b92246f9d976
.dword 0x3fed58db6f8a02f7
.dword 0x8b92246f9d976
.dword 0x3fed58db6f8a02f7
.dword 0x8b92246f9d976
.dword 0x3fea7ff36f0082a1
.dword 0x9a9131253762a
.dword 0x3fea7ff36f0082a1
.dword 0x9a9131253762a
.dword 0x3fea7ff36f0082a1
.dword 0x9a9131253762a
.dword 0x3fea7ff36f0082a1
.dword 0x9a9131253762a
.dword 0x3fea7ff36f0082a1
.dword 0x9a9131253762a
.dword 0x3feefae553c5d72a
.dword 0x8436cd2d997bc
.dword 0x3feefae553c5d72a
.dword 0x8436cd2d997bc
.dword 0x3feefae553c5d72a
.dword 0x8436cd2d997bc
.dword 0x3feefae553c5d72a
.dword 0x8436cd2d997bc
.dword 0x3feefae553c5d72a
.dword 0x8436cd2d997bc
.dword 0x3fe2777568687b1d
.dword 0xddce30c1f58dd
.dword 0x3fe2777568687b1d
.dword 0xddce30c1f58dd
.dword 0x3fe2777568687b1d
.dword 0xddce30c1f58dd
.dword 0x3fe2777568687b1d
.dword 0xddce30c1f58dd
.dword 0x3fe2777568687b1d
.dword 0xddce30c1f58dd
.dword 0x3fe943c1ac39c5ea
.dword 0xa21fa4854a169
.dword 0x3fe943c1ac39c5ea
.dword 0xa21fa4854a169
.dword 0x3fe943c1ac39c5ea
.dword 0xa21fa4854a169
.dword 0x3fe943c1ac39c5ea
.dword 0xa21fa4854a169
.dword 0x3fe943c1ac39c5ea
.dword 0xa21fa4854a169
.dword 0x3fc2b1fedbbf1d4c
.dword 0x2b62f639c243d4
.dword 0x3fc2b1fedbbf1d4c
.dword 0x2b62f639c243d4
.dword 0x3fc2b1fedbbf1d4c
.dword 0x2b62f639c243d4
.dword 0x3fc2b1fedbbf1d4c
.dword 0x2b62f639c243d4
.dword 0x3fc2b1fedbbf1d4c
.dword 0x2b62f639c243d4
.dword 0x3fec997814fb867d
.dword 0x8f3826f3bfa36
.dword 0x3fec997814fb867d
.dword 0x8f3826f3bfa36
.dword 0x3fec997814fb867d
.dword 0x8f3826f3bfa36
.dword 0x3fec997814fb867d
.dword 0x8f3826f3bfa36
.dword 0x3fec997814fb867d
.dword 0x8f3826f3bfa36
.dword 0x3fe8bf8eb1452494
.dword 0xa581aab66927d
.dword 0x3fe8bf8eb1452494
.dword 0xa581aab66927d
.dword 0x3fe8bf8eb1452494
.dword 0xa581aab66927d
.dword 0x3fe8bf8eb1452494
.dword 0xa581aab66927d
.dword 0x3fe8bf8eb1452494
.dword 0xa581aab66927d
.dword 0x3fd636b9479bd502
.dword 0x170c7c54fcdd5f
.dword 0x3fd636b9479bd502
.dword 0x170c7c54fcdd5f
.dword 0x3fd636b9479bd502
.dword 0x170c7c54fcdd5f
.dword 0x3fd636b9479bd502
.dword 0x170c7c54fcdd5f
.dword 0x3fd636b9479bd502
.dword 0x170c7c54fcdd5f
.dword 0x3fd0557ad7269734
.dword 0x1f5888ff9c29f1
.dword 0x3fd0557ad7269734
.dword 0x1f5888ff9c29f1
.dword 0x3fd0557ad7269734
.dword 0x1f5888ff9c29f1
.dword 0x3fd0557ad7269734
.dword 0x1f5888ff9c29f1
.dword 0x3fd0557ad7269734
.dword 0x1f5888ff9c29f1
.dword 0x3fb7a40325eb0860
.dword 0x35a857ceaaf63c
.dword 0x3fb7a40325eb0860
.dword 0x35a857ceaaf63c
.dword 0x3fb7a40325eb0860
.dword 0x35a857ceaaf63c
.dword 0x3fb7a40325eb0860
.dword 0x35a857ceaaf63c
.dword 0x3fb7a40325eb0860
.dword 0x35a857ceaaf63c
.dword 0x3fc6fd220a896260
.dword 0xb
.dword 0x3fc6fd220a896260
.dword 0xb
.dword 0x3fc6fd220a896260
.dword 0xb
.dword 0x3fc6fd220a896260
.dword 0xb
.dword 0x3fc6fd220a896260
.dword 0xb
.dword 0x3fd81c6cc0f18586
.dword 0x5
.dword 0x3fd81c6cc0f18586
.dword 0x5
.dword 0x3fd81c6cc0f18586
.dword 0x5
.dword 0x3fd81c6cc0f18586
.dword 0x5
.dword 0x3fd81c6cc0f18586
.dword 0x5
.dword 0x3fdf3d2ac51134f2
.dword 0x4
.dword 0x3fdf3d2ac51134f2
.dword 0x4
.dword 0x3fdf3d2ac51134f2
.dword 0x4
.dword 0x3fdf3d2ac51134f2
.dword 0x4
.dword 0x3fdf3d2ac51134f2
.dword 0x4
.dword 0x3fe6055f0d13871f
.dword 0x3
.dword 0x3fe6055f0d13871f
.dword 0x3
.dword 0x3fe6055f0d13871f
.dword 0x3
.dword 0x3fe6055f0d13871f
.dword 0x3
.dword 0x3fe6055f0d13871f
.dword 0x3
.dword 0x3fd64f39fb12d326
.dword 0x6
.dword 0x3fd64f39fb12d326
.dword 0x6
.dword 0x3fd64f39fb12d326
.dword 0x6
.dword 0x3fd64f39fb12d326
.dword 0x6
.dword 0x3fd64f39fb12d326
.dword 0x6
.dword 0x3fdfba632b80a336
.dword 0x4
.dword 0x3fdfba632b80a336
.dword 0x4
.dword 0x3fdfba632b80a336
.dword 0x4
.dword 0x3fdfba632b80a336
.dword 0x4
.dword 0x3fdfba632b80a336
.dword 0x4
.dword 0x3fa5d4af8cd8f150
.dword 0x2f
.dword 0x3fa5d4af8cd8f150
.dword 0x2f
.dword 0x3fa5d4af8cd8f150
.dword 0x2f
.dword 0x3fa5d4af8cd8f150
.dword 0x2f
.dword 0x3fa5d4af8cd8f150
.dword 0x2f
.dword 0x3fb6aff130a5c178
.dword 0x17
.dword 0x3fb6aff130a5c178
.dword 0x17
.dword 0x3fb6aff130a5c178
.dword 0x17
.dword 0x3fb6aff130a5c178
.dword 0x17
.dword 0x3fb6aff130a5c178
.dword 0x17
.dword 0x3fb791362c46e498
.dword 0x16
.dword 0x3fb791362c46e498
.dword 0x16
.dword 0x3fb791362c46e498
.dword 0x16
.dword 0x3fb791362c46e498
.dword 0x16
.dword 0x3fb791362c46e498
.dword 0x16
.dword 0x3fd33a37e151ddae
.dword 0x7
.dword 0x3fd33a37e151ddae
.dword 0x7
.dword 0x3fd33a37e151ddae
.dword 0x7
.dword 0x3fd33a37e151ddae
.dword 0x7
.dword 0x3fd33a37e151ddae
.dword 0x7
.dword 0x3fe8e6ec983cd445
.dword 0x3
.dword 0x3fe8e6ec983cd445
.dword 0x3
.dword 0x3fe8e6ec983cd445
.dword 0x3
.dword 0x3fe8e6ec983cd445
.dword 0x3
.dword 0x3fe8e6ec983cd445
.dword 0x3
.dword 0x3fd1adb43458fbbc
.dword 0x7
.dword 0x3fd1adb43458fbbc
.dword 0x7
.dword 0x3fd1adb43458fbbc
.dword 0x7
.dword 0x3fd1adb43458fbbc
.dword 0x7
.dword 0x3fd1adb43458fbbc
.dword 0x7
.dword 0x3fdbaab85a31631a
.dword 0x5
.dword 0x3fdbaab85a31631a
.dword 0x5
.dword 0x3fdbaab85a31631a
.dword 0x5
.dword 0x3fdbaab85a31631a
.dword 0x5
.dword 0x3fdbaab85a31631a
.dword 0x5
.dword 0x3fb9ad38e3192d48
.dword 0x14
.dword 0x3fb9ad38e3192d48
.dword 0x14
.dword 0x3fb9ad38e3192d48
.dword 0x14
.dword 0x3fb9ad38e3192d48
.dword 0x14
.dword 0x3fb9ad38e3192d48
.dword 0x14
.dword 0x3fe4aca7255a6f18
.dword 0x3
.dword 0x3fe4aca7255a6f18
.dword 0x3
.dword 0x3fe4aca7255a6f18
.dword 0x3
.dword 0x3fe4aca7255a6f18
.dword 0x3
.dword 0x3fe4aca7255a6f18
.dword 0x3
.dword 0x3fdff23853e07a0e
.dword 0x4
.dword 0x3fdff23853e07a0e
.dword 0x4
.dword 0x3fdff23853e07a0e
.dword 0x4
.dword 0x3fdff23853e07a0e
.dword 0x4
.dword 0x3fdff23853e07a0e
.dword 0x4
.dword 0x3fe051ce52e23306
.dword 0x4
.dword 0x3fe051ce52e23306
.dword 0x4
.dword 0x3fe051ce52e23306
.dword 0x4
.dword 0x3fe051ce52e23306
.dword 0x4
.dword 0x3fe051ce52e23306
.dword 0x4
.dword 0x3fe13c2805615f05
.dword 0x4
.dword 0x3fe13c2805615f05
.dword 0x4
.dword 0x3fe13c2805615f05
.dword 0x4
.dword 0x3fe13c2805615f05
.dword 0x4
.dword 0x3fe13c2805615f05
.dword 0x4
.dword 0x3fcf7ccb699a28c0
.dword 0x8
.dword 0x3fcf7ccb699a28c0
.dword 0x8
.dword 0x3fcf7ccb699a28c0
.dword 0x8
.dword 0x3fcf7ccb699a28c0
.dword 0x8
.dword 0x3fcf7ccb699a28c0
.dword 0x8
.dword 0x3fa381b863788580
.dword 0x34
.dword 0x3fa381b863788580
.dword 0x34
.dword 0x3fa381b863788580
.dword 0x34
.dword 0x3fa381b863788580
.dword 0x34
.dword 0x3fa381b863788580
.dword 0x34
.dword 0x3fe4adc6ee8d6da9
.dword 0x3
.dword 0x3fe4adc6ee8d6da9
.dword 0x3
.dword 0x3fe4adc6ee8d6da9
.dword 0x3
.dword 0x3fe4adc6ee8d6da9
.dword 0x3
.dword 0x3fe4adc6ee8d6da9
.dword 0x3
.dword 0x3fce59c4ba2c0268
.dword 0x8
.dword 0x3fce59c4ba2c0268
.dword 0x8
.dword 0x3fce59c4ba2c0268
.dword 0x8
.dword 0x3fce59c4ba2c0268
.dword 0x8
.dword 0x3fce59c4ba2c0268
.dword 0x8
.dword 0x3fd0ff900bcc0d10
.dword 0x8
.dword 0x3fd0ff900bcc0d10
.dword 0x8
.dword 0x3fd0ff900bcc0d10
.dword 0x8
.dword 0x3fd0ff900bcc0d10
.dword 0x8
.dword 0x3fd0ff900bcc0d10
.dword 0x8
.dword 0x3fbb3ee551bd5638
.dword 0x13
.dword 0x3fbb3ee551bd5638
.dword 0x13
.dword 0x3fbb3ee551bd5638
.dword 0x13
.dword 0x3fbb3ee551bd5638
.dword 0x13
.dword 0x3fbb3ee551bd5638
.dword 0x13
.dword 0x3fd4d5531b85583a
.dword 0x6
.dword 0x3fd4d5531b85583a
.dword 0x6
.dword 0x3fd4d5531b85583a
.dword 0x6
.dword 0x3fd4d5531b85583a
.dword 0x6
.dword 0x3fd4d5531b85583a
.dword 0x6
.dword 0x3fdf587e151f5a1e
.dword 0x4
.dword 0x3fdf587e151f5a1e
.dword 0x4
.dword 0x3fdf587e151f5a1e
.dword 0x4
.dword 0x3fdf587e151f5a1e
.dword 0x4
.dword 0x3fdf587e151f5a1e
.dword 0x4
.dword 0x3fe5986ddb4e3ec0
.dword 0x3
.dword 0x3fe5986ddb4e3ec0
.dword 0x3
.dword 0x3fe5986ddb4e3ec0
.dword 0x3
.dword 0x3fe5986ddb4e3ec0
.dword 0x3
.dword 0x3fe5986ddb4e3ec0
.dword 0x3
.dword 0x3fe871ad5313dce5
.dword 0x3
.dword 0x3fe871ad5313dce5
.dword 0x3
.dword 0x3fe871ad5313dce5
.dword 0x3
.dword 0x3fe871ad5313dce5
.dword 0x3
.dword 0x3fe871ad5313dce5
.dword 0x3
.dword 0x3fde5a110eaf20b2
.dword 0x4
.dword 0x3fde5a110eaf20b2
.dword 0x4
.dword 0x3fde5a110eaf20b2
.dword 0x4
.dword 0x3fde5a110eaf20b2
.dword 0x4
.dword 0x3fde5a110eaf20b2
.dword 0x4
.dword 0x3fe3d6eaf24e38ee
.dword 0x3
.dword 0x3fe3d6eaf24e38ee
.dword 0x3
.dword 0x3fe3d6eaf24e38ee
.dword 0x3
.dword 0x3fe3d6eaf24e38ee
.dword 0x3
.dword 0x3fe3d6eaf24e38ee
.dword 0x3
.dword 0x3fe11f96e845ca05
.dword 0x4
.dword 0x3fe11f96e845ca05
.dword 0x4
.dword 0x3fe11f96e845ca05
.dword 0x4
.dword 0x3fe11f96e845ca05
.dword 0x4
.dword 0x3fe11f96e845ca05
.dword 0x4
.dword 0x3feed9b538840fef
.dword 0x2
.dword 0x3feed9b538840fef
.dword 0x2
.dword 0x3feed9b538840fef
.dword 0x2
.dword 0x3feed9b538840fef
.dword 0x2
.dword 0x3feed9b538840fef
.dword 0x2
.dword 0x3fe1c3c125fde213
.dword 0x4
.dword 0x3fe1c3c125fde213
.dword 0x4
.dword 0x3fe1c3c125fde213
.dword 0x4
.dword 0x3fe1c3c125fde213
.dword 0x4
.dword 0x3fe1c3c125fde213
.dword 0x4
.dword 0x3fa9e8d628302a10
.dword 0x28
.dword 0x3fa9e8d628302a10
.dword 0x28
.dword 0x3fa9e8d628302a10
.dword 0x28
.dword 0x3fa9e8d628302a10
.dword 0x28
.dword 0x3fa9e8d628302a10
.dword 0x28
.dword 0x3fd1ba2b891e3858
.dword 0x7
.dword 0x3fd1ba2b891e3858
.dword 0x7
.dword 0x3fd1ba2b891e3858
.dword 0x7
.dword 0x3fd1ba2b891e3858
.dword 0x7
.dword 0x3fd1ba2b891e3858
.dword 0x7
.dword 0x3fe237f44d723492
.dword 0x4
.dword 0x3fe237f44d723492
.dword 0x4
.dword 0x3fe237f44d723492
.dword 0x4
.dword 0x3fe237f44d723492
.dword 0x4
.dword 0x3fe237f44d723492
.dword 0x4
.dword 0x3fdacd8daa8ccece
.dword 0x5
.dword 0x3fdacd8daa8ccece
.dword 0x5
.dword 0x3fdacd8daa8ccece
.dword 0x5
.dword 0x3fdacd8daa8ccece
.dword 0x5
.dword 0x3fdacd8daa8ccece
.dword 0x5
.dword 0x3fd93835f64d603a
.dword 0x5
.dword 0x3fd93835f64d603a
.dword 0x5
.dword 0x3fd93835f64d603a
.dword 0x5
.dword 0x3fd93835f64d603a
.dword 0x5
.dword 0x3fd93835f64d603a
.dword 0x5
.dword 0x3fd52323192b58e2
.dword 0x6
.dword 0x3fd52323192b58e2
.dword 0x6
.dword 0x3fd52323192b58e2
.dword 0x6
.dword 0x3fd52323192b58e2
.dword 0x6
.dword 0x3fd52323192b58e2
.dword 0x6
.dword 0x3fc50e5f6d4b6efc
.dword 0xc
.dword 0x3fc50e5f6d4b6efc
.dword 0xc
.dword 0x3fc50e5f6d4b6efc
.dword 0xc
.dword 0x3fc50e5f6d4b6efc
.dword 0xc
.dword 0x3fc50e5f6d4b6efc
.dword 0xc
.dword 0x3fee30bb2fa23799
.dword 0x2
.dword 0x3fee30bb2fa23799
.dword 0x2
.dword 0x3fee30bb2fa23799
.dword 0x2
.dword 0x3fee30bb2fa23799
.dword 0x2
.dword 0x3fee30bb2fa23799
.dword 0x2
.dword 0x3fa682ad08c2d120
.dword 0x2d
.dword 0x3fa682ad08c2d120
.dword 0x2d
.dword 0x3fa682ad08c2d120
.dword 0x2d
.dword 0x3fa682ad08c2d120
.dword 0x2d
.dword 0x3fdae4d63fafea86
.dword 0x2c8e81c6c2f341
.dword 0x3fdae4d63fafea86
.dword 0x2c8e81c6c2f341
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_5:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_6:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_7:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_8:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_9:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_10:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_11:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_12:
    .fill 150*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
