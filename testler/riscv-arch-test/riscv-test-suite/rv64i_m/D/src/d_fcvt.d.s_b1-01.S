
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 15:14:53 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.d.l.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.d.lu.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.d.s.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.d.w.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.d.wu.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.l.d.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.lu.d.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.s.d.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.w.d.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fcvt.wu.d.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fcvt.d.s instruction of the RISC-V FD extension for the fcvt.d.s_b1 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fcvt.d.s_b1)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 != rd, rs1==f7, rd==f29, fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f7; dest:f29; op1val:0x0; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f29, f7, 0x0, 0, x16, 0, x17, x15, 0, x18)  

inst_1:
// rs1 == rd, rs1==f22, rd==f22, fs1 == 1 and fe1 == 0x3f8 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f22; dest:f22; op1val:0xbf80000000000000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f22, f22, 0x0, 0, x16, 8, x17, x15, 16, x18)  

inst_2:
// rs1==f29, rd==f13, fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f29; dest:f13; op1val:0x3ff0000000000000; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f13, f29, 0x0, 0, x16, 16, x17, x15, 32, x18)  

inst_3:
// rs1==f14, rd==f30, fs1 == 1 and fe1 == 0x7ff and fm1 == 0x0000000000001 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f14; dest:f30; op1val:0xfff0000000000001; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f30, f14, 0x0, 0, x16, 24, x17, x15, 48, x18)  

inst_4:
// rs1==f0, rd==f7, fs1 == 0 and fe1 == 0x7ff and fm1 == 0x0000000000001 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f0; dest:f7; op1val:0x7ff0000000000001; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f7, f0, 0x0, 0, x16, 32, x17, x15, 64, x18)  

inst_5:
// rs1==f3, rd==f8, fs1 == 1 and fe1 == 0x7ff and fm1 == 0x8000000000001 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f3; dest:f8; op1val:0xfff8000000000001; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f8, f3, 0x0, 0, x16, 40, x17, x15, 80, x18)  

inst_6:
// rs1==f24, rd==f16, fs1 == 0 and fe1 == 0x7ff and fm1 == 0x8000000000001 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f24; dest:f16; op1val:0x7ff8000000000001; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f16, f24, 0x0, 0, x16, 48, x17, x15, 96, x18)  

inst_7:
// rs1==f30, rd==f6, fs1 == 1 and fe1 == 0x7ff and fm1 == 0x8000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f30; dest:f6; op1val:0xfff8000000000000; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f6, f30, 0x0, 0, x16, 56, x17, x15, 112, x18)  

inst_8:
// rs1==f20, rd==f31, fs1 == 0 and fe1 == 0x7ff and fm1 == 0x8000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f20; dest:f31; op1val:0x7ff8000000000000; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f31, f20, 0x0, 0, x16, 64, x17, x15, 128, x18)  

inst_9:
// rs1==f18, rd==f9, fs1 == 1 and fe1 == 0x7ff and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f18; dest:f9; op1val:0xfff0000000000000; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f9, f18, 0x0, 0, x16, 72, x17, x15, 144, x18)  

inst_10:
// rs1==f23, rd==f24, fs1 == 0 and fe1 == 0x7ff and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f23; dest:f24; op1val:0x7ff0000000000000; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f24, f23, 0x0, 0, x16, 80, x17, x15, 160, x18)  

inst_11:
// rs1==f1, rd==f23, fs1 == 1 and fe1 == 0x7fe and fm1 == 0xfffffffffffff and rm_val == 0  
// opcode: fcvt.d.s ; op1:f1; dest:f23; op1val:0xffefffffffffffff; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f23, f1, 0x0, 0, x16, 88, x17, x15, 176, x18)  

inst_12:
// rs1==f13, rd==f26, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfffffffffffff and rm_val == 0  
// opcode: fcvt.d.s ; op1:f13; dest:f26; op1val:0x7fefffffffffffff; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f26, f13, 0x0, 0, x16, 96, x17, x15, 192, x18)  

inst_13:
// rs1==f5, rd==f1, fs1 == 1 and fe1 == 0x001 and fm1 == 0x0000000000002 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f5; dest:f1; op1val:0x8010000000000002; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f1, f5, 0x0, 0, x16, 104, x17, x15, 208, x18)  

inst_14:
// rs1==f21, rd==f5, fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000002 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f21; dest:f5; op1val:0x10000000000002; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f5, f21, 0x0, 0, x16, 112, x17, x15, 224, x18)  

inst_15:
// rs1==f11, rd==f15, fs1 == 1 and fe1 == 0x001 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f11; dest:f15; op1val:0x8010000000000000; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f15, f11, 0x0, 0, x16, 120, x17, x15, 240, x18)  

inst_16:
// rs1==f2, rd==f27, fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f2; dest:f27; op1val:0x10000000000000; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f27, f2, 0x0, 0, x16, 128, x17, x15, 256, x18)  

inst_17:
// rs1==f26, rd==f4, fs1 == 1 and fe1 == 0x000 and fm1 == 0xfffffffffffff and rm_val == 0  
// opcode: fcvt.d.s ; op1:f26; dest:f4; op1val:0x800fffffffffffff; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f4, f26, 0x0, 0, x16, 136, x17, x15, 272, x18)  

inst_18:
// rs1==f25, rd==f12, fs1 == 0 and fe1 == 0x000 and fm1 == 0xfffffffffffff and rm_val == 0  
// opcode: fcvt.d.s ; op1:f25; dest:f12; op1val:0xfffffffffffff; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f12, f25, 0x0, 0, x16, 144, x17, x15, 288, x18)  

inst_19:
// rs1==f15, rd==f14, fs1 == 1 and fe1 == 0x000 and fm1 == 0x0000000000002 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f15; dest:f14; op1val:0x8000000000000002; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f14, f15, 0x0, 0, x16, 152, x17, x15, 304, x18)  

inst_20:
// rs1==f6, rd==f11, fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f6; dest:f11; op1val:0x2; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f11, f6, 0x0, 0, x16, 160, x17, x15, 320, x18)  

inst_21:
// rs1==f8, rd==f10, fs1 == 1 and fe1 == 0x000 and fm1 == 0x0000000000001 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f8; dest:f10; op1val:0x8000000000000001; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f10, f8, 0x0, 0, x16, 168, x17, x15, 336, x18)  

inst_22:
// rs1==f28, rd==f21, fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f28; dest:f21; op1val:0x1; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f21, f28, 0x0, 0, x16, 176, x17, x15, 352, x18)  

inst_23:
// rs1==f31, rd==f20, fs1 == 1 and fe1 == 0x000 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fcvt.d.s ; op1:f31; dest:f20; op1val:0x8000000000000000; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f20, f31, 0x0, 0, x16, 184, x17, x15, 368, x18)  

inst_24:
// rs1==f4, rd==f25, 
// opcode: fcvt.d.s ; op1:f4; dest:f25; op1val:0x0; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f25, f4, 0x0, 0, x16, 192, x17, x15, 384, x18)  

inst_25:
// rs1==f27, rd==f0, 
// opcode: fcvt.d.s ; op1:f27; dest:f0; op1val:0x0; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f0, f27, 0x0, 0, x16, 200, x17, x15, 400, x18)  

inst_26:
// rs1==f12, rd==f28, 
// opcode: fcvt.d.s ; op1:f12; dest:f28; op1val:0x0; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f28, f12, 0x0, 0, x16, 208, x17, x15, 416, x18)  

inst_27:
// rs1==f10, rd==f18, 
// opcode: fcvt.d.s ; op1:f10; dest:f18; op1val:0x0; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f18, f10, 0x0, 0, x16, 216, x17, x15, 432, x18)  

inst_28:
// rs1==f9, rd==f3, 
// opcode: fcvt.d.s ; op1:f9; dest:f3; op1val:0x0; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f3, f9, 0x0, 0, x16, 224, x17, x15, 448, x18)  

inst_29:
// rs1==f17, rd==f2, 
// opcode: fcvt.d.s ; op1:f17; dest:f2; op1val:0x0; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f2, f17, 0x0, 0, x16, 232, x17, x15, 464, x18)  

inst_30:
// rs1==f16, rd==f19, 
// opcode: fcvt.d.s ; op1:f16; dest:f19; op1val:0x0; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f19, f16, 0x0, 0, x16, 240, x17, x15, 480, x18)  

inst_31:
// rs1==f19, rd==f17, 
// opcode: fcvt.d.s ; op1:f19; dest:f17; op1val:0x0; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fcvt.d.s, f17, f19, 0x0, 0, x16, 248, x17, x15, 496, x18)  
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x0
.dword 0xbf80000000000000
.dword 0x3ff0000000000000
.dword 0xfff0000000000001
.dword 0x7ff0000000000001
.dword 0xfff8000000000001
.dword 0x7ff8000000000001
.dword 0xfff8000000000000
.dword 0x7ff8000000000000
.dword 0xfff0000000000000
.dword 0x7ff0000000000000
.dword 0xffefffffffffffff
.dword 0x7fefffffffffffff
.dword 0x8010000000000002
.dword 0x10000000000002
.dword 0x8010000000000000
.dword 0x10000000000000
.dword 0x800fffffffffffff
.dword 0xfffffffffffff
.dword 0x8000000000000002
.dword 0x2
.dword 0x8000000000000001
.dword 0x1
.dword 0x8000000000000000
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 64*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
