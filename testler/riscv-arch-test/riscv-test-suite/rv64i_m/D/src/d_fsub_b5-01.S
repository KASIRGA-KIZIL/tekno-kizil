
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 13:40:15 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fsub.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsub.d instruction of the RISC-V FD extension for the fsub_b5 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fsub_b5)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs2 == rd != rs1, rs1==f27, rs2==f13, rd==f13, fs1 == 0 and fe1 == 0x7fc and fm1 == 0x132d8f91b7583 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x132d8f91b7583 and rm_val == 0  
// opcode: fsub.d ; op1:f27; op2:f13; dest:f13; op1val:0x7fc132d8f91b7583; op2val:0x7fc132d8f91b7583; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f13, f27, f13, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rs2 == rd, rs1==f5, rs2==f5, rd==f5, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 4  
// opcode: fsub.d ; op1:f5; op2:f5; dest:f5; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:16; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f5, f5, f5, 0x4, 0, x16, 16, x17, x15, 16, x18)

inst_2:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f24, rs2==f7, rd==f23, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 3  
// opcode: fsub.d ; op1:f24; op2:f7; dest:f23; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:32; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f23, f24, f7, 0x3, 0, x16, 32, x17, x15, 32, x18)

inst_3:
// rs1 == rd != rs2, rs1==f25, rs2==f11, rd==f25, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 2  
// opcode: fsub.d ; op1:f25; op2:f11; dest:f25; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:48; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f25, f25, f11, 0x2, 0, x16, 48, x17, x15, 48, x18)

inst_4:
// rs1 == rs2 != rd, rs1==f20, rs2==f20, rd==f12, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 1  
// opcode: fsub.d ; op1:f20; op2:f20; dest:f12; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:64; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f20, f20, 0x1, 0, x16, 64, x17, x15, 64, x18)

inst_5:
// rs1==f26, rs2==f3, rd==f1, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 0  
// opcode: fsub.d ; op1:f26; op2:f3; dest:f1; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f1, f26, f3, 0x0, 0, x16, 80, x17, x15, 80, x18)

inst_6:
// rs1==f1, rs2==f12, rd==f14, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a82024cc4e03 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8a82024cc4e03 and rm_val == 4  
// opcode: fsub.d ; op1:f1; op2:f12; dest:f14; op1val:0x7fe8a82024cc4e03; op2val:0x7fe8a82024cc4e03; valaddr_reg:x16; val_offset:96; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f14, f1, f12, 0x4, 0, x16, 96, x17, x15, 96, x18)

inst_7:
// rs1==f6, rs2==f17, rd==f26, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a82024cc4e03 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8a82024cc4e03 and rm_val == 3  
// opcode: fsub.d ; op1:f6; op2:f17; dest:f26; op1val:0x7fe8a82024cc4e03; op2val:0x7fe8a82024cc4e03; valaddr_reg:x16; val_offset:112; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f26, f6, f17, 0x3, 0, x16, 112, x17, x15, 112, x18)

inst_8:
// rs1==f11, rs2==f2, rd==f27, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a82024cc4e03 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8a82024cc4e03 and rm_val == 2  
// opcode: fsub.d ; op1:f11; op2:f2; dest:f27; op1val:0x7fe8a82024cc4e03; op2val:0x7fe8a82024cc4e03; valaddr_reg:x16; val_offset:128; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f27, f11, f2, 0x2, 0, x16, 128, x17, x15, 128, x18)

inst_9:
// rs1==f16, rs2==f22, rd==f0, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a82024cc4e03 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8a82024cc4e03 and rm_val == 1  
// opcode: fsub.d ; op1:f16; op2:f22; dest:f0; op1val:0x7fe8a82024cc4e03; op2val:0x7fe8a82024cc4e03; valaddr_reg:x16; val_offset:144; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f0, f16, f22, 0x1, 0, x16, 144, x17, x15, 144, x18)

inst_10:
// rs1==f14, rs2==f0, rd==f24, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x8a82024cc4e03 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x8a82024cc4e03 and rm_val == 0  
// opcode: fsub.d ; op1:f14; op2:f0; dest:f24; op1val:0x7fe8a82024cc4e03; op2val:0x7fe8a82024cc4e03; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f24, f14, f0, 0x0, 0, x16, 160, x17, x15, 160, x18)

inst_11:
// rs1==f17, rs2==f30, rd==f11, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0125698e86242 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0125698e86242 and rm_val == 4  
// opcode: fsub.d ; op1:f17; op2:f30; dest:f11; op1val:0x7fe0125698e86242; op2val:0x7fe0125698e86242; valaddr_reg:x16; val_offset:176; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f11, f17, f30, 0x4, 0, x16, 176, x17, x15, 176, x18)

inst_12:
// rs1==f19, rs2==f21, rd==f31, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0125698e86242 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0125698e86242 and rm_val == 3  
// opcode: fsub.d ; op1:f19; op2:f21; dest:f31; op1val:0x7fe0125698e86242; op2val:0x7fe0125698e86242; valaddr_reg:x16; val_offset:192; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f31, f19, f21, 0x3, 0, x16, 192, x17, x15, 192, x18)

inst_13:
// rs1==f2, rs2==f25, rd==f8, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0125698e86242 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0125698e86242 and rm_val == 2  
// opcode: fsub.d ; op1:f2; op2:f25; dest:f8; op1val:0x7fe0125698e86242; op2val:0x7fe0125698e86242; valaddr_reg:x16; val_offset:208; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f8, f2, f25, 0x2, 0, x16, 208, x17, x15, 208, x18)

inst_14:
// rs1==f12, rs2==f31, rd==f2, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0125698e86242 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0125698e86242 and rm_val == 1  
// opcode: fsub.d ; op1:f12; op2:f31; dest:f2; op1val:0x7fe0125698e86242; op2val:0x7fe0125698e86242; valaddr_reg:x16; val_offset:224; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f2, f12, f31, 0x1, 0, x16, 224, x17, x15, 224, x18)

inst_15:
// rs1==f10, rs2==f6, rd==f20, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0125698e86242 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0125698e86242 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f6; dest:f20; op1val:0x7fe0125698e86242; op2val:0x7fe0125698e86242; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f20, f10, f6, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_16:
// rs1==f29, rs2==f4, rd==f22, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x930bcbd2d6035 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x930bcbd2d6035 and rm_val == 4  
// opcode: fsub.d ; op1:f29; op2:f4; dest:f22; op1val:0x7fd930bcbd2d6035; op2val:0x7fd930bcbd2d6035; valaddr_reg:x16; val_offset:256; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f22, f29, f4, 0x4, 0, x16, 256, x17, x15, 256, x18)

inst_17:
// rs1==f13, rs2==f8, rd==f16, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x930bcbd2d6035 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x930bcbd2d6035 and rm_val == 3  
// opcode: fsub.d ; op1:f13; op2:f8; dest:f16; op1val:0x7fd930bcbd2d6035; op2val:0x7fd930bcbd2d6035; valaddr_reg:x16; val_offset:272; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f16, f13, f8, 0x3, 0, x16, 272, x17, x15, 272, x18)

inst_18:
// rs1==f18, rs2==f16, rd==f17, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x930bcbd2d6035 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x930bcbd2d6035 and rm_val == 2  
// opcode: fsub.d ; op1:f18; op2:f16; dest:f17; op1val:0x7fd930bcbd2d6035; op2val:0x7fd930bcbd2d6035; valaddr_reg:x16; val_offset:288; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f17, f18, f16, 0x2, 0, x16, 288, x17, x15, 288, x18)

inst_19:
// rs1==f9, rs2==f18, rd==f10, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x930bcbd2d6035 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x930bcbd2d6035 and rm_val == 1  
// opcode: fsub.d ; op1:f9; op2:f18; dest:f10; op1val:0x7fd930bcbd2d6035; op2val:0x7fd930bcbd2d6035; valaddr_reg:x16; val_offset:304; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f10, f9, f18, 0x1, 0, x16, 304, x17, x15, 304, x18)

inst_20:
// rs1==f4, rs2==f23, rd==f6, fs1 == 0 and fe1 == 0x7fd and fm1 == 0x930bcbd2d6035 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x930bcbd2d6035 and rm_val == 0  
// opcode: fsub.d ; op1:f4; op2:f23; dest:f6; op1val:0x7fd930bcbd2d6035; op2val:0x7fd930bcbd2d6035; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f6, f4, f23, 0x0, 0, x16, 320, x17, x15, 320, x18)

inst_21:
// rs1==f3, rs2==f10, rd==f9, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7646167590ef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf7646167590ef and rm_val == 4  
// opcode: fsub.d ; op1:f3; op2:f10; dest:f9; op1val:0x7fef7646167590ef; op2val:0x7fef7646167590ef; valaddr_reg:x16; val_offset:336; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f9, f3, f10, 0x4, 0, x16, 336, x17, x15, 336, x18)

inst_22:
// rs1==f28, rs2==f27, rd==f15, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7646167590ef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf7646167590ef and rm_val == 3  
// opcode: fsub.d ; op1:f28; op2:f27; dest:f15; op1val:0x7fef7646167590ef; op2val:0x7fef7646167590ef; valaddr_reg:x16; val_offset:352; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f15, f28, f27, 0x3, 0, x16, 352, x17, x15, 352, x18)

inst_23:
// rs1==f30, rs2==f14, rd==f4, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7646167590ef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf7646167590ef and rm_val == 2  
// opcode: fsub.d ; op1:f30; op2:f14; dest:f4; op1val:0x7fef7646167590ef; op2val:0x7fef7646167590ef; valaddr_reg:x16; val_offset:368; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f4, f30, f14, 0x2, 0, x16, 368, x17, x15, 368, x18)

inst_24:
// rs1==f7, rs2==f19, rd==f21, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7646167590ef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf7646167590ef and rm_val == 1  
// opcode: fsub.d ; op1:f7; op2:f19; dest:f21; op1val:0x7fef7646167590ef; op2val:0x7fef7646167590ef; valaddr_reg:x16; val_offset:384; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f21, f7, f19, 0x1, 0, x16, 384, x17, x15, 384, x18)

inst_25:
// rs1==f15, rs2==f29, rd==f7, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xf7646167590ef and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xf7646167590ef and rm_val == 0  
// opcode: fsub.d ; op1:f15; op2:f29; dest:f7; op1val:0x7fef7646167590ef; op2val:0x7fef7646167590ef; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f7, f15, f29, 0x0, 0, x16, 400, x17, x15, 400, x18)

inst_26:
// rs1==f22, rs2==f28, rd==f18, fs1 == 0 and fe1 == 0x7fa and fm1 == 0x643f753bef22f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x643f753bef22f and rm_val == 4  
// opcode: fsub.d ; op1:f22; op2:f28; dest:f18; op1val:0x7fa643f753bef22f; op2val:0x7fa643f753bef22f; valaddr_reg:x16; val_offset:416; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f18, f22, f28, 0x4, 0, x16, 416, x17, x15, 416, x18)

inst_27:
// rs1==f0, rs2==f9, rd==f19, fs1 == 0 and fe1 == 0x7fa and fm1 == 0x643f753bef22f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x643f753bef22f and rm_val == 3  
// opcode: fsub.d ; op1:f0; op2:f9; dest:f19; op1val:0x7fa643f753bef22f; op2val:0x7fa643f753bef22f; valaddr_reg:x16; val_offset:432; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f19, f0, f9, 0x3, 0, x16, 432, x17, x15, 432, x18)

inst_28:
// rs1==f21, rs2==f1, rd==f30, fs1 == 0 and fe1 == 0x7fa and fm1 == 0x643f753bef22f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x643f753bef22f and rm_val == 2  
// opcode: fsub.d ; op1:f21; op2:f1; dest:f30; op1val:0x7fa643f753bef22f; op2val:0x7fa643f753bef22f; valaddr_reg:x16; val_offset:448; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f30, f21, f1, 0x2, 0, x16, 448, x17, x15, 448, x18)

inst_29:
// rs1==f31, rs2==f24, rd==f3, fs1 == 0 and fe1 == 0x7fa and fm1 == 0x643f753bef22f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x643f753bef22f and rm_val == 1  
// opcode: fsub.d ; op1:f31; op2:f24; dest:f3; op1val:0x7fa643f753bef22f; op2val:0x7fa643f753bef22f; valaddr_reg:x16; val_offset:464; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f3, f31, f24, 0x1, 0, x16, 464, x17, x15, 464, x18)

inst_30:
// rs1==f8, rs2==f15, rd==f29, fs1 == 0 and fe1 == 0x7fa and fm1 == 0x643f753bef22f and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x643f753bef22f and rm_val == 0  
// opcode: fsub.d ; op1:f8; op2:f15; dest:f29; op1val:0x7fa643f753bef22f; op2val:0x7fa643f753bef22f; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f29, f8, f15, 0x0, 0, x16, 480, x17, x15, 480, x18)

inst_31:
// rs1==f23, rs2==f26, rd==f28, fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf57237ddcb451 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf57237ddcb451 and rm_val == 4  
// opcode: fsub.d ; op1:f23; op2:f26; dest:f28; op1val:0x7fdf57237ddcb451; op2val:0x7fdf57237ddcb451; valaddr_reg:x16; val_offset:496; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f28, f23, f26, 0x4, 0, x16, 496, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf57237ddcb451 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf57237ddcb451 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf57237ddcb451; op2val:0x7fdf57237ddcb451; valaddr_reg:x16; val_offset:512; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 512, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf57237ddcb451 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf57237ddcb451 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf57237ddcb451; op2val:0x7fdf57237ddcb451; valaddr_reg:x16; val_offset:528; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 528, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf57237ddcb451 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf57237ddcb451 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf57237ddcb451; op2val:0x7fdf57237ddcb451; valaddr_reg:x16; val_offset:544; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 544, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xf57237ddcb451 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xf57237ddcb451 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdf57237ddcb451; op2val:0x7fdf57237ddcb451; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 560, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0ab870b5c1c40 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0ab870b5c1c40; op2val:0x7fe0ab870b5c1c40; valaddr_reg:x16; val_offset:576; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 576, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0ab870b5c1c40 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0ab870b5c1c40; op2val:0x7fe0ab870b5c1c40; valaddr_reg:x16; val_offset:592; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 592, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0ab870b5c1c40 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0ab870b5c1c40; op2val:0x7fe0ab870b5c1c40; valaddr_reg:x16; val_offset:608; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 608, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0ab870b5c1c40 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0ab870b5c1c40; op2val:0x7fe0ab870b5c1c40; valaddr_reg:x16; val_offset:624; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 624, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0ab870b5c1c40 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x0ab870b5c1c40 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe0ab870b5c1c40; op2val:0x7fe0ab870b5c1c40; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 640, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x04507a06e8587 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe04507a06e8587; op2val:0x7fe04507a06e8587; valaddr_reg:x16; val_offset:656; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 656, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x04507a06e8587 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe04507a06e8587; op2val:0x7fe04507a06e8587; valaddr_reg:x16; val_offset:672; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 672, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x04507a06e8587 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe04507a06e8587; op2val:0x7fe04507a06e8587; valaddr_reg:x16; val_offset:688; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 688, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x04507a06e8587 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe04507a06e8587; op2val:0x7fe04507a06e8587; valaddr_reg:x16; val_offset:704; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 704, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x04507a06e8587 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x04507a06e8587 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe04507a06e8587; op2val:0x7fe04507a06e8587; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 720, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x7fb2260b115e9 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7fb2260b115e9; op2val:0x7fd7fb2260b115e9; valaddr_reg:x16; val_offset:736; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 736, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x7fb2260b115e9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7fb2260b115e9; op2val:0x7fd7fb2260b115e9; valaddr_reg:x16; val_offset:752; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 752, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x7fb2260b115e9 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7fb2260b115e9; op2val:0x7fd7fb2260b115e9; valaddr_reg:x16; val_offset:768; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 768, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x7fb2260b115e9 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7fb2260b115e9; op2val:0x7fd7fb2260b115e9; valaddr_reg:x16; val_offset:784; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 784, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x7fb2260b115e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x7fb2260b115e9 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd7fb2260b115e9; op2val:0x7fd7fb2260b115e9; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 800, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x67f4f571a752e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe67f4f571a752e; op2val:0x7fe67f4f571a752e; valaddr_reg:x16; val_offset:816; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 816, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x67f4f571a752e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe67f4f571a752e; op2val:0x7fe67f4f571a752e; valaddr_reg:x16; val_offset:832; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 832, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x67f4f571a752e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe67f4f571a752e; op2val:0x7fe67f4f571a752e; valaddr_reg:x16; val_offset:848; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 848, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x67f4f571a752e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe67f4f571a752e; op2val:0x7fe67f4f571a752e; valaddr_reg:x16; val_offset:864; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 864, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x67f4f571a752e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x67f4f571a752e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe67f4f571a752e; op2val:0x7fe67f4f571a752e; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 880, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x6251b45dfbd3b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc6251b45dfbd3b; op2val:0x7fc6251b45dfbd3b; valaddr_reg:x16; val_offset:896; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 896, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x6251b45dfbd3b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc6251b45dfbd3b; op2val:0x7fc6251b45dfbd3b; valaddr_reg:x16; val_offset:912; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 912, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x6251b45dfbd3b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc6251b45dfbd3b; op2val:0x7fc6251b45dfbd3b; valaddr_reg:x16; val_offset:928; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 928, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x6251b45dfbd3b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc6251b45dfbd3b; op2val:0x7fc6251b45dfbd3b; valaddr_reg:x16; val_offset:944; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 944, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x6251b45dfbd3b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x6251b45dfbd3b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc6251b45dfbd3b; op2val:0x7fc6251b45dfbd3b; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 960, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x98455e99dfdb1 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe98455e99dfdb1; op2val:0x7fe98455e99dfdb1; valaddr_reg:x16; val_offset:976; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 976, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x98455e99dfdb1 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe98455e99dfdb1; op2val:0x7fe98455e99dfdb1; valaddr_reg:x16; val_offset:992; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 992, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x98455e99dfdb1 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe98455e99dfdb1; op2val:0x7fe98455e99dfdb1; valaddr_reg:x16; val_offset:1008; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1008, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x98455e99dfdb1 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe98455e99dfdb1; op2val:0x7fe98455e99dfdb1; valaddr_reg:x16; val_offset:1024; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1024, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x98455e99dfdb1 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x98455e99dfdb1 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe98455e99dfdb1; op2val:0x7fe98455e99dfdb1; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1040, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x1ad5e9ebc09df and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fa1ad5e9ebc09df; valaddr_reg:x16; val_offset:1056; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1056, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x1ad5e9ebc09df and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fa1ad5e9ebc09df; valaddr_reg:x16; val_offset:1072; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1072, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x1ad5e9ebc09df and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fa1ad5e9ebc09df; valaddr_reg:x16; val_offset:1088; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1088, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x1ad5e9ebc09df and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fa1ad5e9ebc09df; valaddr_reg:x16; val_offset:1104; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1104, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x7fa and fm1 == 0x1ad5e9ebc09df and fs2 == 0 and fe2 == 0x7fa and fm2 == 0x1ad5e9ebc09df and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fa1ad5e9ebc09df; op2val:0x7fa1ad5e9ebc09df; valaddr_reg:x16; val_offset:1120; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1120, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x02b48f992cb49 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe02b48f992cb49; op2val:0x7fe02b48f992cb49; valaddr_reg:x16; val_offset:1136; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1136, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x02b48f992cb49 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe02b48f992cb49; op2val:0x7fe02b48f992cb49; valaddr_reg:x16; val_offset:1152; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1152, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x02b48f992cb49 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe02b48f992cb49; op2val:0x7fe02b48f992cb49; valaddr_reg:x16; val_offset:1168; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1168, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x02b48f992cb49 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe02b48f992cb49; op2val:0x7fe02b48f992cb49; valaddr_reg:x16; val_offset:1184; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1184, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x02b48f992cb49 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x02b48f992cb49 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe02b48f992cb49; op2val:0x7fe02b48f992cb49; valaddr_reg:x16; val_offset:1200; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1200, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc3d4499ff58c3 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec3d4499ff58c3; op2val:0x7fec3d4499ff58c3; valaddr_reg:x16; val_offset:1216; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1216, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc3d4499ff58c3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec3d4499ff58c3; op2val:0x7fec3d4499ff58c3; valaddr_reg:x16; val_offset:1232; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1232, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc3d4499ff58c3 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec3d4499ff58c3; op2val:0x7fec3d4499ff58c3; valaddr_reg:x16; val_offset:1248; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1248, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc3d4499ff58c3 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec3d4499ff58c3; op2val:0x7fec3d4499ff58c3; valaddr_reg:x16; val_offset:1264; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1264, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xc3d4499ff58c3 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xc3d4499ff58c3 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fec3d4499ff58c3; op2val:0x7fec3d4499ff58c3; valaddr_reg:x16; val_offset:1280; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1280, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x36a63c245f557 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd36a63c245f557; op2val:0x7fd36a63c245f557; valaddr_reg:x16; val_offset:1296; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1296, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x36a63c245f557 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd36a63c245f557; op2val:0x7fd36a63c245f557; valaddr_reg:x16; val_offset:1312; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1312, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x36a63c245f557 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd36a63c245f557; op2val:0x7fd36a63c245f557; valaddr_reg:x16; val_offset:1328; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1328, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x36a63c245f557 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd36a63c245f557; op2val:0x7fd36a63c245f557; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x36a63c245f557 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x36a63c245f557 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd36a63c245f557; op2val:0x7fd36a63c245f557; valaddr_reg:x16; val_offset:1360; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1360, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa8fa703a4078c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea8fa703a4078c; op2val:0x7fea8fa703a4078c; valaddr_reg:x16; val_offset:1376; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1376, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa8fa703a4078c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea8fa703a4078c; op2val:0x7fea8fa703a4078c; valaddr_reg:x16; val_offset:1392; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1392, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa8fa703a4078c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea8fa703a4078c; op2val:0x7fea8fa703a4078c; valaddr_reg:x16; val_offset:1408; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1408, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa8fa703a4078c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea8fa703a4078c; op2val:0x7fea8fa703a4078c; valaddr_reg:x16; val_offset:1424; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1424, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xa8fa703a4078c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xa8fa703a4078c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fea8fa703a4078c; op2val:0x7fea8fa703a4078c; valaddr_reg:x16; val_offset:1440; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1440, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdf7523fde6c5d and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedf7523fde6c5d; op2val:0x7fedf7523fde6c5d; valaddr_reg:x16; val_offset:1456; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1456, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdf7523fde6c5d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedf7523fde6c5d; op2val:0x7fedf7523fde6c5d; valaddr_reg:x16; val_offset:1472; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1472, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdf7523fde6c5d and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedf7523fde6c5d; op2val:0x7fedf7523fde6c5d; valaddr_reg:x16; val_offset:1488; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1488, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdf7523fde6c5d and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedf7523fde6c5d; op2val:0x7fedf7523fde6c5d; valaddr_reg:x16; val_offset:1504; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1504, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xdf7523fde6c5d and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xdf7523fde6c5d and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fedf7523fde6c5d; op2val:0x7fedf7523fde6c5d; valaddr_reg:x16; val_offset:1520; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1520, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7166677e49c3c and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7166677e49c3c; op2val:0x7fe7166677e49c3c; valaddr_reg:x16; val_offset:1536; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1536, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7166677e49c3c and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7166677e49c3c; op2val:0x7fe7166677e49c3c; valaddr_reg:x16; val_offset:1552; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1552, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7166677e49c3c and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7166677e49c3c; op2val:0x7fe7166677e49c3c; valaddr_reg:x16; val_offset:1568; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1568, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7166677e49c3c and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7166677e49c3c; op2val:0x7fe7166677e49c3c; valaddr_reg:x16; val_offset:1584; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1584, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x7166677e49c3c and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x7166677e49c3c and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe7166677e49c3c; op2val:0x7fe7166677e49c3c; valaddr_reg:x16; val_offset:1600; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1600, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xef2a4f7c7db7f and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbef2a4f7c7db7f; op2val:0x7fbef2a4f7c7db7f; valaddr_reg:x16; val_offset:1616; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1616, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xef2a4f7c7db7f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbef2a4f7c7db7f; op2val:0x7fbef2a4f7c7db7f; valaddr_reg:x16; val_offset:1632; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1632, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xef2a4f7c7db7f and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbef2a4f7c7db7f; op2val:0x7fbef2a4f7c7db7f; valaddr_reg:x16; val_offset:1648; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1648, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xef2a4f7c7db7f and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbef2a4f7c7db7f; op2val:0x7fbef2a4f7c7db7f; valaddr_reg:x16; val_offset:1664; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1664, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0xef2a4f7c7db7f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0xef2a4f7c7db7f and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fbef2a4f7c7db7f; op2val:0x7fbef2a4f7c7db7f; valaddr_reg:x16; val_offset:1680; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1680, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xfc2ea66e5019e and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fefc2ea66e5019e; op2val:0x7fefc2ea66e5019e; valaddr_reg:x16; val_offset:1696; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1696, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xfc2ea66e5019e and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fefc2ea66e5019e; op2val:0x7fefc2ea66e5019e; valaddr_reg:x16; val_offset:1712; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1712, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xfc2ea66e5019e and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fefc2ea66e5019e; op2val:0x7fefc2ea66e5019e; valaddr_reg:x16; val_offset:1728; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1728, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xfc2ea66e5019e and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fefc2ea66e5019e; op2val:0x7fefc2ea66e5019e; valaddr_reg:x16; val_offset:1744; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1744, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xfc2ea66e5019e and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xfc2ea66e5019e and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fefc2ea66e5019e; op2val:0x7fefc2ea66e5019e; valaddr_reg:x16; val_offset:1760; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1760, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x48dace8666677 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe48dace8666677; op2val:0x7fe48dace8666677; valaddr_reg:x16; val_offset:1776; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1776, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x48dace8666677 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe48dace8666677; op2val:0x7fe48dace8666677; valaddr_reg:x16; val_offset:1792; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1792, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x48dace8666677 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe48dace8666677; op2val:0x7fe48dace8666677; valaddr_reg:x16; val_offset:1808; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1808, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x48dace8666677 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe48dace8666677; op2val:0x7fe48dace8666677; valaddr_reg:x16; val_offset:1824; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1824, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x48dace8666677 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x48dace8666677 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe48dace8666677; op2val:0x7fe48dace8666677; valaddr_reg:x16; val_offset:1840; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1840, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xacd7053aa42a2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feacd7053aa42a2; op2val:0x7feacd7053aa42a2; valaddr_reg:x16; val_offset:1856; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1856, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xacd7053aa42a2 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feacd7053aa42a2; op2val:0x7feacd7053aa42a2; valaddr_reg:x16; val_offset:1872; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1872, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xacd7053aa42a2 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feacd7053aa42a2; op2val:0x7feacd7053aa42a2; valaddr_reg:x16; val_offset:1888; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1888, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xacd7053aa42a2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feacd7053aa42a2; op2val:0x7feacd7053aa42a2; valaddr_reg:x16; val_offset:1904; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1904, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xacd7053aa42a2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xacd7053aa42a2 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feacd7053aa42a2; op2val:0x7feacd7053aa42a2; valaddr_reg:x16; val_offset:1920; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1920, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x28bc82f697c4d and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd28bc82f697c4d; op2val:0x7fd28bc82f697c4d; valaddr_reg:x16; val_offset:1936; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1936, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x28bc82f697c4d and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd28bc82f697c4d; op2val:0x7fd28bc82f697c4d; valaddr_reg:x16; val_offset:1952; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1952, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x28bc82f697c4d and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd28bc82f697c4d; op2val:0x7fd28bc82f697c4d; valaddr_reg:x16; val_offset:1968; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1968, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x28bc82f697c4d and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd28bc82f697c4d; op2val:0x7fd28bc82f697c4d; valaddr_reg:x16; val_offset:1984; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1984, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0x28bc82f697c4d and fs2 == 0 and fe2 == 0x7fd and fm2 == 0x28bc82f697c4d and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fd28bc82f697c4d; op2val:0x7fd28bc82f697c4d; valaddr_reg:x16; val_offset:2000; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 2000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc01045c2cd787 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc01045c2cd787; op2val:0x7fcc01045c2cd787; valaddr_reg:x16; val_offset:2016; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 2016, x17, x15, 2016, x18)
addi x16,x16,2032
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc01045c2cd787 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc01045c2cd787; op2val:0x7fcc01045c2cd787; valaddr_reg:x16; val_offset:0; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 0, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc01045c2cd787 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc01045c2cd787; op2val:0x7fcc01045c2cd787; valaddr_reg:x16; val_offset:16; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 16, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc01045c2cd787 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc01045c2cd787; op2val:0x7fcc01045c2cd787; valaddr_reg:x16; val_offset:32; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 32, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xc01045c2cd787 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xc01045c2cd787 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcc01045c2cd787; op2val:0x7fcc01045c2cd787; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xdd5b61587fd27 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcdd5b61587fd27; op2val:0x7fcdd5b61587fd27; valaddr_reg:x16; val_offset:64; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 64, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xdd5b61587fd27 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcdd5b61587fd27; op2val:0x7fcdd5b61587fd27; valaddr_reg:x16; val_offset:80; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 80, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xdd5b61587fd27 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcdd5b61587fd27; op2val:0x7fcdd5b61587fd27; valaddr_reg:x16; val_offset:96; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 96, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xdd5b61587fd27 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcdd5b61587fd27; op2val:0x7fcdd5b61587fd27; valaddr_reg:x16; val_offset:112; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 112, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xdd5b61587fd27 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xdd5b61587fd27 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcdd5b61587fd27; op2val:0x7fcdd5b61587fd27; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 128, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc0659af8369fd and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc0659af8369fd; op2val:0x7fdc0659af8369fd; valaddr_reg:x16; val_offset:144; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 144, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc0659af8369fd and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc0659af8369fd; op2val:0x7fdc0659af8369fd; valaddr_reg:x16; val_offset:160; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 160, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc0659af8369fd and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc0659af8369fd; op2val:0x7fdc0659af8369fd; valaddr_reg:x16; val_offset:176; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 176, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc0659af8369fd and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc0659af8369fd; op2val:0x7fdc0659af8369fd; valaddr_reg:x16; val_offset:192; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 192, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc0659af8369fd and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc0659af8369fd and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc0659af8369fd; op2val:0x7fdc0659af8369fd; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 208, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xdbcde43895c3f and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9dbcde43895c3f; op2val:0x7f9dbcde43895c3f; valaddr_reg:x16; val_offset:224; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 224, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xdbcde43895c3f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9dbcde43895c3f; op2val:0x7f9dbcde43895c3f; valaddr_reg:x16; val_offset:240; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 240, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xdbcde43895c3f and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9dbcde43895c3f; op2val:0x7f9dbcde43895c3f; valaddr_reg:x16; val_offset:256; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 256, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xdbcde43895c3f and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9dbcde43895c3f; op2val:0x7f9dbcde43895c3f; valaddr_reg:x16; val_offset:272; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 272, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xdbcde43895c3f and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xdbcde43895c3f and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9dbcde43895c3f; op2val:0x7f9dbcde43895c3f; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 288, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbb9876f8130c3 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcbb9876f8130c3; op2val:0x7fcbb9876f8130c3; valaddr_reg:x16; val_offset:304; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 304, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbb9876f8130c3 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcbb9876f8130c3; op2val:0x7fcbb9876f8130c3; valaddr_reg:x16; val_offset:320; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 320, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbb9876f8130c3 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcbb9876f8130c3; op2val:0x7fcbb9876f8130c3; valaddr_reg:x16; val_offset:336; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 336, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbb9876f8130c3 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcbb9876f8130c3; op2val:0x7fcbb9876f8130c3; valaddr_reg:x16; val_offset:352; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 352, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xbb9876f8130c3 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xbb9876f8130c3 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcbb9876f8130c3; op2val:0x7fcbb9876f8130c3; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 368, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe0d828b86622a and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee0d828b86622a; op2val:0x7fee0d828b86622a; valaddr_reg:x16; val_offset:384; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 384, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe0d828b86622a and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee0d828b86622a; op2val:0x7fee0d828b86622a; valaddr_reg:x16; val_offset:400; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 400, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe0d828b86622a and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee0d828b86622a; op2val:0x7fee0d828b86622a; valaddr_reg:x16; val_offset:416; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 416, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe0d828b86622a and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee0d828b86622a; op2val:0x7fee0d828b86622a; valaddr_reg:x16; val_offset:432; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 432, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xe0d828b86622a and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xe0d828b86622a and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fee0d828b86622a; op2val:0x7fee0d828b86622a; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 448, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xa0e7ad32453df and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df; valaddr_reg:x16; val_offset:464; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 464, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xa0e7ad32453df and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df; valaddr_reg:x16; val_offset:480; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 480, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xa0e7ad32453df and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df; valaddr_reg:x16; val_offset:496; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 496, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xa0e7ad32453df and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df; valaddr_reg:x16; val_offset:512; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 512, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x7f9 and fm1 == 0xa0e7ad32453df and fs2 == 0 and fe2 == 0x7f9 and fm2 == 0xa0e7ad32453df and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7f9a0e7ad32453df; op2val:0x7f9a0e7ad32453df; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 528, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcd87e65450c45 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecd87e65450c45; op2val:0x7fecd87e65450c45; valaddr_reg:x16; val_offset:544; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 544, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcd87e65450c45 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecd87e65450c45; op2val:0x7fecd87e65450c45; valaddr_reg:x16; val_offset:560; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 560, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcd87e65450c45 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecd87e65450c45; op2val:0x7fecd87e65450c45; valaddr_reg:x16; val_offset:576; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 576, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcd87e65450c45 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecd87e65450c45; op2val:0x7fecd87e65450c45; valaddr_reg:x16; val_offset:592; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 592, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xcd87e65450c45 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xcd87e65450c45 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fecd87e65450c45; op2val:0x7fecd87e65450c45; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 608, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xd481499755d4b and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcd481499755d4b; op2val:0x7fcd481499755d4b; valaddr_reg:x16; val_offset:624; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 624, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xd481499755d4b and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcd481499755d4b; op2val:0x7fcd481499755d4b; valaddr_reg:x16; val_offset:640; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 640, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xd481499755d4b and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcd481499755d4b; op2val:0x7fcd481499755d4b; valaddr_reg:x16; val_offset:656; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 656, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xd481499755d4b and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcd481499755d4b; op2val:0x7fcd481499755d4b; valaddr_reg:x16; val_offset:672; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 672, x17, x15, 672, x18)

inst_170:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0xd481499755d4b and fs2 == 0 and fe2 == 0x7fc and fm2 == 0xd481499755d4b and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fcd481499755d4b; op2val:0x7fcd481499755d4b; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 688, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc81394a2171e9 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc81394a2171e9; op2val:0x7fdc81394a2171e9; valaddr_reg:x16; val_offset:704; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 704, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc81394a2171e9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc81394a2171e9; op2val:0x7fdc81394a2171e9; valaddr_reg:x16; val_offset:720; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 720, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc81394a2171e9 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc81394a2171e9; op2val:0x7fdc81394a2171e9; valaddr_reg:x16; val_offset:736; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 736, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc81394a2171e9 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc81394a2171e9; op2val:0x7fdc81394a2171e9; valaddr_reg:x16; val_offset:752; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 752, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xc81394a2171e9 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xc81394a2171e9 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdc81394a2171e9; op2val:0x7fdc81394a2171e9; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 768, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86499331191c4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x86499331191c4 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe86499331191c4; op2val:0x7fe86499331191c4; valaddr_reg:x16; val_offset:784; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 784, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86499331191c4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x86499331191c4 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe86499331191c4; op2val:0x7fe86499331191c4; valaddr_reg:x16; val_offset:800; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 800, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86499331191c4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x86499331191c4 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe86499331191c4; op2val:0x7fe86499331191c4; valaddr_reg:x16; val_offset:816; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 816, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86499331191c4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x86499331191c4 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe86499331191c4; op2val:0x7fe86499331191c4; valaddr_reg:x16; val_offset:832; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 832, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x86499331191c4 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x86499331191c4 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe86499331191c4; op2val:0x7fe86499331191c4; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 848, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabe96758f2a09 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xabe96758f2a09 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feabe96758f2a09; op2val:0x7feabe96758f2a09; valaddr_reg:x16; val_offset:864; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 864, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabe96758f2a09 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xabe96758f2a09 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feabe96758f2a09; op2val:0x7feabe96758f2a09; valaddr_reg:x16; val_offset:880; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 880, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabe96758f2a09 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xabe96758f2a09 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feabe96758f2a09; op2val:0x7feabe96758f2a09; valaddr_reg:x16; val_offset:896; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 896, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabe96758f2a09 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xabe96758f2a09 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feabe96758f2a09; op2val:0x7feabe96758f2a09; valaddr_reg:x16; val_offset:912; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 912, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xabe96758f2a09 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xabe96758f2a09 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feabe96758f2a09; op2val:0x7feabe96758f2a09; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 928, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8072e8f9c858f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x8072e8f9c858f and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb8072e8f9c858f; op2val:0x7fb8072e8f9c858f; valaddr_reg:x16; val_offset:944; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 944, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8072e8f9c858f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x8072e8f9c858f and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb8072e8f9c858f; op2val:0x7fb8072e8f9c858f; valaddr_reg:x16; val_offset:960; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 960, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8072e8f9c858f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x8072e8f9c858f and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb8072e8f9c858f; op2val:0x7fb8072e8f9c858f; valaddr_reg:x16; val_offset:976; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 976, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8072e8f9c858f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x8072e8f9c858f and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb8072e8f9c858f; op2val:0x7fb8072e8f9c858f; valaddr_reg:x16; val_offset:992; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 992, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x7fb and fm1 == 0x8072e8f9c858f and fs2 == 0 and fe2 == 0x7fb and fm2 == 0x8072e8f9c858f and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fb8072e8f9c858f; op2val:0x7fb8072e8f9c858f; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1008, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d9d98184b9d9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4d9d98184b9d9 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4d9d98184b9d9; op2val:0x7fe4d9d98184b9d9; valaddr_reg:x16; val_offset:1024; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1024, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d9d98184b9d9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4d9d98184b9d9 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4d9d98184b9d9; op2val:0x7fe4d9d98184b9d9; valaddr_reg:x16; val_offset:1040; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1040, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d9d98184b9d9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4d9d98184b9d9 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4d9d98184b9d9; op2val:0x7fe4d9d98184b9d9; valaddr_reg:x16; val_offset:1056; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1056, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d9d98184b9d9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4d9d98184b9d9 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4d9d98184b9d9; op2val:0x7fe4d9d98184b9d9; valaddr_reg:x16; val_offset:1072; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1072, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x4d9d98184b9d9 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x4d9d98184b9d9 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe4d9d98184b9d9; op2val:0x7fe4d9d98184b9d9; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1088, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfb5355e167379 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfb5355e167379 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdfb5355e167379; op2val:0x7fdfb5355e167379; valaddr_reg:x16; val_offset:1104; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1104, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfb5355e167379 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfb5355e167379 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdfb5355e167379; op2val:0x7fdfb5355e167379; valaddr_reg:x16; val_offset:1120; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1120, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfb5355e167379 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfb5355e167379 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdfb5355e167379; op2val:0x7fdfb5355e167379; valaddr_reg:x16; val_offset:1136; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1136, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfb5355e167379 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfb5355e167379 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdfb5355e167379; op2val:0x7fdfb5355e167379; valaddr_reg:x16; val_offset:1152; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1152, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x7fd and fm1 == 0xfb5355e167379 and fs2 == 0 and fe2 == 0x7fd and fm2 == 0xfb5355e167379 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fdfb5355e167379; op2val:0x7fdfb5355e167379; valaddr_reg:x16; val_offset:1168; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1168, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x870d778409f12 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x870d778409f12 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe870d778409f12; op2val:0x7fe870d778409f12; valaddr_reg:x16; val_offset:1184; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1184, x17, x15, 1184, x18)

inst_202:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x870d778409f12 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x870d778409f12 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe870d778409f12; op2val:0x7fe870d778409f12; valaddr_reg:x16; val_offset:1200; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1200, x17, x15, 1200, x18)

inst_203:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x870d778409f12 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x870d778409f12 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe870d778409f12; op2val:0x7fe870d778409f12; valaddr_reg:x16; val_offset:1216; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1216, x17, x15, 1216, x18)

inst_204:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x870d778409f12 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x870d778409f12 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe870d778409f12; op2val:0x7fe870d778409f12; valaddr_reg:x16; val_offset:1232; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1232, x17, x15, 1232, x18)

inst_205:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x870d778409f12 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0x870d778409f12 and rm_val == 0  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fe870d778409f12; op2val:0x7fe870d778409f12; valaddr_reg:x16; val_offset:1248; rmval:0x0; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x0, 0, x16, 1248, x17, x15, 1248, x18)

inst_206:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x132d8f91b7583 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x132d8f91b7583 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc132d8f91b7583; op2val:0x7fc132d8f91b7583; valaddr_reg:x16; val_offset:1264; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1264, x17, x15, 1264, x18)

inst_207:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x132d8f91b7583 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x132d8f91b7583 and rm_val == 3  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc132d8f91b7583; op2val:0x7fc132d8f91b7583; valaddr_reg:x16; val_offset:1280; rmval:0x3; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x3, 0, x16, 1280, x17, x15, 1280, x18)

inst_208:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x132d8f91b7583 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x132d8f91b7583 and rm_val == 2  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc132d8f91b7583; op2val:0x7fc132d8f91b7583; valaddr_reg:x16; val_offset:1296; rmval:0x2; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x2, 0, x16, 1296, x17, x15, 1296, x18)

inst_209:
// fs1 == 0 and fe1 == 0x7fc and fm1 == 0x132d8f91b7583 and fs2 == 0 and fe2 == 0x7fc and fm2 == 0x132d8f91b7583 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7fc132d8f91b7583; op2val:0x7fc132d8f91b7583; valaddr_reg:x16; val_offset:1312; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1312, x17, x15, 1312, x18)

inst_210:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 4  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:1328; rmval:0x4; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x4, 0, x16, 1328, x17, x15, 1328, x18)

inst_211:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0xb877e6e317fa2 and fs2 == 0 and fe2 == 0x7fe and fm2 == 0xb877e6e317fa2 and rm_val == 1  
// opcode: fsub.d ; op1:f10; op2:f11; dest:f12; op1val:0x7feb877e6e317fa2; op2val:0x7feb877e6e317fa2; valaddr_reg:x16; val_offset:1344; rmval:0x1; correctval:0; testreg:x18
TEST_FPRR_OP(fsub.d, f12, f10, f11, 0x1, 0, x16, 1344, x17, x15, 1344, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe8a82024cc4e03
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fe0125698e86242
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fd930bcbd2d6035
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fef7646167590ef
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fa643f753bef22f
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fdf57237ddcb451
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe0ab870b5c1c40
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fe04507a06e8587
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fd7fb2260b115e9
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fe67f4f571a752e
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fc6251b45dfbd3b
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fe98455e99dfdb1
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fa1ad5e9ebc09df
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fe02b48f992cb49
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fec3d4499ff58c3
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fd36a63c245f557
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fea8fa703a4078c
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fedf7523fde6c5d
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fe7166677e49c3c
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fbef2a4f7c7db7f
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fefc2ea66e5019e
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7fe48dace8666677
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7feacd7053aa42a2
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fd28bc82f697c4d
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcc01045c2cd787
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fcdd5b61587fd27
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7fdc0659af8369fd
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7f9dbcde43895c3f
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fcbb9876f8130c3
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7fee0d828b86622a
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7f9a0e7ad32453df
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fecd87e65450c45
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fcd481499755d4b
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fdc81394a2171e9
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7fe86499331191c4
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7feabe96758f2a09
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fb8072e8f9c858f
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fe4d9d98184b9d9
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fdfb5355e167379
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fe870d778409f12
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7fc132d8f91b7583
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
.dword 0x7feb877e6e317fa2
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 170*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
