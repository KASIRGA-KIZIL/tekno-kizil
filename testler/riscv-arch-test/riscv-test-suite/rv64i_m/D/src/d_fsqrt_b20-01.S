
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 13:40:06 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fsqrt.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsqrt.d instruction of the RISC-V FD extension for the fsqrt_b20 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fsqrt_b20)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs1 == rd, rs1==f5, rd==f5, fs1 == 0 and fe1 == 0x7ff and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f5; dest:f5; op1val:0x7ff0000000000000; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f5, f5, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 != rd, rs1==f19, rd==f11, fs1 == 0 and fe1 == 0x141 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f19; dest:f11; op1val:0x1410000000000000; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f19, 0x0, 0, x16, 8, x17, x15, 16, x18)

inst_2:
// rs1==f3, rd==f19, fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f3; dest:f19; op1val:0x0; valaddr_reg:x16; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f19, f3, 0x0, 0, x16, 16, x17, x15, 32, x18)

inst_3:
// rs1==f14, rd==f17, fs1 == 0 and fe1 == 0x1d6 and fm1 == 0xb935452b4bc7c and rm_val == 0  
// opcode: fsqrt.d ; op1:f14; dest:f17; op1val:0x1d6b935452b4bc7c; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f17, f14, 0x0, 0, x16, 24, x17, x15, 48, x18)

inst_4:
// rs1==f17, rd==f25, fs1 == 0 and fe1 == 0x610 and fm1 == 0x21ccea37c6190 and rm_val == 0  
// opcode: fsqrt.d ; op1:f17; dest:f25; op1val:0x61021ccea37c6190; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f25, f17, 0x0, 0, x16, 32, x17, x15, 64, x18)

inst_5:
// rs1==f20, rd==f4, fs1 == 0 and fe1 == 0x243 and fm1 == 0x7730427032993 and rm_val == 0  
// opcode: fsqrt.d ; op1:f20; dest:f4; op1val:0x2437730427032993; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f4, f20, 0x0, 0, x16, 40, x17, x15, 80, x18)

inst_6:
// rs1==f28, rd==f9, fs1 == 0 and fe1 == 0x24a and fm1 == 0x596ffbdcf9515 and rm_val == 0  
// opcode: fsqrt.d ; op1:f28; dest:f9; op1val:0x24a596ffbdcf9515; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f9, f28, 0x0, 0, x16, 48, x17, x15, 96, x18)

inst_7:
// rs1==f24, rd==f15, fs1 == 0 and fe1 == 0x0dd and fm1 == 0xb962d97d9e0d3 and rm_val == 0  
// opcode: fsqrt.d ; op1:f24; dest:f15; op1val:0xddb962d97d9e0d3; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f15, f24, 0x0, 0, x16, 56, x17, x15, 112, x18)

inst_8:
// rs1==f22, rd==f12, fs1 == 0 and fe1 == 0x49e and fm1 == 0x6d6aa7b5d5523 and rm_val == 0  
// opcode: fsqrt.d ; op1:f22; dest:f12; op1val:0x49e6d6aa7b5d5523; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f12, f22, 0x0, 0, x16, 64, x17, x15, 128, x18)

inst_9:
// rs1==f16, rd==f29, fs1 == 0 and fe1 == 0x664 and fm1 == 0x1f53f3796faa0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f16; dest:f29; op1val:0x6641f53f3796faa0; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f29, f16, 0x0, 0, x16, 72, x17, x15, 144, x18)

inst_10:
// rs1==f29, rd==f27, fs1 == 0 and fe1 == 0x220 and fm1 == 0xb615804e82f0b and rm_val == 0  
// opcode: fsqrt.d ; op1:f29; dest:f27; op1val:0x220b615804e82f0b; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f27, f29, 0x0, 0, x16, 80, x17, x15, 160, x18)

inst_11:
// rs1==f11, rd==f3, fs1 == 0 and fe1 == 0x1dd and fm1 == 0x00eff45d8a020 and rm_val == 0  
// opcode: fsqrt.d ; op1:f11; dest:f3; op1val:0x1dd00eff45d8a020; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f3, f11, 0x0, 0, x16, 88, x17, x15, 176, x18)

inst_12:
// rs1==f12, rd==f18, fs1 == 0 and fe1 == 0x4eb and fm1 == 0xa52bfc61f44e1 and rm_val == 0  
// opcode: fsqrt.d ; op1:f12; dest:f18; op1val:0x4eba52bfc61f44e1; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f18, f12, 0x0, 0, x16, 96, x17, x15, 192, x18)

inst_13:
// rs1==f13, rd==f7, fs1 == 0 and fe1 == 0x0b8 and fm1 == 0x676d52bcd2ca2 and rm_val == 0  
// opcode: fsqrt.d ; op1:f13; dest:f7; op1val:0xb8676d52bcd2ca2; valaddr_reg:x16; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f7, f13, 0x0, 0, x16, 104, x17, x15, 208, x18)

inst_14:
// rs1==f0, rd==f22, fs1 == 0 and fe1 == 0x21c and fm1 == 0x1fc5f6573038b and rm_val == 0  
// opcode: fsqrt.d ; op1:f0; dest:f22; op1val:0x21c1fc5f6573038b; valaddr_reg:x16; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f22, f0, 0x0, 0, x16, 112, x17, x15, 224, x18)

inst_15:
// rs1==f1, rd==f0, fs1 == 0 and fe1 == 0x27a and fm1 == 0xfedcb647b5255 and rm_val == 0  
// opcode: fsqrt.d ; op1:f1; dest:f0; op1val:0x27afedcb647b5255; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f0, f1, 0x0, 0, x16, 120, x17, x15, 240, x18)

inst_16:
// rs1==f31, rd==f30, fs1 == 0 and fe1 == 0x046 and fm1 == 0x10964a3288ede and rm_val == 0  
// opcode: fsqrt.d ; op1:f31; dest:f30; op1val:0x4610964a3288ede; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f30, f31, 0x0, 0, x16, 128, x17, x15, 256, x18)

inst_17:
// rs1==f21, rd==f14, fs1 == 0 and fe1 == 0x6cc and fm1 == 0xda4837dc75a45 and rm_val == 0  
// opcode: fsqrt.d ; op1:f21; dest:f14; op1val:0x6ccda4837dc75a45; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f14, f21, 0x0, 0, x16, 136, x17, x15, 272, x18)

inst_18:
// rs1==f6, rd==f1, fs1 == 0 and fe1 == 0x379 and fm1 == 0x609ba7e28b6d6 and rm_val == 0  
// opcode: fsqrt.d ; op1:f6; dest:f1; op1val:0x379609ba7e28b6d6; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f1, f6, 0x0, 0, x16, 144, x17, x15, 288, x18)

inst_19:
// rs1==f25, rd==f31, fs1 == 0 and fe1 == 0x010 and fm1 == 0x19147937aef10 and rm_val == 0  
// opcode: fsqrt.d ; op1:f25; dest:f31; op1val:0x1019147937aef10; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f31, f25, 0x0, 0, x16, 152, x17, x15, 304, x18)

inst_20:
// rs1==f4, rd==f24, fs1 == 0 and fe1 == 0x5cd and fm1 == 0x0415c96d286b2 and rm_val == 0  
// opcode: fsqrt.d ; op1:f4; dest:f24; op1val:0x5cd0415c96d286b2; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f24, f4, 0x0, 0, x16, 160, x17, x15, 320, x18)

inst_21:
// rs1==f2, rd==f28, fs1 == 0 and fe1 == 0x562 and fm1 == 0xd8a88b54ddbd1 and rm_val == 0  
// opcode: fsqrt.d ; op1:f2; dest:f28; op1val:0x562d8a88b54ddbd1; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f28, f2, 0x0, 0, x16, 168, x17, x15, 336, x18)

inst_22:
// rs1==f7, rd==f20, fs1 == 0 and fe1 == 0x5b4 and fm1 == 0x3b6ba19f71958 and rm_val == 0  
// opcode: fsqrt.d ; op1:f7; dest:f20; op1val:0x5b43b6ba19f71958; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f20, f7, 0x0, 0, x16, 176, x17, x15, 352, x18)

inst_23:
// rs1==f26, rd==f2, fs1 == 0 and fe1 == 0x36f and fm1 == 0xb907cc9a3dfc5 and rm_val == 0  
// opcode: fsqrt.d ; op1:f26; dest:f2; op1val:0x36fb907cc9a3dfc5; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f2, f26, 0x0, 0, x16, 184, x17, x15, 368, x18)

inst_24:
// rs1==f23, rd==f6, fs1 == 0 and fe1 == 0x62a and fm1 == 0xc5b706ee884bd and rm_val == 0  
// opcode: fsqrt.d ; op1:f23; dest:f6; op1val:0x62ac5b706ee884bd; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f6, f23, 0x0, 0, x16, 192, x17, x15, 384, x18)

inst_25:
// rs1==f10, rd==f16, fs1 == 0 and fe1 == 0x6ac and fm1 == 0xa53af1e9e6297 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f16; op1val:0x6aca53af1e9e6297; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f16, f10, 0x0, 0, x16, 200, x17, x15, 400, x18)

inst_26:
// rs1==f15, rd==f13, fs1 == 0 and fe1 == 0x5f2 and fm1 == 0x2c7839914630c and rm_val == 0  
// opcode: fsqrt.d ; op1:f15; dest:f13; op1val:0x5f22c7839914630c; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f13, f15, 0x0, 0, x16, 208, x17, x15, 416, x18)

inst_27:
// rs1==f8, rd==f26, fs1 == 0 and fe1 == 0x68a and fm1 == 0xd3f8d47593f76 and rm_val == 0  
// opcode: fsqrt.d ; op1:f8; dest:f26; op1val:0x68ad3f8d47593f76; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f26, f8, 0x0, 0, x16, 216, x17, x15, 432, x18)

inst_28:
// rs1==f9, rd==f10, fs1 == 0 and fe1 == 0x14c and fm1 == 0x3543bca6412dd and rm_val == 0  
// opcode: fsqrt.d ; op1:f9; dest:f10; op1val:0x14c3543bca6412dd; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f10, f9, 0x0, 0, x16, 224, x17, x15, 448, x18)

inst_29:
// rs1==f27, rd==f8, fs1 == 0 and fe1 == 0x390 and fm1 == 0x5ad9865ef1ae8 and rm_val == 0  
// opcode: fsqrt.d ; op1:f27; dest:f8; op1val:0x3905ad9865ef1ae8; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f8, f27, 0x0, 0, x16, 232, x17, x15, 464, x18)

inst_30:
// rs1==f18, rd==f21, fs1 == 0 and fe1 == 0x27b and fm1 == 0x9ef64199541d0 and rm_val == 0  
// opcode: fsqrt.d ; op1:f18; dest:f21; op1val:0x27b9ef64199541d0; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f21, f18, 0x0, 0, x16, 240, x17, x15, 480, x18)

inst_31:
// rs1==f30, rd==f23, fs1 == 0 and fe1 == 0x429 and fm1 == 0xf1125eaac3f81 and rm_val == 0  
// opcode: fsqrt.d ; op1:f30; dest:f23; op1val:0x429f1125eaac3f81; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f23, f30, 0x0, 0, x16, 248, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x277 and fm1 == 0x8a162e2f42a21 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2778a162e2f42a21; valaddr_reg:x16; val_offset:256; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 256, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x361 and fm1 == 0x67017bfbb2e14 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36167017bfbb2e14; valaddr_reg:x16; val_offset:264; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 264, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x01e and fm1 == 0x28a5fa032b6d5 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1e28a5fa032b6d5; valaddr_reg:x16; val_offset:272; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 272, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x443 and fm1 == 0xbb0584a3e9fb1 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x443bb0584a3e9fb1; valaddr_reg:x16; val_offset:280; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 280, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x4a7 and fm1 == 0x480c0e0c26ad5 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x4a7480c0e0c26ad5; valaddr_reg:x16; val_offset:288; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 288, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x463 and fm1 == 0x53fdb488151bd and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x46353fdb488151bd; valaddr_reg:x16; val_offset:296; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 296, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x6e6 and fm1 == 0xd658cf235f718 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x6e6d658cf235f718; valaddr_reg:x16; val_offset:304; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 304, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x2ac and fm1 == 0x903f3a50115bf and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2ac903f3a50115bf; valaddr_reg:x16; val_offset:312; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 312, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x55f and fm1 == 0x831433085a13f and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x55f831433085a13f; valaddr_reg:x16; val_offset:320; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 320, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x6de and fm1 == 0x4a8493263d912 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x6de4a8493263d912; valaddr_reg:x16; val_offset:328; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 328, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x028 and fm1 == 0x50d5c9d17a718 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2850d5c9d17a718; valaddr_reg:x16; val_offset:336; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 336, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x3a6 and fm1 == 0x8dea07a7d2f66 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3a68dea07a7d2f66; valaddr_reg:x16; val_offset:344; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 344, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x04d and fm1 == 0xf54d566d3af23 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x4df54d566d3af23; valaddr_reg:x16; val_offset:352; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 352, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x352 and fm1 == 0x68bf7bba24887 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x35268bf7bba24887; valaddr_reg:x16; val_offset:360; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 360, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x74733452ff5d7 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3f874733452ff5d7; valaddr_reg:x16; val_offset:368; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 368, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x68c and fm1 == 0x4f2b6e728ce0c and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x68c4f2b6e728ce0c; valaddr_reg:x16; val_offset:376; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 376, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x15c and fm1 == 0xb61d12a3db43b and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x15cb61d12a3db43b; valaddr_reg:x16; val_offset:384; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 384, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x011 and fm1 == 0x421e71936ce4f and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x11421e71936ce4f; valaddr_reg:x16; val_offset:392; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 392, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x253 and fm1 == 0xcf11866f044c6 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x253cf11866f044c6; valaddr_reg:x16; val_offset:400; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 400, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x245 and fm1 == 0xe2ded1447a9b2 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x245e2ded1447a9b2; valaddr_reg:x16; val_offset:408; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 408, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x794 and fm1 == 0xdf650f96fc9dc and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x794df650f96fc9dc; valaddr_reg:x16; val_offset:416; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 416, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x1f7 and fm1 == 0x0c82887c59b71 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1f70c82887c59b71; valaddr_reg:x16; val_offset:424; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 424, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x56c and fm1 == 0xc901d6ca9fe73 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x56cc901d6ca9fe73; valaddr_reg:x16; val_offset:432; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 432, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x36a and fm1 == 0x1a98d1d649d85 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x36a1a98d1d649d85; valaddr_reg:x16; val_offset:440; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 440, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x293 and fm1 == 0x1fa2f7bf8a3cd and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2931fa2f7bf8a3cd; valaddr_reg:x16; val_offset:448; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 448, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x6c4 and fm1 == 0x936ef74f68734 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x6c4936ef74f68734; valaddr_reg:x16; val_offset:456; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 456, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x1f6 and fm1 == 0xddff45305d0a3 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1f6ddff45305d0a3; valaddr_reg:x16; val_offset:464; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 464, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x70b and fm1 == 0xa9bb9576e08fe and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x70ba9bb9576e08fe; valaddr_reg:x16; val_offset:472; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 472, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x5c5 and fm1 == 0x4051a49e409ef and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5c54051a49e409ef; valaddr_reg:x16; val_offset:480; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 480, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x1dc and fm1 == 0x184be59c54b98 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1dc184be59c54b98; valaddr_reg:x16; val_offset:488; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 488, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x69d and fm1 == 0x3245461ecff87 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x69d3245461ecff87; valaddr_reg:x16; val_offset:496; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 496, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x2f2 and fm1 == 0xa186bad3f3b95 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2f2a186bad3f3b95; valaddr_reg:x16; val_offset:504; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 504, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x216 and fm1 == 0x5901f1856027c and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2165901f1856027c; valaddr_reg:x16; val_offset:512; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 512, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x0f6 and fm1 == 0x0e8dcc21fc0dc and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0xf60e8dcc21fc0dc; valaddr_reg:x16; val_offset:520; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 520, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x6b8 and fm1 == 0x28048e71f9d08 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x6b828048e71f9d08; valaddr_reg:x16; val_offset:528; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 528, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x227 and fm1 == 0x127f90c3b9090 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x227127f90c3b9090; valaddr_reg:x16; val_offset:536; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 536, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x076 and fm1 == 0x033274a480488 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x76033274a480488; valaddr_reg:x16; val_offset:544; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 544, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x01b and fm1 == 0xd960e82d4b810 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1bd960e82d4b810; valaddr_reg:x16; val_offset:552; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 552, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x5fc and fm1 == 0x9ed0caa415ec8 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5fc9ed0caa415ec8; valaddr_reg:x16; val_offset:560; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 560, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x5fd and fm1 == 0x822bf1e14a240 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5fd822bf1e14a240; valaddr_reg:x16; val_offset:568; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 568, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x31e and fm1 == 0x77fad24880120 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x31e77fad24880120; valaddr_reg:x16; val_offset:576; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 576, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000fe99b3b666 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0xfe99b3b666; valaddr_reg:x16; val_offset:584; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 584, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x62a and fm1 == 0x0e613a46ac880 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x62a0e613a46ac880; valaddr_reg:x16; val_offset:592; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 592, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x6bb and fm1 == 0x4d07b1ed41100 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x6bb4d07b1ed41100; valaddr_reg:x16; val_offset:600; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 600, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x4ee and fm1 == 0x71b0e933c2200 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x4ee71b0e933c2200; valaddr_reg:x16; val_offset:608; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 608, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x674 and fm1 == 0x0202a3cf79200 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x6740202a3cf79200; valaddr_reg:x16; val_offset:616; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 616, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x5b3 and fm1 == 0x979ca2ec8c400 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5b3979ca2ec8c400; valaddr_reg:x16; val_offset:624; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 624, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x176 and fm1 == 0xeb971282f8200 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x176eb971282f8200; valaddr_reg:x16; val_offset:632; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 632, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x3cb and fm1 == 0xf0b8ab6b51000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3cbf0b8ab6b51000; valaddr_reg:x16; val_offset:640; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 640, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x55c and fm1 == 0x27109d2e38800 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x55c27109d2e38800; valaddr_reg:x16; val_offset:648; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 648, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x32b and fm1 == 0x0c8ac416c9000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x32b0c8ac416c9000; valaddr_reg:x16; val_offset:656; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 656, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x693 and fm1 == 0x32159f7764000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x69332159f7764000; valaddr_reg:x16; val_offset:664; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 664, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x74a and fm1 == 0x5095cd3c62000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x74a5095cd3c62000; valaddr_reg:x16; val_offset:672; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 672, x17, x15, 1344, x18)

inst_85:
// fs1 == 0 and fe1 == 0x26e and fm1 == 0x8a8a8502e2000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x26e8a8a8502e2000; valaddr_reg:x16; val_offset:680; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 680, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x5b0 and fm1 == 0x8f302c02c8000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5b08f302c02c8000; valaddr_reg:x16; val_offset:688; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 688, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x32d and fm1 == 0xb63d043d10000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x32db63d043d10000; valaddr_reg:x16; val_offset:696; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 696, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x3d1 and fm1 == 0xc9c3e06610000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3d1c9c3e06610000; valaddr_reg:x16; val_offset:704; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 704, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x60c and fm1 == 0x4df3876008000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x60c4df3876008000; valaddr_reg:x16; val_offset:712; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 712, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x181 and fm1 == 0x0226265640000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1810226265640000; valaddr_reg:x16; val_offset:720; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 720, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x56f and fm1 == 0xeb77b14440000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x56feb77b14440000; valaddr_reg:x16; val_offset:728; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 728, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x712 and fm1 == 0x28efb9fd20000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x71228efb9fd20000; valaddr_reg:x16; val_offset:736; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 736, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x7c1 and fm1 == 0x56c3dcb100000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x7c156c3dcb100000; valaddr_reg:x16; val_offset:744; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 744, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x1f9 and fm1 == 0x0aef451100000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1f90aef451100000; valaddr_reg:x16; val_offset:752; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 752, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x7ab and fm1 == 0x155b835100000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x7ab155b835100000; valaddr_reg:x16; val_offset:760; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 760, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x15f94b0040000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x15f94b0040000; valaddr_reg:x16; val_offset:768; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 768, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x1cd and fm1 == 0x1de7626400000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1cd1de7626400000; valaddr_reg:x16; val_offset:776; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 776, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x2c5 and fm1 == 0x1fdb0a6400000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2c51fdb0a6400000; valaddr_reg:x16; val_offset:784; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 784, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x00000668b9824 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x668b9824; valaddr_reg:x16; val_offset:792; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 792, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x6eb and fm1 == 0x812dd01000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x6eb812dd01000000; valaddr_reg:x16; val_offset:800; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 800, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x05f and fm1 == 0x19ad084000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5f19ad084000000; valaddr_reg:x16; val_offset:808; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 808, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x531 and fm1 == 0x1ef1f04000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5311ef1f04000000; valaddr_reg:x16; val_offset:816; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 816, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x7ec and fm1 == 0xfe704e2000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x7ecfe704e2000000; valaddr_reg:x16; val_offset:824; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 824, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x79d and fm1 == 0xcca7da4000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x79dcca7da4000000; valaddr_reg:x16; val_offset:832; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 832, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x5fa and fm1 == 0x6b21548000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5fa6b21548000000; valaddr_reg:x16; val_offset:840; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 840, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x1de and fm1 == 0x249cb08000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1de249cb08000000; valaddr_reg:x16; val_offset:848; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 848, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x282 and fm1 == 0x42d6888000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x28242d6888000000; valaddr_reg:x16; val_offset:856; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 856, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x66e and fm1 == 0x22d1c20000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x66e22d1c20000000; valaddr_reg:x16; val_offset:864; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 864, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x500 and fm1 == 0x21b0a20000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x50021b0a20000000; valaddr_reg:x16; val_offset:872; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 872, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x74e and fm1 == 0x9e67b20000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x74e9e67b20000000; valaddr_reg:x16; val_offset:880; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 880, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x0db and fm1 == 0xb6b4c40000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0xdbb6b4c40000000; valaddr_reg:x16; val_offset:888; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 888, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x5de and fm1 == 0xd19a080000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5ded19a080000000; valaddr_reg:x16; val_offset:896; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 896, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x350 and fm1 == 0x7c46c80000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3507c46c80000000; valaddr_reg:x16; val_offset:904; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 904, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x19e and fm1 == 0x11ed200000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x19e11ed200000000; valaddr_reg:x16; val_offset:912; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 912, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x697 and fm1 == 0xd4fe400000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x697d4fe400000000; valaddr_reg:x16; val_offset:920; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 920, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x3fa and fm1 == 0xdab4800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3fadab4800000000; valaddr_reg:x16; val_offset:928; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 928, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x3d7 and fm1 == 0x8d81000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x3d78d81000000000; valaddr_reg:x16; val_offset:936; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 936, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x67c and fm1 == 0x12a8800000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x67c12a8800000000; valaddr_reg:x16; val_offset:944; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 944, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x771 and fm1 == 0xf771000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x771f771000000000; valaddr_reg:x16; val_offset:952; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 952, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x1cb and fm1 == 0xd3a4000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1cbd3a4000000000; valaddr_reg:x16; val_offset:960; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 960, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x7c1 and fm1 == 0xffe4000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x7c1ffe4000000000; valaddr_reg:x16; val_offset:968; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 968, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x322 and fm1 == 0xc988000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x322c988000000000; valaddr_reg:x16; val_offset:976; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 976, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x43a and fm1 == 0xf808000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x43af808000000000; valaddr_reg:x16; val_offset:984; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 984, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x42a and fm1 == 0x2608000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x42a2608000000000; valaddr_reg:x16; val_offset:992; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 992, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x46a and fm1 == 0xd120000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x46ad120000000000; valaddr_reg:x16; val_offset:1000; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1000, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x2c7 and fm1 == 0xfa40000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x2c7fa40000000000; valaddr_reg:x16; val_offset:1008; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1008, x17, x15, 2016, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x11a and fm1 == 0xd120000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x11ad120000000000; valaddr_reg:x16; val_offset:1016; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1016, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x1d3 and fm1 == 0x2100000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1d32100000000000; valaddr_reg:x16; val_offset:1024; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1024, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x40a and fm1 == 0x0880000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x40a0880000000000; valaddr_reg:x16; val_offset:1032; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1032, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x4b5 and fm1 == 0xb900000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x4b5b900000000000; valaddr_reg:x16; val_offset:1040; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1040, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x426 and fm1 == 0xe080000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x426e080000000000; valaddr_reg:x16; val_offset:1048; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1048, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x792 and fm1 == 0xc200000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x792c200000000000; valaddr_reg:x16; val_offset:1056; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1056, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x637 and fm1 == 0xe400000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x637e400000000000; valaddr_reg:x16; val_offset:1064; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1064, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x5b1 and fm1 == 0xe400000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x5b1e400000000000; valaddr_reg:x16; val_offset:1072; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1072, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x7c7 and fm1 == 0x9000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x7c79000000000000; valaddr_reg:x16; val_offset:1080; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1080, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x1c7 and fm1 == 0x9000000000000 and rm_val == 0  
// opcode: fsqrt.d ; op1:f10; dest:f11; op1val:0x1c79000000000000; valaddr_reg:x16; val_offset:1088; rmval:0x0; correctval:0; testreg:x18
TEST_FPSR_OP(fsqrt.d, f11, f10, 0x0, 0, x16, 1088, x17, x15, 144, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x7ff0000000000000
.dword 0x1410000000000000
.dword 0x0
.dword 0x1d6b935452b4bc7c
.dword 0x61021ccea37c6190
.dword 0x2437730427032993
.dword 0x24a596ffbdcf9515
.dword 0xddb962d97d9e0d3
.dword 0x49e6d6aa7b5d5523
.dword 0x6641f53f3796faa0
.dword 0x220b615804e82f0b
.dword 0x1dd00eff45d8a020
.dword 0x4eba52bfc61f44e1
.dword 0xb8676d52bcd2ca2
.dword 0x21c1fc5f6573038b
.dword 0x27afedcb647b5255
.dword 0x4610964a3288ede
.dword 0x6ccda4837dc75a45
.dword 0x379609ba7e28b6d6
.dword 0x1019147937aef10
.dword 0x5cd0415c96d286b2
.dword 0x562d8a88b54ddbd1
.dword 0x5b43b6ba19f71958
.dword 0x36fb907cc9a3dfc5
.dword 0x62ac5b706ee884bd
.dword 0x6aca53af1e9e6297
.dword 0x5f22c7839914630c
.dword 0x68ad3f8d47593f76
.dword 0x14c3543bca6412dd
.dword 0x3905ad9865ef1ae8
.dword 0x27b9ef64199541d0
.dword 0x429f1125eaac3f81
.dword 0x2778a162e2f42a21
.dword 0x36167017bfbb2e14
.dword 0x1e28a5fa032b6d5
.dword 0x443bb0584a3e9fb1
.dword 0x4a7480c0e0c26ad5
.dword 0x46353fdb488151bd
.dword 0x6e6d658cf235f718
.dword 0x2ac903f3a50115bf
.dword 0x55f831433085a13f
.dword 0x6de4a8493263d912
.dword 0x2850d5c9d17a718
.dword 0x3a68dea07a7d2f66
.dword 0x4df54d566d3af23
.dword 0x35268bf7bba24887
.dword 0x3f874733452ff5d7
.dword 0x68c4f2b6e728ce0c
.dword 0x15cb61d12a3db43b
.dword 0x11421e71936ce4f
.dword 0x253cf11866f044c6
.dword 0x245e2ded1447a9b2
.dword 0x794df650f96fc9dc
.dword 0x1f70c82887c59b71
.dword 0x56cc901d6ca9fe73
.dword 0x36a1a98d1d649d85
.dword 0x2931fa2f7bf8a3cd
.dword 0x6c4936ef74f68734
.dword 0x1f6ddff45305d0a3
.dword 0x70ba9bb9576e08fe
.dword 0x5c54051a49e409ef
.dword 0x1dc184be59c54b98
.dword 0x69d3245461ecff87
.dword 0x2f2a186bad3f3b95
.dword 0x2165901f1856027c
.dword 0xf60e8dcc21fc0dc
.dword 0x6b828048e71f9d08
.dword 0x227127f90c3b9090
.dword 0x76033274a480488
.dword 0x1bd960e82d4b810
.dword 0x5fc9ed0caa415ec8
.dword 0x5fd822bf1e14a240
.dword 0x31e77fad24880120
.dword 0xfe99b3b666
.dword 0x62a0e613a46ac880
.dword 0x6bb4d07b1ed41100
.dword 0x4ee71b0e933c2200
.dword 0x6740202a3cf79200
.dword 0x5b3979ca2ec8c400
.dword 0x176eb971282f8200
.dword 0x3cbf0b8ab6b51000
.dword 0x55c27109d2e38800
.dword 0x32b0c8ac416c9000
.dword 0x69332159f7764000
.dword 0x74a5095cd3c62000
.dword 0x26e8a8a8502e2000
.dword 0x5b08f302c02c8000
.dword 0x32db63d043d10000
.dword 0x3d1c9c3e06610000
.dword 0x60c4df3876008000
.dword 0x1810226265640000
.dword 0x56feb77b14440000
.dword 0x71228efb9fd20000
.dword 0x7c156c3dcb100000
.dword 0x1f90aef451100000
.dword 0x7ab155b835100000
.dword 0x15f94b0040000
.dword 0x1cd1de7626400000
.dword 0x2c51fdb0a6400000
.dword 0x668b9824
.dword 0x6eb812dd01000000
.dword 0x5f19ad084000000
.dword 0x5311ef1f04000000
.dword 0x7ecfe704e2000000
.dword 0x79dcca7da4000000
.dword 0x5fa6b21548000000
.dword 0x1de249cb08000000
.dword 0x28242d6888000000
.dword 0x66e22d1c20000000
.dword 0x50021b0a20000000
.dword 0x74e9e67b20000000
.dword 0xdbb6b4c40000000
.dword 0x5ded19a080000000
.dword 0x3507c46c80000000
.dword 0x19e11ed200000000
.dword 0x697d4fe400000000
.dword 0x3fadab4800000000
.dword 0x3d78d81000000000
.dword 0x67c12a8800000000
.dword 0x771f771000000000
.dword 0x1cbd3a4000000000
.dword 0x7c1ffe4000000000
.dword 0x322c988000000000
.dword 0x43af808000000000
.dword 0x42a2608000000000
.dword 0x46ad120000000000
.dword 0x2c7fa40000000000
.dword 0x11ad120000000000
.dword 0x1d32100000000000
.dword 0x40a0880000000000
.dword 0x4b5b900000000000
.dword 0x426e080000000000
.dword 0x792c200000000000
.dword 0x637e400000000000
.dword 0x5b1e400000000000
.dword 0x7c79000000000000
.dword 0x1c79000000000000
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 20*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
