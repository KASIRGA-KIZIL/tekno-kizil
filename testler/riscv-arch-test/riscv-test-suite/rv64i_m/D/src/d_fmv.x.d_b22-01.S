
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 15:14:31 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fmv.d.x.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fmv.x.d.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmv.x.d instruction of the RISC-V FD extension for the fmv.x.d_b22 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fmv.x.d_b22)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==f20, rd==x29, fs1 == 0 and fe1 == 0x3fc and fm1 == 0x08577924770d3 and rm_val == 0  
// opcode: fmv.x.d ; op1:f20; dest:x29; op1val:0x3fc08577924770d3; valaddr_reg:x16; val_offset:0; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x29, f20, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:// rs1==f4, rd==x25, fs1 == 0 and fe1 == 0x7fe and fm1 == 0xbedc2f3ebcf12 and rm_val == 0  
// opcode: fmv.x.d ; op1:f4; dest:x25; op1val:0x7febedc2f3ebcf12; valaddr_reg:x16; val_offset:8; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x25, f4, 0x0, 0, x16, 8, x17, x15, 16, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_2:// rs1==f13, rd==x17, fs1 == 1 and fe1 == 0x0ff and fm1 == 0x137a953e8eb43 and rm_val == 0  
// opcode: fmv.x.d ; op1:f13; dest:x17; op1val:0x8ff137a953e8eb43; valaddr_reg:x20; val_offset:16; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x17, f13, 0x0, 0, x20, 16, x21, x19, 0, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_3:// rs1==f3, rd==x7, fs1 == 0 and fe1 == 0x401 and fm1 == 0x854a908ceac39 and rm_val == 0  
// opcode: fmv.x.d ; op1:f3; dest:x7; op1val:0x401854a908ceac39; valaddr_reg:x16; val_offset:24; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x7, f3, 0x0, 0, x16, 24, x17, x15, 0, x18)

inst_4:// rs1==f25, rd==x21, fs1 == 0 and fe1 == 0x400 and fm1 == 0xcf84ba749f9c5 and rm_val == 0  
// opcode: fmv.x.d ; op1:f25; dest:x21; op1val:0x400cf84ba749f9c5; valaddr_reg:x16; val_offset:32; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x21, f25, 0x0, 0, x16, 32, x17, x15, 16, x18)

inst_5:// rs1==f29, rd==x3, fs1 == 0 and fe1 == 0x3ff and fm1 == 0xd2d6b7dc59a3a and rm_val == 0  
// opcode: fmv.x.d ; op1:f29; dest:x3; op1val:0x3ffd2d6b7dc59a3a; valaddr_reg:x16; val_offset:40; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x3, f29, 0x0, 0, x16, 40, x17, x15, 32, x18)

inst_6:// rs1==f14, rd==x5, fs1 == 1 and fe1 == 0x3fe and fm1 == 0x766ba34c2da80 and rm_val == 0  
// opcode: fmv.x.d ; op1:f14; dest:x5; op1val:0xbfe766ba34c2da80; valaddr_reg:x16; val_offset:48; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x5, f14, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_7:// rs1==f17, rd==x23, fs1 == 0 and fe1 == 0x3fd and fm1 == 0x93fdc7b89296c and rm_val == 0  
// opcode: fmv.x.d ; op1:f17; dest:x23; op1val:0x3fd93fdc7b89296c; valaddr_reg:x16; val_offset:56; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x23, f17, 0x0, 0, x16, 56, x17, x15, 64, x18)

inst_8:// rs1==f24, rd==x13, 
// opcode: fmv.x.d ; op1:f24; dest:x13; op1val:0x0; valaddr_reg:x16; val_offset:64; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x13, f24, 0x0, 0, x16, 64, x17, x15, 80, x18)

inst_9:// rs1==f15, rd==x6, 
// opcode: fmv.x.d ; op1:f15; dest:x6; op1val:0x0; valaddr_reg:x16; val_offset:72; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x6, f15, 0x0, 0, x16, 72, x17, x15, 96, x18)

inst_10:// rs1==f10, rd==x2, 
// opcode: fmv.x.d ; op1:f10; dest:x2; op1val:0x0; valaddr_reg:x16; val_offset:80; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x2, f10, 0x0, 0, x16, 80, x17, x15, 112, x18)

inst_11:// rs1==f28, rd==x22, 
// opcode: fmv.x.d ; op1:f28; dest:x22; op1val:0x0; valaddr_reg:x16; val_offset:88; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x22, f28, 0x0, 0, x16, 88, x17, x15, 128, x18)

inst_12:// rs1==f0, rd==x11, 
// opcode: fmv.x.d ; op1:f0; dest:x11; op1val:0x0; valaddr_reg:x16; val_offset:96; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x11, f0, 0x0, 0, x16, 96, x17, x15, 144, x18)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_13:// rs1==f5, rd==x16, 
// opcode: fmv.x.d ; op1:f5; dest:x16; op1val:0x0; valaddr_reg:x20; val_offset:104; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x16, f5, 0x0, 0, x20, 104, x21, x19, 0, x18)

inst_14:// rs1==f30, rd==x15, 
// opcode: fmv.x.d ; op1:f30; dest:x15; op1val:0x0; valaddr_reg:x20; val_offset:112; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x15, f30, 0x0, 0, x20, 112, x21, x19, 16, x18)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_15:// rs1==f11, rd==x1, 
// opcode: fmv.x.d ; op1:f11; dest:x1; op1val:0x0; valaddr_reg:x16; val_offset:120; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x1, f11, 0x0, 0, x16, 120, x17, x15, 0, x18)

inst_16:// rs1==f23, rd==x19, 
// opcode: fmv.x.d ; op1:f23; dest:x19; op1val:0x0; valaddr_reg:x16; val_offset:128; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x19, f23, 0x0, 0, x16, 128, x17, x15, 16, x18)

inst_17:// rs1==f9, rd==x24, 
// opcode: fmv.x.d ; op1:f9; dest:x24; op1val:0x0; valaddr_reg:x16; val_offset:136; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x24, f9, 0x0, 0, x16, 136, x17, x15, 32, x18)

inst_18:// rs1==f6, rd==x14, 
// opcode: fmv.x.d ; op1:f6; dest:x14; op1val:0x0; valaddr_reg:x16; val_offset:144; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x14, f6, 0x0, 0, x16, 144, x17, x15, 48, x18)

inst_19:// rs1==f19, rd==x8, 
// opcode: fmv.x.d ; op1:f19; dest:x8; op1val:0x0; valaddr_reg:x16; val_offset:152; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x8, f19, 0x0, 0, x16, 152, x17, x15, 64, x18)

inst_20:// rs1==f26, rd==x9, 
// opcode: fmv.x.d ; op1:f26; dest:x9; op1val:0x0; valaddr_reg:x16; val_offset:160; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x9, f26, 0x0, 0, x16, 160, x17, x15, 80, x18)

inst_21:// rs1==f1, rd==x27, 
// opcode: fmv.x.d ; op1:f1; dest:x27; op1val:0x0; valaddr_reg:x16; val_offset:168; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x27, f1, 0x0, 0, x16, 168, x17, x15, 96, x18)

inst_22:// rs1==f7, rd==x4, 
// opcode: fmv.x.d ; op1:f7; dest:x4; op1val:0x0; valaddr_reg:x16; val_offset:176; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x4, f7, 0x0, 0, x16, 176, x17, x15, 112, x18)

inst_23:// rs1==f16, rd==x26, 
// opcode: fmv.x.d ; op1:f16; dest:x26; op1val:0x0; valaddr_reg:x16; val_offset:184; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x26, f16, 0x0, 0, x16, 184, x17, x15, 128, x18)

inst_24:// rs1==f2, rd==x28, 
// opcode: fmv.x.d ; op1:f2; dest:x28; op1val:0x0; valaddr_reg:x16; val_offset:192; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x28, f2, 0x0, 0, x16, 192, x17, x15, 144, x18)

inst_25:// rs1==f21, rd==x31, 
// opcode: fmv.x.d ; op1:f21; dest:x31; op1val:0x0; valaddr_reg:x16; val_offset:200; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x31, f21, 0x0, 0, x16, 200, x17, x15, 160, x18)

inst_26:// rs1==f8, rd==x20, 
// opcode: fmv.x.d ; op1:f8; dest:x20; op1val:0x0; valaddr_reg:x16; val_offset:208; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x20, f8, 0x0, 0, x16, 208, x17, x15, 176, x18)

inst_27:// rs1==f12, rd==x30, 
// opcode: fmv.x.d ; op1:f12; dest:x30; op1val:0x0; valaddr_reg:x16; val_offset:216; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x30, f12, 0x0, 0, x16, 216, x17, x15, 192, x18)

inst_28:// rs1==f22, rd==x10, 
// opcode: fmv.x.d ; op1:f22; dest:x10; op1val:0x0; valaddr_reg:x16; val_offset:224; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x10, f22, 0x0, 0, x16, 224, x17, x15, 208, x18)

inst_29:// rs1==f18, rd==x0, 
// opcode: fmv.x.d ; op1:f18; dest:x0; op1val:0x0; valaddr_reg:x16; val_offset:232; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x0, f18, 0x0, 0, x16, 232, x17, x15, 224, x18)

inst_30:// rs1==f31, rd==x12, 
// opcode: fmv.x.d ; op1:f31; dest:x12; op1val:0x0; valaddr_reg:x16; val_offset:240; rmval:0x0; correctval:0; testreg:x18
TEST_FPID_OP(fmv.x.d, x12, f31, 0x0, 0, x16, 240, x17, x15, 240, x18)

inst_31:// rs1==f27, rd==x18, 
// opcode: fmv.x.d ; op1:f27; dest:x18; op1val:0x0; valaddr_reg:x16; val_offset:248; rmval:0x0; correctval:0; testreg:x22
TEST_FPID_OP(fmv.x.d, x18, f27, 0x0, 0, x16, 248, x17, x15, 256, x22)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x3fc08577924770d3
.dword 0x7febedc2f3ebcf12
.dword 0x8ff137a953e8eb43
.dword 0x401854a908ceac39
.dword 0x400cf84ba749f9c5
.dword 0x3ffd2d6b7dc59a3a
.dword 0xbfe766ba34c2da80
.dword 0x3fd93fdc7b89296c
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
.dword 0x0
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 4*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 4*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 34*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
