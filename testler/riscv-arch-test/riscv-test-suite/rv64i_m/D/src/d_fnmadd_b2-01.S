
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 11:53:03 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fnmadd1.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V FD extension for the fnmadd_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fnmadd_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f21, rs2==f10, rs3==f16, rd==f16, fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x14c1bacf914c2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and rm_val == 0  
// opcode: fnmadd.d ; op1:f21; op2:f10; op3:f16; dest:f16; op1val:0x4a; op2val:0x3fc14c1bacf914c2; op3val:0xb; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f16, f21, f10, f16, 0x0, 0, x16, 0, x17, x15, 0, x18)

inst_1:
// rs1 == rs2 == rs3 != rd, rs1==f23, rs2==f23, rs3==f23, rd==f22, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000035 and rm_val == 0  
// opcode: fnmadd.d ; op1:f23; op2:f23; op3:f23; dest:f22; op1val:0x7fe0000000000031; op2val:0x7fe0000000000031; op3val:0x7fe0000000000031; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f22, f23, f23, f23, 0x0, 0, x16, 24, x17, x15, 16, x18)

inst_2:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f11, rs2==f3, rs3==f11, rd==f19, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000019 and rm_val == 0  
// opcode: fnmadd.d ; op1:f11; op2:f3; op3:f11; dest:f19; op1val:0x7fe000000000000c; op2val:0x7ff0000000000000; op3val:0x7fe000000000000c; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f19, f11, f3, f11, 0x0, 0, x16, 48, x17, x15, 32, x18)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==f29, rs2==f14, rs3==f29, rd==f29, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000053 and rm_val == 0  
// opcode: fnmadd.d ; op1:f29; op2:f14; op3:f29; dest:f29; op1val:0x7fe000000000001e; op2val:0x7ff0000000000000; op3val:0x7fe000000000001e; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f29, f29, f14, f29, 0x0, 0, x16, 72, x17, x15, 48, x18)

inst_4:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f20, rs2==f5, rs3==f9, rd==f28, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000063 and rm_val == 0  
// opcode: fnmadd.d ; op1:f20; op2:f5; op3:f9; dest:f28; op1val:0x7fe0000000000050; op2val:0x7ff0000000000000; op3val:0x7fe0000000000063; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f28, f20, f5, f9, 0x0, 0, x16, 96, x17, x15, 64, x18)

inst_5:
// rd == rs2 == rs3 != rs1, rs1==f14, rs2==f21, rs3==f21, rd==f21, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000035 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000050 and rm_val == 0  
// opcode: fnmadd.d ; op1:f14; op2:f21; op3:f21; dest:f21; op1val:0x7fe0000000000035; op2val:0x7ff0000000000000; op3val:0x7ff0000000000000; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f21, f14, f21, f21, 0x0, 0, x16, 120, x17, x15, 80, x18)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==f13, rs2==f13, rs3==f28, rd==f13, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000b and rm_val == 0  
// opcode: fnmadd.d ; op1:f13; op2:f13; op3:f28; dest:f13; op1val:0x7fe0000000000017; op2val:0x7fe0000000000017; op3val:0x7fe000000000000b; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f13, f13, f28, 0x0, 0, x16, 144, x17, x15, 96, x18)

inst_7:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f6, rs2==f27, rs3==f3, rd==f27, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000028 and rm_val == 0  
// opcode: fnmadd.d ; op1:f6; op2:f27; op3:f3; dest:f27; op1val:0x7fe0000000000001; op2val:0x7ff0000000000000; op3val:0x7fe0000000000028; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f27, f6, f27, f3, 0x0, 0, x16, 168, x17, x15, 112, x18)

inst_8:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f4, rs2==f4, rs3==f6, rd==f0, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001d and rm_val == 0  
// opcode: fnmadd.d ; op1:f4; op2:f4; op3:f6; dest:f0; op1val:0x7fe000000000002f; op2val:0x7fe000000000002f; op3val:0x7fe000000000001d; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f0, f4, f4, f6, 0x0, 0, x16, 192, x17, x15, 128, x18)

inst_9:
// rs1 == rs2 == rs3 == rd, rs1==f8, rs2==f8, rs3==f8, rd==f8, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000057 and rm_val == 0  
// opcode: fnmadd.d ; op1:f8; op2:f8; op3:f8; dest:f8; op1val:0x7fe000000000004c; op2val:0x7fe000000000004c; op3val:0x7fe000000000004c; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f8, f8, f8, f8, 0x0, 0, x16, 216, x17, x15, 144, x18)

inst_10:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f30, rs2==f20, rs3==f20, rd==f10, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000025 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000030 and rm_val == 0  
// opcode: fnmadd.d ; op1:f30; op2:f20; op3:f20; dest:f10; op1val:0x7fe0000000000025; op2val:0x7ff0000000000000; op3val:0x7ff0000000000000; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f10, f30, f20, f20, 0x0, 0, x16, 240, x17, x15, 160, x18)

inst_11:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f1, rs2==f16, rs3==f12, rd==f1, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000029 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and rm_val == 0  
// opcode: fnmadd.d ; op1:f1; op2:f16; op3:f12; dest:f1; op1val:0x7fe0000000000029; op2val:0x7ff0000000000000; op3val:0x7fe0000000000012; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f1, f1, f16, f12, 0x0, 0, x16, 264, x17, x15, 176, x18)

inst_12:
// rs1==f19, rs2==f15, rs3==f27, rd==f7, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000021 and rm_val == 0  
// opcode: fnmadd.d ; op1:f19; op2:f15; op3:f27; dest:f7; op1val:0x7fe0000000000036; op2val:0x7ff0000000000000; op3val:0x7fe0000000000021; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f7, f19, f15, f27, 0x0, 0, x16, 288, x17, x15, 192, x18)

inst_13:
// rs1==f26, rs2==f0, rs3==f22, rd==f30, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000002 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002c and rm_val == 0  
// opcode: fnmadd.d ; op1:f26; op2:f0; op3:f22; dest:f30; op1val:0x7fe0000000000002; op2val:0x7ff0000000000000; op3val:0x7fe000000000002c; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f30, f26, f0, f22, 0x0, 0, x16, 312, x17, x15, 208, x18)

inst_14:
// rs1==f17, rs2==f12, rs3==f4, rd==f20, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000063 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003b and rm_val == 0  
// opcode: fnmadd.d ; op1:f17; op2:f12; op3:f4; dest:f20; op1val:0x7fe0000000000063; op2val:0x7ff0000000000000; op3val:0x7fe000000000003b; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f20, f17, f12, f4, 0x0, 0, x16, 336, x17, x15, 224, x18)

inst_15:
// rs1==f16, rs2==f26, rs3==f30, rd==f24, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000014 and rm_val == 0  
// opcode: fnmadd.d ; op1:f16; op2:f26; op3:f30; dest:f24; op1val:0x7fe0000000000032; op2val:0x7ff0000000000000; op3val:0x7fe0000000000014; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f24, f16, f26, f30, 0x0, 0, x16, 360, x17, x15, 240, x18)

inst_16:
// rs1==f22, rs2==f18, rs3==f13, rd==f25, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000053 and rm_val == 0  
// opcode: fnmadd.d ; op1:f22; op2:f18; op3:f13; dest:f25; op1val:0x7fe000000000001c; op2val:0x7ff0000000000000; op3val:0x7fe0000000000053; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f25, f22, f18, f13, 0x0, 0, x16, 384, x17, x15, 256, x18)

inst_17:
// rs1==f9, rs2==f11, rs3==f17, rd==f12, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000046 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003d and rm_val == 0  
// opcode: fnmadd.d ; op1:f9; op2:f11; op3:f17; dest:f12; op1val:0x7fe0000000000046; op2val:0x7ff0000000000000; op3val:0x7fe000000000003d; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f12, f9, f11, f17, 0x0, 0, x16, 408, x17, x15, 272, x18)

inst_18:
// rs1==f3, rs2==f19, rs3==f18, rd==f31, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000063 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000059 and rm_val == 0  
// opcode: fnmadd.d ; op1:f3; op2:f19; op3:f18; dest:f31; op1val:0x7fe0000000000063; op2val:0x7ff0000000000000; op3val:0x7fe0000000000059; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f31, f3, f19, f18, 0x0, 0, x16, 432, x17, x15, 288, x18)

inst_19:
// rs1==f15, rs2==f24, rs3==f5, rd==f2, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000044 and rm_val == 0  
// opcode: fnmadd.d ; op1:f15; op2:f24; op3:f5; dest:f2; op1val:0x7fe000000000003f; op2val:0x7ff0000000000000; op3val:0x7fe0000000000044; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f2, f15, f24, f5, 0x0, 0, x16, 456, x17, x15, 304, x18)

inst_20:
// rs1==f31, rs2==f7, rs3==f14, rd==f9, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003d and rm_val == 0  
// opcode: fnmadd.d ; op1:f31; op2:f7; op3:f14; dest:f9; op1val:0x7fe0000000000033; op2val:0x7ff0000000000000; op3val:0x7fe000000000003d; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f9, f31, f7, f14, 0x0, 0, x16, 480, x17, x15, 320, x18)

inst_21:
// rs1==f10, rs2==f1, rs3==f19, rd==f11, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f1; op3:f19; dest:f11; op1val:0x7fe0000000000014; op2val:0x7ff0000000000000; op3val:0x7fe000000000004c; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f11, f10, f1, f19, 0x0, 0, x16, 504, x17, x15, 336, x18)

inst_22:
// rs1==f5, rs2==f6, rs3==f10, rd==f14, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000010 and rm_val == 0  
// opcode: fnmadd.d ; op1:f5; op2:f6; op3:f10; dest:f14; op1val:0x7fe0000000000015; op2val:0x7ff0000000000000; op3val:0x7fe0000000000010; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f14, f5, f6, f10, 0x0, 0, x16, 528, x17, x15, 352, x18)

inst_23:
// rs1==f24, rs2==f30, rs3==f15, rd==f6, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000042 and rm_val == 0  
// opcode: fnmadd.d ; op1:f24; op2:f30; op3:f15; dest:f6; op1val:0x7fe0000000000001; op2val:0x7ff0000000000000; op3val:0x7fe0000000000042; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f6, f24, f30, f15, 0x0, 0, x16, 552, x17, x15, 368, x18)

inst_24:
// rs1==f7, rs2==f29, rs3==f31, rd==f3, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffff7fff4e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000e and rm_val == 0  
// opcode: fnmadd.d ; op1:f7; op2:f29; op3:f31; dest:f3; op1val:0x7fe000000000004a; op2val:0xbfefffffff7fff4e; op3val:0x7fe000000000000e; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f3, f7, f29, f31, 0x0, 0, x16, 576, x17, x15, 384, x18)

inst_25:
// rs1==f2, rs2==f9, rs3==f24, rd==f4, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffbfffb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000017 and rm_val == 0  
// opcode: fnmadd.d ; op1:f2; op2:f9; op3:f24; dest:f4; op1val:0x7fe000000000000e; op2val:0xbfefffffffbfffb4; op3val:0x7fe0000000000017; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f4, f2, f9, f24, 0x0, 0, x16, 600, x17, x15, 400, x18)

inst_26:
// rs1==f28, rs2==f2, rs3==f0, rd==f26, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffdffec6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003a and rm_val == 0  
// opcode: fnmadd.d ; op1:f28; op2:f2; op3:f0; dest:f26; op1val:0x7fe0000000000062; op2val:0xbfefffffffdffec6; op3val:0x7fe000000000003a; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f26, f28, f2, f0, 0x0, 0, x16, 624, x17, x15, 416, x18)

inst_27:
// rs1==f12, rs2==f25, rs3==f7, rd==f17, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffefffc2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000019 and rm_val == 0  
// opcode: fnmadd.d ; op1:f12; op2:f25; op3:f7; dest:f17; op1val:0x7fe0000000000005; op2val:0xbfefffffffefffc2; op3val:0x7fe0000000000019; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f17, f12, f25, f7, 0x0, 0, x16, 648, x17, x15, 432, x18)

inst_28:
// rs1==f25, rs2==f17, rs3==f1, rd==f5, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000012 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffff7ff8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000027 and rm_val == 0  
// opcode: fnmadd.d ; op1:f25; op2:f17; op3:f1; dest:f5; op1val:0x7fe0000000000012; op2val:0xbfeffffffff7ff8c; op3val:0x7fe0000000000027; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f5, f25, f17, f1, 0x0, 0, x16, 672, x17, x15, 448, x18)

inst_29:
// rs1==f27, rs2==f28, rs3==f26, rd==f23, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffbff76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000021 and rm_val == 0  
// opcode: fnmadd.d ; op1:f27; op2:f28; op3:f26; dest:f23; op1val:0x7fe0000000000023; op2val:0xbfeffffffffbff76; op3val:0x7fe0000000000021; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f23, f27, f28, f26, 0x0, 0, x16, 696, x17, x15, 464, x18)

inst_30:
// rs1==f18, rs2==f22, rs3==f25, rd==f15, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000051 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffdfee0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003e and rm_val == 0  
// opcode: fnmadd.d ; op1:f18; op2:f22; op3:f25; dest:f15; op1val:0x7fe0000000000051; op2val:0xbfeffffffffdfee0; op3val:0x7fe000000000003e; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f15, f18, f22, f25, 0x0, 0, x16, 720, x17, x15, 480, x18)

inst_31:
// rs1==f0, rs2==f31, rs3==f2, rd==f18, fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffefee6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000043 and rm_val == 0  
// opcode: fnmadd.d ; op1:f0; op2:f31; op3:f2; dest:f18; op1val:0x7fe0000000000049; op2val:0xbfeffffffffefee6; op3val:0x7fe0000000000043; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f18, f0, f31, f2, 0x0, 0, x16, 744, x17, x15, 496, x18)

inst_32:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffff7ef6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000037 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000004d; op2val:0xbfefffffffff7ef6; op3val:0x7fe0000000000037; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 512, x18)

inst_33:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffbef0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000032 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000055; op2val:0xbfefffffffffbef0; op3val:0x7fe0000000000032; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 528, x18)

inst_34:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000018 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffdf8e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000020 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000018; op2val:0xbfefffffffffdf8e; op3val:0x7fe0000000000020; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 544, x18)

inst_35:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffef06 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000046 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000036; op2val:0xbfefffffffffef06; op3val:0x7fe0000000000046; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 560, x18)

inst_36:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffff7ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000011 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000011; op2val:0xbfeffffffffff7ba; op3val:0x7fe0000000000011; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 576, x18)

inst_37:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffb7c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000023; op2val:0xbfeffffffffffb7c; op3val:0x7fe000000000001e; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 592, x18)

inst_38:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffcc8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000004c; op2val:0xbfeffffffffffcc8; op3val:0x7fe000000000004f; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 608, x18)

inst_39:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffe38 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000057 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000000c; op2val:0xbfeffffffffffe38; op3val:0x7fe0000000000057; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 624, x18)

inst_40:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffec2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000022 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000003c; op2val:0xbfeffffffffffec2; op3val:0x7fe0000000000022; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 640, x18)

inst_41:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff3e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000001 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000003f; op2val:0xbfefffffffffff3e; op3val:0x7fe0000000000001; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 656, x18)

inst_42:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff74 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000002c; op2val:0xbfefffffffffff74; op3val:0x7fe0000000000009; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 672, x18)

inst_43:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffffe2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000002 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000004; op2val:0xbfefffffffffffe2; op3val:0x7fe0000000000002; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 688, x18)

inst_44:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff78 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000002d; op2val:0xbfefffffffffff78; op3val:0x7fe0000000000012; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 704, x18)

inst_45:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff3c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000007 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000058; op2val:0xbfefffffffffff3c; op3val:0x7fe0000000000007; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 720, x18)

inst_46:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffff34 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000038 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000002c; op2val:0xbfefffffffffff34; op3val:0x7fe0000000000038; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 736, x18)

inst_47:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000001ffffd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000059 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000002f; op2val:0x40000000001ffffd; op3val:0x10000000000059; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 752, x18)

inst_48:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000fffa0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000004 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000062; op2val:0x40000000000fffa0; op3val:0x10000000000004; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 768, x18)

inst_49:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000007ffff and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000000f; op2val:0x400000000007ffff; op3val:0x1000000000001d; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 784, x18)

inst_50:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000003fffd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000059 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000002f; op2val:0x400000000003fffd; op3val:0x10000000000059; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 800, x18)

inst_51:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000020013 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000005; op2val:0x4000000000020013; op3val:0x1000000000002f; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 816, x18)

inst_52:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000ffdd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000053 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000004d; op2val:0x400000000000ffdd; op3val:0x10000000000053; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 832, x18)

inst_53:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000801a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000000c; op2val:0x400000000000801a; op3val:0x1000000000004b; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 848, x18)

inst_54:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000003ff7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000043 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000002b; op2val:0x4000000000003ff7; op3val:0x10000000000043; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 864, x18)

inst_55:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000001fd1 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000058 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000005b; op2val:0x4000000000001fd1; op3val:0x10000000000058; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 880, x18)

inst_56:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000fd2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000060 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000005e; op2val:0x4000000000000fd2; op3val:0x10000000000060; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 896, x18)

inst_57:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000801 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000044 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000021; op2val:0x4000000000000801; op3val:0x10000000000044; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 912, x18)

inst_58:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000003b5 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000002 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000004c; op2val:0x40000000000003b5; op3val:0x10000000000002; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 928, x18)

inst_59:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000001f6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000024 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000001c; op2val:0x40000000000001f6; op3val:0x10000000000024; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 944, x18)

inst_60:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000045 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000000e5 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000053 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000045; op2val:0x40000000000000e5; op3val:0x10000000000053; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 960, x18)

inst_61:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000090 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000054 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000001a; op2val:0x4000000000000090; op3val:0x10000000000054; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 976, x18)

inst_62:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000016 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000039; op2val:0x4000000000000016; op3val:0x1000000000001e; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 992, x18)

inst_63:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000025 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000000b and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000021 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000025; op2val:0x400000000000000b; op3val:0x10000000000021; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1008, x18)

inst_64:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffd4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000054; op2val:0x3fffffffffffffd4; op3val:0x1000000000005b; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1024, x18)

inst_65:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffff8c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000037 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000005e; op2val:0x3fffffffffffff8c; op3val:0x10000000000037; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1040, x18)

inst_66:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000061 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffff9e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000057 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000061; op2val:0x3fffffffffffff9e; op3val:0x10000000000057; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1056, x18)

inst_67:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000058 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffff58 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000004 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000058; op2val:0x3fffffffffffff58; op3val:0x10000000000004; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1072, x18)

inst_68:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffda and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000017; op2val:0x3fffffffffffffda; op3val:0x10000000000007; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1088, x18)

inst_69:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000001f and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000000f; op2val:0x400000000000001f; op3val:0x1000000000005a; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1104, x18)

inst_70:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000039 and fs2 == 1 and fe2 == 0x3e0 and fm2 == 0xffff7ffffff8e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000010 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000039; op2val:0xbe0ffff7ffffff8e; op3val:0x10000000000010; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1120, x18)

inst_71:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x3df and fm2 == 0xfffaaffffffd4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000055 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000016; op2val:0xbdffffaaffffffd4; op3val:0x10000000000055; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1136, x18)

inst_72:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x3de and fm2 == 0xfffefffffff6c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000004a; op2val:0xbdefffefffffff6c; op3val:0x10000000000008; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1152, x18)

inst_73:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x3dd and fm2 == 0xffe8bffffffec and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000000a; op2val:0xbddffe8bffffffec; op3val:0x1000000000005d; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1168, x18)

inst_74:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x3dc and fm2 == 0xffe17ffffffe8 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000000c; op2val:0xbdcffe17ffffffe8; op3val:0x1000000000003d; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1184, x18)

inst_75:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x3db and fm2 == 0xffd9fffffff4e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000026 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000059; op2val:0xbdbffd9fffffff4e; op3val:0x10000000000026; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1200, x18)

inst_76:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3da and fm2 == 0xff6dfffffff3c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000049 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000062; op2val:0xbdaff6dfffffff3c; op3val:0x10000000000049; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1216, x18)

inst_77:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x3d9 and fm2 == 0xff8bfffffff96 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000035; op2val:0xbd9ff8bfffffff96; op3val:0x1000000000001d; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1232, x18)

inst_78:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x3d8 and fm2 == 0xff17fffffff74 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000046; op2val:0xbd8ff17fffffff74; op3val:0x1000000000001d; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1248, x18)

inst_79:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x3d7 and fm2 == 0xff7fffffffff6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000005; op2val:0xbd7ff7fffffffff6; op3val:0x10000000000008; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1264, x18)

inst_80:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x3d6 and fm2 == 0xf65ffffffffa2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000030; op2val:0xbd6f65ffffffffa2; op3val:0x1000000000004d; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1280, x18)

inst_81:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x3d5 and fm2 == 0xea3ffffffffe7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000057 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000000d; op2val:0xbd5ea3ffffffffe7; op3val:0x10000000000057; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1296, x18)

inst_82:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x3d4 and fm2 == 0xdcfffffffff55 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000046 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000005c; op2val:0xbd4dcfffffffff55; op3val:0x10000000000046; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 1312, x18)

inst_83:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x3d3 and fm2 == 0xabfffffffffe7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000054 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1000000000000f; op2val:0xbd3abfffffffffe7; op3val:0x10000000000054; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 1328, x18)

inst_84:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3d2 and fm2 == 0xeffffffffff42 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000062; op2val:0xbd2effffffffff42; op3val:0x10000000000008; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 1344, x18)
addi x16,x16,2040

inst_85:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x0bffffffffffa and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000006; op2val:0xbd10bffffffffffa; op3val:0x1000000000003d; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 1360, x18)

inst_86:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0xefffffffffff1 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000002 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000008; op2val:0xbd0efffffffffff1; op3val:0x10000000000002; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 1376, x18)

inst_87:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x3cf and fm2 == 0x5ffffffffffbb and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000032; op2val:0xbcf5ffffffffffbb; op3val:0x1000000000000a; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 1392, x18)

inst_88:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000051 and fs2 == 0 and fe2 == 0x3cb and fm2 == 0xfffffffffff5e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000012 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000051; op2val:0x3cbfffffffffff5e; op3val:0x10000000000012; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 1408, x18)

inst_89:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x43fffffffffe4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000059 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000016; op2val:0x3d143fffffffffe4; op3val:0x10000000000059; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 1424, x18)

inst_90:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x3ce and fm2 == 0xfffffffffffd0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000014 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000018; op2val:0x3cefffffffffffd0; op3val:0x10000000000014; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 1440, x18)

inst_91:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x4ffffffffffd2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000056 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000023; op2val:0x3d14ffffffffffd2; op3val:0x10000000000056; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 1456, x18)

inst_92:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0x77fffffffff73 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000030 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10000000000060; op2val:0x3d077fffffffff73; op3val:0x10000000000030; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 1472, x18)

inst_93:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x8acb90f094130 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0x42c8acb90f094130; op3val:0x46; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 1488, x18)

inst_94:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x42c and fm2 == 0x642c858de9bfc and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0x42c642c858de9bfc; op3val:0x1e; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 1504, x18)

inst_95:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x818181800001a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0x42c818181800001a; op3val:0x12; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 1520, x18)

inst_96:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xe1e1e1e0f0f93 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0x42ce1e1e1e0f0f93; op3val:0x47; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 1536, x18)

inst_97:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 0 and fe2 == 0x431 and fm2 == 0xffffffff80064 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2; op2val:0x431ffffffff80064; op3val:0x33; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 1552, x18)

inst_98:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xe1e1e1e1a5ac4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0x42ce1e1e1e1a5ac4; op3val:0x39; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 1568, x18)

inst_99:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x42d and fm2 == 0x8618618600049 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000031 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2a; op2val:0x42d8618618600049; op3val:0x31; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 1584, x18)

inst_100:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x47ae147ad7120 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0x42e47ae147ad7120; op3val:0x62; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 1600, x18)

inst_101:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xc0e07038150fe and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000032 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0x42cc0e07038150fe; op3val:0x32; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 1616, x18)

inst_102:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x42c and fm2 == 0xbacf914c18376 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4a; op2val:0x42cbacf914c18376; op3val:0x1; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 1632, x18)

inst_103:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001f and fs2 == 0 and fe2 == 0x42e and fm2 == 0x0842108420049 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000048 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1f; op2val:0x42e0842108420049; op3val:0x48; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 1648, x18)

inst_104:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000061 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x51d07eae2edbb and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000029 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x61; op2val:0x42c51d07eae2edbb; op3val:0x29; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 1664, x18)

inst_105:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x702e05c0b7bcc and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0x42c702e05c0b7bcc; op3val:0x15; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1680, x18)

inst_106:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x42e and fm2 == 0xe1e1e1e1e1abe and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x11; op2val:0x42ee1e1e1e1e1abe; op3val:0x36; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 1696, x18)

inst_107:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xc0e070381bfbf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0x42cc0e070381bfbf; op3val:0x5c; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 1712, x18)

inst_108:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x42e and fm2 == 0x1a7b9611a7b6b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1d; op2val:0x42e1a7b9611a7b6b; op3val:0x5a; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 1728, x18)

inst_109:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x42d and fm2 == 0x47ae147ae144d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x32; op2val:0x42d47ae147ae144d; op3val:0x1d; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 1744, x18)

inst_110:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xf81f81f81f86e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0x42cf81f81f81f86e; op3val:0x49; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1760, x18)

inst_111:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x42c and fm2 == 0x58ed2308158f1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5f; op2val:0x42c58ed2308158f1; op3val:0x14; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 1776, x18)

inst_112:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x555555555557b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x18; op2val:0x42e555555555557b; op3val:0x25; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 1792, x18)

inst_113:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x42c and fm2 == 0x681681681682c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5b; op2val:0x42c681681681682c; op3val:0x14; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 1808, x18)

inst_114:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x55555555555ac and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x18; op2val:0x42e55555555555ac; op3val:0x44; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 1824, x18)

inst_115:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xe9131abf0b76b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x43; op2val:0x42ce9131abf0b76b; op3val:0x4; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1840, x18)

inst_116:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x42f and fm2 == 0x99999993332ea and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xa; op2val:0xc2f99999993332ea; op3val:0x2d; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 1856, x18)

inst_117:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x42f and fm2 == 0x999999966664a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000011 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xa; op2val:0xc2f999999966664a; op3val:0x11; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 1872, x18)

inst_118:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xfffffffdfff5a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000052 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0xc2cfffffffdfff5a; op3val:0x52; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 1888, x18)

inst_119:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003c and fs2 == 1 and fe2 == 0x42d and fm2 == 0x1111111088821 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3c; op2val:0xc2d1111111088821; op3val:0x60; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 1904, x18)

inst_120:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xcd85688fc64d3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x47; op2val:0xc2ccd85688fc64d3; op3val:0x12; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1920, x18)

inst_121:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x42f and fm2 == 0x11111110eeeb6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0xc2f11111110eeeb6; op3val:0x34; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 1936, x18)

inst_122:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x42c and fm2 == 0x5c9882b91b347 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc2c5c9882b91b347; op3val:0x57; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 1952, x18)

inst_123:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x42f and fm2 == 0x999999998ccaa and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xa; op2val:0xc2f999999998ccaa; op3val:0x15; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 1968, x18)

inst_124:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x249249248db3a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x38; op2val:0xc2d249249248db3a; op3val:0x2c; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 1984, x18)

inst_125:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 1 and fe2 == 0x42e and fm2 == 0x2f684bda1090f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1b; op2val:0xc2e2f684bda1090f; op3val:0x5a; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 2000, x18)

inst_126:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x4e5e0a72eefd4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000061 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x62; op2val:0xc2c4e5e0a72eefd4; op3val:0x61; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 2016, x18)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_127:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x2492492491b00 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7; op2val:0xc302492492491b00; op3val:0x5f; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 0, x18)

inst_128:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x5555555554ff8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc2d5555555554ff8; op3val:0x5; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 16, x18)

inst_129:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000017 and fs2 == 1 and fe2 == 0x42e and fm2 == 0x642c8590b1e5d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x17; op2val:0xc2e642c8590b1e5d; op3val:0x2c; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 32, x18)

inst_130:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x9999999999766 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5; op2val:0xc309999999999766; op3val:0x5f; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 48, x18)

inst_131:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xdae6076b9803a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x45; op2val:0xc2cdae6076b9803a; op3val:0x60; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 64, x18)

inst_132:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x8f9c18f9c1864 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0xc2c8f9c18f9c1864; op3val:0x1f; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 80, x18)

inst_133:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xfffffffffff22 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0xc2dfffffffffff22; op3val:0x4e; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 96, x18)

inst_134:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x42c and fm2 == 0x642c8590b213d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0xc2c642c8590b213d; op3val:0xb; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 112, x18)

inst_135:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x5555555555543 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc2d5555555555543; op3val:0x5; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 128, x18)

inst_136:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x249249249244b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x38; op2val:0xc2d249249249244b; op3val:0x39; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 144, x18)

inst_137:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xc71c71c71c6ab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0xc2dc71c71c71c6ab; op3val:0x3d; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 160, x18)

inst_138:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xc71c71c71c6d9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000024 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0xc2dc71c71c71c6d9; op3val:0x24; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 176, x18)

inst_139:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x411 and fm2 == 0x745e9745d1746 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xb; op2val:0x411745e9745d1746; op3val:0x41; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 192, x18)

inst_140:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x40e and fm2 == 0x5c98c415c9883 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0x40e5c98c415c9883; op3val:0x5; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 208, x18)

inst_141:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x40d and fm2 == 0x5c9bbea3677d4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0x40d5c9bbea3677d4; op3val:0x25; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 224, x18)

inst_142:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x40e and fm2 == 0xc7251c71c71c7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x9; op2val:0x40ec7251c71c71c7; op3val:0x26; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 240, x18)

inst_143:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x40a and fm2 == 0x6446f4de9bd38 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0x40a6446f4de9bd38; op3val:0x4b; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 256, x18)

inst_144:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 0 and fe2 == 0x40a and fm2 == 0xc75471c71c71c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x24; op2val:0x40ac75471c71c71c; op3val:0x3e; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 272, x18)

inst_145:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x409 and fm2 == 0x1acc234f72c23 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000048 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3a; op2val:0x4091acc234f72c23; op3val:0x48; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 288, x18)

inst_146:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x408 and fm2 == 0x08b9ce739ce74 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0x40808b9ce739ce74; op3val:0x39; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 304, x18)

inst_147:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x48d70a3d70a3d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0x40848d70a3d70a3d; op3val:0x39; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 320, x18)

inst_148:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x90895da895da9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0x40590895da895da9; op3val:0x12; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 336, x18)

inst_149:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x708a114228451 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x59; op2val:0x404708a114228451; op3val:0x3; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 352, x18)

inst_150:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x404 and fm2 == 0x2372c234f72c2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000040 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3a; op2val:0x4042372c234f72c2; op3val:0x40; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 368, x18)

inst_151:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x04f0f0f0f0f0f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x22; op2val:0x40404f0f0f0f0f0f; op3val:0x54; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 384, x18)

inst_152:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xdb33333333333 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0x401db33333333333; op3val:0x51; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 400, x18)

inst_153:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x403 and fm2 == 0x945d1745d1746 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xb; op2val:0x403945d1745d1746; op3val:0x15; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 416, x18)

inst_154:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8787878787878 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x11; op2val:0x4028787878787878; op3val:0x4f; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 432, x18)

inst_155:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82d82d82d82d8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5a; op2val:0x3ff82d82d82d82d8; op3val:0x47; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 448, x18)

inst_156:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000051 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd3c0ca4587e6b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x51; op2val:0x3fdd3c0ca4587e6b; op3val:0x4; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 464, x18)

inst_157:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1e4791e4791e4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000009 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5d; op2val:0x3fd1e4791e4791e4; op3val:0x9; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 480, x18)

inst_158:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ce739ce739ce and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0x3ff1ce739ce739ce; op3val:0x3c; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 496, x18)

inst_159:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xd555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000053 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x6; op2val:0x402d555555555555; op3val:0x53; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 512, x18)

inst_160:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7a6f4de9bd37a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5c; op2val:0x3fc7a6f4de9bd37a; op3val:0xe; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 528, x18)

inst_161:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3594d653594d6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x56; op2val:0x3fc3594d653594d6; op3val:0xd; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 544, x18)

inst_162:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x412 and fm2 == 0x999799999999a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5; op2val:0xc12999799999999a; op3val:0x51; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 560, x18)

inst_163:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x40e and fm2 == 0x8f9b3831f3832 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x29; op2val:0xc0e8f9b3831f3832; op3val:0x13; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 576, x18)

inst_164:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x40d and fm2 == 0xfff6600000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0xc0dfff6600000000; op3val:0x4e; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 592, x18)

inst_165:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x40b and fm2 == 0x744e8ba2e8ba3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xc0b744e8ba2e8ba3; op3val:0x51; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 608, x18)

inst_166:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x40b and fm2 == 0x5c92620ae4c41 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2f; op2val:0xc0b5c92620ae4c41; op3val:0x13; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 624, x18)

inst_167:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x40c and fm2 == 0x3af6c4ec4ec4f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0xc0c3af6c4ec4ec4f; op3val:0x30; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 640, x18)

inst_168:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x409 and fm2 == 0x0c78a7de6d1d6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0xc090c78a7de6d1d6; op3val:0x1e; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 656, x18)

inst_169:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x408 and fm2 == 0x03fdf7df7df7e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc0803fdf7df7df7e; op3val:0xa; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 672, x18)
addi x16,x16,2040

inst_170:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x407 and fm2 == 0x28ac37dac37db and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x37; op2val:0xc0728ac37dac37db; op3val:0x44; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 688, x18)

inst_171:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x405 and fm2 == 0x9ebbf309b8b57 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000002 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4f; op2val:0xc059ebbf309b8b57; op3val:0x2; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 704, x18)

inst_172:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000014 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x9633333333333 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x14; op2val:0xc069633333333333; op3val:0x23; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 720, x18)

inst_173:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xfa00000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x8; op2val:0xc06fa00000000000; op3val:0x19; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 736, x18)

inst_174:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xda80000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x40; op2val:0xc02da80000000000; op3val:0x4c; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 752, x18)

inst_175:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x36aaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x30; op2val:0xc0236aaaaaaaaaab; op3val:0x2f; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 768, x18)

inst_176:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xbffe000000000000; op3val:0x5c; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 784, x18)

inst_177:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8fc7e3f1f8fc8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x49; op2val:0xbff8fc7e3f1f8fc8; op3val:0xf; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 800, x18)

inst_178:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4; op2val:0x400c000000000000; op3val:0x4f; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 816, x18)

inst_179:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x8; op2val:0xbff2000000000000; op3val:0x18; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 832, x18)

inst_180:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0666666666666 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x50; op2val:0x3fe0666666666666; op3val:0x3a; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 848, x18)

inst_181:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000048 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc71c71c71c71c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x48; op2val:0xbfbc71c71c71c71c; op3val:0x1; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 864, x18)

inst_182:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9249249249249 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x15; op2val:0x3ff9249249249249; op3val:0x26; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 880, x18)

inst_183:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x71c71c71c71c7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x3ff71c71c71c71c7; op3val:0x5e; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 896, x18)

inst_184:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3a9a3784a062b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0x3fe3a9a3784a062b; op3val:0x33; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 912, x18)

inst_185:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000001ffff1 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000029 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000023; op2val:0x40000000001ffff1; op3val:0x3f80000000000029; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 928, x18)

inst_186:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000fffce and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000004e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000059; op2val:0x40000000000fffce; op3val:0x3f8000000000004e; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 944, x18)

inst_187:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000007ffc8 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000031 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000050; op2val:0x400000000007ffc8; op3val:0x3f80000000000031; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 960, x18)

inst_188:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000003ffb5 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000015 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000055; op2val:0x400000000003ffb5; op3val:0x3f80000000000015; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 976, x18)

inst_189:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000001ffee and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000002a; op2val:0x400000000001ffee; op3val:0x3f8000000000002f; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 992, x18)

inst_190:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000ffcc and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000052; op2val:0x400000000000ffcc; op3val:0x3f8000000000003c; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 1008, x18)

inst_191:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000007fd4 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000028 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000040; op2val:0x4000000000007fd4; op3val:0x3f80000000000028; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 1024, x18)

inst_192:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000005d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000003fbb and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000031 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000005d; op2val:0x4000000000003fbb; op3val:0x3f80000000000031; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 1040, x18)

inst_193:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000001fcb and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000013 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000003f; op2val:0x4000000000001fcb; op3val:0x3f80000000000013; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 1056, x18)

inst_194:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000fca and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000055; op2val:0x4000000000000fca; op3val:0x3f8000000000003e; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 1072, x18)

inst_195:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000007d0 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000004e; op2val:0x40000000000007d0; op3val:0x3f8000000000003d; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 1088, x18)

inst_196:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000003d3 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000023 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000003f; op2val:0x40000000000003d3; op3val:0x3f80000000000023; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 1104, x18)

inst_197:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000001f2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000004f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000036; op2val:0x40000000000001f2; op3val:0x3f8000000000004f; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 1120, x18)

inst_198:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000000f9 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000035 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000021; op2val:0x40000000000000f9; op3val:0x3f80000000000035; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 1136, x18)

inst_199:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000077 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000043 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000002b; op2val:0x4000000000000077; op3val:0x3f80000000000043; valaddr_reg:x16; val_offset:696; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 696, x17, x15, 1152, x18)

inst_200:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000001c and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000041; op2val:0x400000000000001c; op3val:0x3f8000000000003a; valaddr_reg:x16; val_offset:720; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 720, x17, x15, 1168, x18)

inst_201:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000017 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000021 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000019; op2val:0x4000000000000017; op3val:0x3f80000000000021; valaddr_reg:x16; val_offset:744; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 744, x17, x15, 1184, x18)

inst_202:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffb8 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000002f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000004c; op2val:0x3fffffffffffffb8; op3val:0x3f8000000000002f; valaddr_reg:x16; val_offset:768; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 768, x17, x15, 1200, x18)

inst_203:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000008 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000021 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000010; op2val:0x4000000000000008; op3val:0x3f80000000000021; valaddr_reg:x16; val_offset:792; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 792, x17, x15, 1216, x18)

inst_204:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000023 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000045 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000003; op2val:0x4000000000000023; op3val:0x3f80000000000045; valaddr_reg:x16; val_offset:816; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 816, x17, x15, 1232, x18)

inst_205:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffda and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x0000000000003 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000017; op2val:0x3fffffffffffffda; op3val:0x3f80000000000003; valaddr_reg:x16; val_offset:840; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 840, x17, x15, 1248, x18)

inst_206:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffe2 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000005d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f8000000000003f; op2val:0x3fffffffffffffe2; op3val:0x3f8000000000005d; valaddr_reg:x16; val_offset:864; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 864, x17, x15, 1264, x18)

inst_207:
// fs1 == 0 and fe1 == 0x3f8 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xffffffffffff6 and fs3 == 0 and fe3 == 0x3f8 and fm3 == 0x000000000003a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f80000000000023; op2val:0x3ffffffffffffff6; op3val:0x3f8000000000003a; valaddr_reg:x16; val_offset:888; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 888, x17, x15, 1280, x18)

inst_208:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x3e0 and fm2 == 0xfffd3ffffff40 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000058 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000060; op2val:0xbe0fffd3ffffff40; op3val:0x3ff0000000000058; valaddr_reg:x16; val_offset:912; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 912, x17, x15, 1296, x18)

inst_209:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x3df and fm2 == 0xfffe6ffffffea and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000019 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff000000000000b; op2val:0xbdffffe6ffffffea; op3val:0x3ff0000000000019; valaddr_reg:x16; val_offset:936; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 936, x17, x15, 1312, x18)

inst_210:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x3de and fm2 == 0xfff95ffffff4a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000035 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff000000000005b; op2val:0xbdefff95ffffff4a; op3val:0x3ff0000000000035; valaddr_reg:x16; val_offset:960; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 960, x17, x15, 1328, x18)

inst_211:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x3dd and fm2 == 0xfff63ffffff86 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000027 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff000000000003d; op2val:0xbddfff63ffffff86; op3val:0x3ff0000000000027; valaddr_reg:x16; val_offset:984; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 984, x17, x15, 1344, x18)

inst_212:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x3dc and fm2 == 0xffe47ffffff7a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000037 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000043; op2val:0xbdcffe47ffffff7a; op3val:0x3ff0000000000037; valaddr_reg:x16; val_offset:1008; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1008, x17, x15, 1360, x18)

inst_213:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x3db and fm2 == 0xfff5fffffff9e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000031; op2val:0xbdbfff5fffffff9e; op3val:0x3ff000000000000a; valaddr_reg:x16; val_offset:1032; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1032, x17, x15, 1376, x18)

inst_214:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003a and fs2 == 1 and fe2 == 0x3da and fm2 == 0xff8bfffffff8c and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff000000000003a; op2val:0xbdaff8bfffffff8c; op3val:0x3ff000000000003a; valaddr_reg:x16; val_offset:1056; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1056, x17, x15, 1392, x18)

inst_215:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x3d9 and fm2 == 0xfea7fffffff64 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000056 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff000000000004e; op2val:0xbd9fea7fffffff64; op3val:0x3ff0000000000056; valaddr_reg:x16; val_offset:1080; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1080, x17, x15, 1408, x18)

inst_216:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x3d8 and fm2 == 0xff9ffffffffc0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000020; op2val:0xbd8ff9ffffffffc0; op3val:0x3ff000000000000c; valaddr_reg:x16; val_offset:1104; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1104, x17, x15, 1424, x18)

inst_217:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x3d7 and fm2 == 0xfc6ffffffffe6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000039 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff000000000000d; op2val:0xbd7fc6ffffffffe6; op3val:0x3ff0000000000039; valaddr_reg:x16; val_offset:1128; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1128, x17, x15, 1440, x18)

inst_218:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x3d6 and fm2 == 0xf99ffffffff42 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000033 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000060; op2val:0xbd6f99ffffffff42; op3val:0x3ff0000000000033; valaddr_reg:x16; val_offset:1152; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1152, x17, x15, 1456, x18)

inst_219:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x3d5 and fm2 == 0xecbffffffff96 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000004d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000037; op2val:0xbd5ecbffffffff96; op3val:0x3ff000000000004d; valaddr_reg:x16; val_offset:1176; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1176, x17, x15, 1472, x18)

inst_220:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x3d4 and fm2 == 0xf3ffffffffff2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000018 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000007; op2val:0xbd4f3ffffffffff2; op3val:0x3ff0000000000018; valaddr_reg:x16; val_offset:1200; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1200, x17, x15, 1488, x18)

inst_221:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x3d3 and fm2 == 0xc0fffffffff67 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000057; op2val:0xbd3c0fffffffff67; op3val:0x3ff000000000003f; valaddr_reg:x16; val_offset:1224; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1224, x17, x15, 1504, x18)

inst_222:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x3d2 and fm2 == 0xddfffffffffb9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000011 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000026; op2val:0xbd2ddfffffffffb9; op3val:0x3ff0000000000011; valaddr_reg:x16; val_offset:1248; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1248, x17, x15, 1520, x18)

inst_223:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x37fffffffffad and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000032 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000044; op2val:0xbd137fffffffffad; op3val:0x3ff0000000000032; valaddr_reg:x16; val_offset:1272; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1272, x17, x15, 1536, x18)

inst_224:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x3ce and fm2 == 0xdffffffffffa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000031 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000030; op2val:0xbcedffffffffffa6; op3val:0x3ff0000000000031; valaddr_reg:x16; val_offset:1296; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1296, x17, x15, 1552, x18)

inst_225:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x3cd and fm2 == 0xfffffffffff60 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000028 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000050; op2val:0x3cdfffffffffff60; op3val:0x3ff0000000000028; valaddr_reg:x16; val_offset:1320; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1320, x17, x15, 1568, x18)

inst_226:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0xfffffffffff54 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000050 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000056; op2val:0x3d0fffffffffff54; op3val:0x3ff0000000000050; valaddr_reg:x16; val_offset:1344; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1344, x17, x15, 1584, x18)

inst_227:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0xfffffffffffaa and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000048 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff000000000002b; op2val:0x3d0fffffffffffaa; op3val:0x3ff0000000000048; valaddr_reg:x16; val_offset:1368; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1368, x17, x15, 1600, x18)

inst_228:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x3bffffffffffc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000053 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000003; op2val:0x3d13bffffffffffc; op3val:0x3ff0000000000053; valaddr_reg:x16; val_offset:1392; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1392, x17, x15, 1616, x18)

inst_229:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x3cf and fm2 == 0x3ffffffffffe1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000016 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000019; op2val:0x3cf3ffffffffffe1; op3val:0x3ff0000000000016; valaddr_reg:x16; val_offset:1416; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1416, x17, x15, 1632, x18)

inst_230:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000043 and fs2 == 0 and fe2 == 0x3ca and fm2 == 0xfffffffffff7a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000002 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3ff0000000000043; op2val:0x3cafffffffffff7a; op3val:0x3ff0000000000002; valaddr_reg:x16; val_offset:1440; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1440, x17, x15, 1648, x18)

inst_231:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 0 and fe2 == 0x410 and fm2 == 0x2f69f684bda13 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1b; op2val:0x4102f69f684bda13; op3val:0x5a; valaddr_reg:x16; val_offset:1464; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1464, x17, x15, 1664, x18)

inst_232:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x40f and fm2 == 0xc720b8e38e38e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x12; op2val:0x40fc720b8e38e38e; op3val:0x4d; valaddr_reg:x16; val_offset:1488; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1488, x17, x15, 1680, x18)

inst_233:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x40d and fm2 == 0x0843ef7bdef7c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3e; op2val:0x40d0843ef7bdef7c; op3val:0x1d; valaddr_reg:x16; val_offset:1512; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1512, x17, x15, 1696, x18)

inst_234:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x40d and fm2 == 0x3b1b3b13b13b1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000031 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0x40d3b1b3b13b13b1; op3val:0x31; valaddr_reg:x16; val_offset:1536; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1536, x17, x15, 1712, x18)

inst_235:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x40b and fm2 == 0x99beccccccccd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x28; op2val:0x40b99beccccccccd; op3val:0x5d; valaddr_reg:x16; val_offset:1560; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1560, x17, x15, 1728, x18)

inst_236:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x409 and fm2 == 0x819bdbdbdbdbe and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0x409819bdbdbdbdbe; op3val:0x23; valaddr_reg:x16; val_offset:1584; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1584, x17, x15, 1744, x18)

inst_237:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x40b and fm2 == 0x1164444444444 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xf; op2val:0x40b1164444444444; op3val:0x4e; valaddr_reg:x16; val_offset:1608; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1608, x17, x15, 1760, x18)

inst_238:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x407 and fm2 == 0xe243c3c3c3c3c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x44; op2val:0x407e243c3c3c3c3c; op3val:0x1a; valaddr_reg:x16; val_offset:1632; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1632, x17, x15, 1776, x18)

inst_239:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x406 and fm2 == 0xfaccccccccccd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0x406faccccccccccd; op3val:0x57; valaddr_reg:x16; val_offset:1656; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1656, x17, x15, 1792, x18)

inst_240:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x0060000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x10; op2val:0x4080060000000000; op3val:0xc; valaddr_reg:x16; val_offset:1680; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1680, x17, x15, 1808, x18)

inst_241:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x405 and fm2 == 0x6ac8590b21643 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x2e; op2val:0x4056ac8590b21643; op3val:0x4c; valaddr_reg:x16; val_offset:1704; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1704, x17, x15, 1824, x18)

inst_242:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x2a24924924925 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000027 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x38; op2val:0x4042a24924924925; op3val:0x27; valaddr_reg:x16; val_offset:1728; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1728, x17, x15, 1840, x18)

inst_243:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x1380000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x20; op2val:0x4041380000000000; op3val:0x4e; valaddr_reg:x16; val_offset:1752; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1752, x17, x15, 1856, x18)

inst_244:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb44aed44aed45 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0x401b44aed44aed45; op3val:0x2f; valaddr_reg:x16; val_offset:1776; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1776, x17, x15, 1872, x18)

inst_245:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x41; op2val:0x4010000000000000; op3val:0x4; valaddr_reg:x16; val_offset:1800; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1800, x17, x15, 1888, x18)

inst_246:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x503159721ed7e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x53; op2val:0x400503159721ed7e; op3val:0x5a; valaddr_reg:x16; val_offset:1824; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1824, x17, x15, 1904, x18)

inst_247:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000042 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0ba2e8ba2e8ba and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x42; op2val:0x4000ba2e8ba2e8ba; op3val:0x4a; valaddr_reg:x16; val_offset:1848; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1848, x17, x15, 1920, x18)

inst_248:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcf3cf3cf3cf3d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x3fecf3cf3cf3cf3d; op3val:0x19; valaddr_reg:x16; val_offset:1872; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1872, x17, x15, 1936, x18)

inst_249:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x54; op2val:0x3fe8000000000000; op3val:0x2f; valaddr_reg:x16; val_offset:1896; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1896, x17, x15, 1952, x18)

inst_250:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xca1af286bca1b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x4c; op2val:0x3fdca1af286bca1b; op3val:0x1a; valaddr_reg:x16; val_offset:1920; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1920, x17, x15, 1968, x18)

inst_251:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x89d89d89d89d9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000006 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0x3fe89d89d89d89d9; op3val:0x6; valaddr_reg:x16; val_offset:1944; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1944, x17, x15, 1984, x18)

inst_252:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf3831f3831f38 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x52; op2val:0x3fdf3831f3831f38; op3val:0x26; valaddr_reg:x16; val_offset:1968; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1968, x17, x15, 2000, x18)

inst_253:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1a; op2val:0x400c000000000000; op3val:0x5a; valaddr_reg:x16; val_offset:1992; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 1992, x17, x15, 2016, x18)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_254:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x411 and fm2 == 0x3b11d3b13b13b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000061 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xd; op2val:0xc113b11d3b13b13b; op3val:0x61; valaddr_reg:x16; val_offset:2016; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 2016, x17, x15, 0, x18)
addi x16,x16,2040

inst_255:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000039 and fs2 == 1 and fe2 == 0x40e and fm2 == 0x1f6d1f7047dc1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x39; op2val:0xc0e1f6d1f7047dc1; op3val:0x5a; valaddr_reg:x16; val_offset:0; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 0, x17, x15, 16, x18)

inst_256:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x40d and fm2 == 0x351f521cfb2b8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000021 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x35; op2val:0xc0d351f521cfb2b8; op3val:0x21; valaddr_reg:x16; val_offset:24; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 24, x17, x15, 32, x18)

inst_257:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x40e and fm2 == 0x554d800000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0xc; op2val:0xc0e554d800000000; op3val:0x2f; valaddr_reg:x16; val_offset:48; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 48, x17, x15, 48, x18)

inst_258:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x40b and fm2 == 0x29d7904a7904a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x37; op2val:0xc0b29d7904a7904a; op3val:0x2b; valaddr_reg:x16; val_offset:72; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 72, x17, x15, 64, x18)

inst_259:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x74545d1745d17 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xc0974545d1745d17; op3val:0xc; valaddr_reg:x16; val_offset:96; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 96, x17, x15, 80, x18)

inst_260:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x810a8a8a8a8a9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0xc08810a8a8a8a8a9; op3val:0x4f; valaddr_reg:x16; val_offset:120; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 120, x17, x15, 96, x18)

inst_261:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x407 and fm2 == 0x5c3bea3677d47 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000022 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc075c3bea3677d47; op3val:0x22; valaddr_reg:x16; val_offset:144; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 144, x17, x15, 112, x18)

inst_262:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xcafc64f52edf9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x47; op2val:0xc06cafc64f52edf9; op3val:0x5a; valaddr_reg:x16; val_offset:168; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 168, x17, x15, 128, x18)

inst_263:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x407 and fm2 == 0x44c28f5c28f5c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x19; op2val:0xc0744c28f5c28f5c; op3val:0x49; valaddr_reg:x16; val_offset:192; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 192, x17, x15, 144, x18)

inst_264:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x732e8ba2e8ba3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x58; op2val:0xc04732e8ba2e8ba3; op3val:0xd; valaddr_reg:x16; val_offset:216; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 216, x17, x15, 160, x18)

inst_265:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xcaaaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x45; op2val:0xc03caaaaaaaaaaab; op3val:0x46; valaddr_reg:x16; val_offset:240; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 240, x17, x15, 176, x18)

inst_266:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4a8d9df51b3bf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000035 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5e; op2val:0xc024a8d9df51b3bf; op3val:0x35; valaddr_reg:x16; val_offset:264; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 264, x17, x15, 192, x18)

inst_267:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xedb6db6db6db7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0xc01edb6db6db6db7; op3val:0x1a; valaddr_reg:x16; val_offset:288; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 288, x17, x15, 208, x18)

inst_268:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x405 and fm2 == 0x26aaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3; op2val:0xc0526aaaaaaaaaab; op3val:0x23; valaddr_reg:x16; val_offset:312; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 312, x17, x15, 224, x18)

inst_269:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6a2576a2576a2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000063 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x29; op2val:0xbfe6a2576a2576a2; op3val:0x63; valaddr_reg:x16; val_offset:336; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 336, x17, x15, 240, x18)

inst_270:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x58ed2308158ed and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x5f; op2val:0xbfc58ed2308158ed; op3val:0x30; valaddr_reg:x16; val_offset:360; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 360, x17, x15, 256, x18)

inst_271:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14fbcda3ac10d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3d; op2val:0x3ff14fbcda3ac10d; op3val:0x62; valaddr_reg:x16; val_offset:384; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 384, x17, x15, 272, x18)

inst_272:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6969696969697 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x55; op2val:0x3fe6969696969697; op3val:0x4c; valaddr_reg:x16; val_offset:408; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 408, x17, x15, 288, x18)

inst_273:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x6000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x1; op2val:0x4026000000000000; op3val:0x13; valaddr_reg:x16; val_offset:432; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 432, x17, x15, 304, x18)

inst_274:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x3f9 and fm2 == 0xe1e1e1e1e1e1e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x22; op2val:0x3f9e1e1e1e1e1e1e; op3val:0x5; valaddr_reg:x16; val_offset:456; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 456, x17, x15, 320, x18)

inst_275:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8618618618618 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x3f; op2val:0x3ff8618618618618; op3val:0x62; valaddr_reg:x16; val_offset:480; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 480, x17, x15, 336, x18)

inst_276:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000035 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000031; op2val:0x7ff0000000000000; op3val:0x7fe0000000000035; valaddr_reg:x16; val_offset:504; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 504, x17, x15, 352, x18)

inst_277:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000019 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000000c; op2val:0x7ff0000000000000; op3val:0x7fe0000000000019; valaddr_reg:x16; val_offset:528; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 528, x17, x15, 368, x18)

inst_278:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000053 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000001e; op2val:0x7ff0000000000000; op3val:0x7fe0000000000053; valaddr_reg:x16; val_offset:552; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 552, x17, x15, 384, x18)

inst_279:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000035 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000050 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000035; op2val:0x7ff0000000000000; op3val:0x7fe0000000000050; valaddr_reg:x16; val_offset:576; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 576, x17, x15, 400, x18)

inst_280:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000b and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000017; op2val:0x7ff0000000000000; op3val:0x7fe000000000000b; valaddr_reg:x16; val_offset:600; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 600, x17, x15, 416, x18)

inst_281:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001d and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000002f; op2val:0x7ff0000000000000; op3val:0x7fe000000000001d; valaddr_reg:x16; val_offset:624; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 624, x17, x15, 432, x18)

inst_282:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000057 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe000000000004c; op2val:0x7ff0000000000000; op3val:0x7fe0000000000057; valaddr_reg:x16; val_offset:648; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 648, x17, x15, 448, x18)

inst_283:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000025 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000030 and rm_val == 0  
// opcode: fnmadd.d ; op1:f10; op2:f11; op3:f12; dest:f13; op1val:0x7fe0000000000025; op2val:0x7ff0000000000000; op3val:0x7fe0000000000030; valaddr_reg:x16; val_offset:672; rmval:0x0; testreg:x18
TEST_FPR4_OP(fnmadd.d, f13, f10, f11, f12, 0x0, 0, x16, 672, x17, x15, 464, x18)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
.dword 0x4a
.dword 0x3fc14c1bacf914c2
.dword 0xb
.dword 0x7fe0000000000031
.dword 0x7fe0000000000031
.dword 0x7fe0000000000031
.dword 0x7fe000000000000c
.dword 0x7ff0000000000000
.dword 0x7fe000000000000c
.dword 0x7fe000000000001e
.dword 0x7ff0000000000000
.dword 0x7fe000000000001e
.dword 0x7fe0000000000050
.dword 0x7ff0000000000000
.dword 0x7fe0000000000063
.dword 0x7fe0000000000035
.dword 0x7ff0000000000000
.dword 0x7ff0000000000000
.dword 0x7fe0000000000017
.dword 0x7fe0000000000017
.dword 0x7fe000000000000b
.dword 0x7fe0000000000001
.dword 0x7ff0000000000000
.dword 0x7fe0000000000028
.dword 0x7fe000000000002f
.dword 0x7fe000000000002f
.dword 0x7fe000000000001d
.dword 0x7fe000000000004c
.dword 0x7fe000000000004c
.dword 0x7fe000000000004c
.dword 0x7fe0000000000025
.dword 0x7ff0000000000000
.dword 0x7ff0000000000000
.dword 0x7fe0000000000029
.dword 0x7ff0000000000000
.dword 0x7fe0000000000012
.dword 0x7fe0000000000036
.dword 0x7ff0000000000000
.dword 0x7fe0000000000021
.dword 0x7fe0000000000002
.dword 0x7ff0000000000000
.dword 0x7fe000000000002c
.dword 0x7fe0000000000063
.dword 0x7ff0000000000000
.dword 0x7fe000000000003b
.dword 0x7fe0000000000032
.dword 0x7ff0000000000000
.dword 0x7fe0000000000014
.dword 0x7fe000000000001c
.dword 0x7ff0000000000000
.dword 0x7fe0000000000053
.dword 0x7fe0000000000046
.dword 0x7ff0000000000000
.dword 0x7fe000000000003d
.dword 0x7fe0000000000063
.dword 0x7ff0000000000000
.dword 0x7fe0000000000059
.dword 0x7fe000000000003f
.dword 0x7ff0000000000000
.dword 0x7fe0000000000044
.dword 0x7fe0000000000033
.dword 0x7ff0000000000000
.dword 0x7fe000000000003d
.dword 0x7fe0000000000014
.dword 0x7ff0000000000000
.dword 0x7fe000000000004c
.dword 0x7fe0000000000015
.dword 0x7ff0000000000000
.dword 0x7fe0000000000010
.dword 0x7fe0000000000001
.dword 0x7ff0000000000000
.dword 0x7fe0000000000042
.dword 0x7fe000000000004a
.dword 0xbfefffffff7fff4e
.dword 0x7fe000000000000e
.dword 0x7fe000000000000e
.dword 0xbfefffffffbfffb4
.dword 0x7fe0000000000017
.dword 0x7fe0000000000062
.dword 0xbfefffffffdffec6
.dword 0x7fe000000000003a
.dword 0x7fe0000000000005
.dword 0xbfefffffffefffc2
.dword 0x7fe0000000000019
.dword 0x7fe0000000000012
.dword 0xbfeffffffff7ff8c
.dword 0x7fe0000000000027
.dword 0x7fe0000000000023
.dword 0xbfeffffffffbff76
.dword 0x7fe0000000000021
.dword 0x7fe0000000000051
.dword 0xbfeffffffffdfee0
.dword 0x7fe000000000003e
.dword 0x7fe0000000000049
.dword 0xbfeffffffffefee6
.dword 0x7fe0000000000043
.dword 0x7fe000000000004d
.dword 0xbfefffffffff7ef6
.dword 0x7fe0000000000037
.dword 0x7fe0000000000055
.dword 0xbfefffffffffbef0
.dword 0x7fe0000000000032
.dword 0x7fe0000000000018
.dword 0xbfefffffffffdf8e
.dword 0x7fe0000000000020
.dword 0x7fe0000000000036
.dword 0xbfefffffffffef06
.dword 0x7fe0000000000046
.dword 0x7fe0000000000011
.dword 0xbfeffffffffff7ba
.dword 0x7fe0000000000011
.dword 0x7fe0000000000023
.dword 0xbfeffffffffffb7c
.dword 0x7fe000000000001e
.dword 0x7fe000000000004c
.dword 0xbfeffffffffffcc8
.dword 0x7fe000000000004f
.dword 0x7fe000000000000c
.dword 0xbfeffffffffffe38
.dword 0x7fe0000000000057
.dword 0x7fe000000000003c
.dword 0xbfeffffffffffec2
.dword 0x7fe0000000000022
.dword 0x7fe000000000003f
.dword 0xbfefffffffffff3e
.dword 0x7fe0000000000001
.dword 0x7fe000000000002c
.dword 0xbfefffffffffff74
.dword 0x7fe0000000000009
.dword 0x7fe0000000000004
.dword 0xbfefffffffffffe2
.dword 0x7fe0000000000002
.dword 0x7fe000000000002d
.dword 0xbfefffffffffff78
.dword 0x7fe0000000000012
.dword 0x7fe0000000000058
.dword 0xbfefffffffffff3c
.dword 0x7fe0000000000007
.dword 0x7fe000000000002c
.dword 0xbfefffffffffff34
.dword 0x7fe0000000000038
.dword 0x1000000000002f
.dword 0x40000000001ffffd
.dword 0x10000000000059
.dword 0x10000000000062
.dword 0x40000000000fffa0
.dword 0x10000000000004
.dword 0x1000000000000f
.dword 0x400000000007ffff
.dword 0x1000000000001d
.dword 0x1000000000002f
.dword 0x400000000003fffd
.dword 0x10000000000059
.dword 0x10000000000005
.dword 0x4000000000020013
.dword 0x1000000000002f
.dword 0x1000000000004d
.dword 0x400000000000ffdd
.dword 0x10000000000053
.dword 0x1000000000000c
.dword 0x400000000000801a
.dword 0x1000000000004b
.dword 0x1000000000002b
.dword 0x4000000000003ff7
.dword 0x10000000000043
.dword 0x1000000000005b
.dword 0x4000000000001fd1
.dword 0x10000000000058
.dword 0x1000000000005e
.dword 0x4000000000000fd2
.dword 0x10000000000060
.dword 0x10000000000021
.dword 0x4000000000000801
.dword 0x10000000000044
.dword 0x1000000000004c
.dword 0x40000000000003b5
.dword 0x10000000000002
.dword 0x1000000000001c
.dword 0x40000000000001f6
.dword 0x10000000000024
.dword 0x10000000000045
.dword 0x40000000000000e5
.dword 0x10000000000053
.dword 0x1000000000001a
.dword 0x4000000000000090
.dword 0x10000000000054
.dword 0x10000000000039
.dword 0x4000000000000016
.dword 0x1000000000001e
.dword 0x10000000000025
.dword 0x400000000000000b
.dword 0x10000000000021
.dword 0x10000000000054
.dword 0x3fffffffffffffd4
.dword 0x1000000000005b
.dword 0x1000000000005e
.dword 0x3fffffffffffff8c
.dword 0x10000000000037
.dword 0x10000000000061
.dword 0x3fffffffffffff9e
.dword 0x10000000000057
.dword 0x10000000000058
.dword 0x3fffffffffffff58
.dword 0x10000000000004
.dword 0x10000000000017
.dword 0x3fffffffffffffda
.dword 0x10000000000007
.dword 0x1000000000000f
.dword 0x400000000000001f
.dword 0x1000000000005a
.dword 0x10000000000039
.dword 0xbe0ffff7ffffff8e
.dword 0x10000000000010
.dword 0x10000000000016
.dword 0xbdffffaaffffffd4
.dword 0x10000000000055
.dword 0x1000000000004a
.dword 0xbdefffefffffff6c
.dword 0x10000000000008
.dword 0x1000000000000a
.dword 0xbddffe8bffffffec
.dword 0x1000000000005d
.dword 0x1000000000000c
.dword 0xbdcffe17ffffffe8
.dword 0x1000000000003d
.dword 0x10000000000059
.dword 0xbdbffd9fffffff4e
.dword 0x10000000000026
.dword 0x10000000000062
.dword 0xbdaff6dfffffff3c
.dword 0x10000000000049
.dword 0x10000000000035
.dword 0xbd9ff8bfffffff96
.dword 0x1000000000001d
.dword 0x10000000000046
.dword 0xbd8ff17fffffff74
.dword 0x1000000000001d
.dword 0x10000000000005
.dword 0xbd7ff7fffffffff6
.dword 0x10000000000008
.dword 0x10000000000030
.dword 0xbd6f65ffffffffa2
.dword 0x1000000000004d
.dword 0x1000000000000d
.dword 0xbd5ea3ffffffffe7
.dword 0x10000000000057
.dword 0x1000000000005c
.dword 0xbd4dcfffffffff55
.dword 0x10000000000046
.dword 0x1000000000000f
.dword 0xbd3abfffffffffe7
.dword 0x10000000000054
.dword 0x10000000000062
.dword 0xbd2effffffffff42
.dword 0x10000000000008
.dword 0x10000000000006
.dword 0xbd10bffffffffffa
.dword 0x1000000000003d
.dword 0x10000000000008
.dword 0xbd0efffffffffff1
.dword 0x10000000000002
.dword 0x10000000000032
.dword 0xbcf5ffffffffffbb
.dword 0x1000000000000a
.dword 0x10000000000051
.dword 0x3cbfffffffffff5e
.dword 0x10000000000012
.dword 0x10000000000016
.dword 0x3d143fffffffffe4
.dword 0x10000000000059
.dword 0x10000000000018
.dword 0x3cefffffffffffd0
.dword 0x10000000000014
.dword 0x10000000000023
.dword 0x3d14ffffffffffd2
.dword 0x10000000000056
.dword 0x10000000000060
.dword 0x3d077fffffffff73
.dword 0x10000000000030
.dword 0x53
.dword 0x42c8acb90f094130
.dword 0x46
.dword 0x5c
.dword 0x42c642c858de9bfc
.dword 0x1e
.dword 0x55
.dword 0x42c818181800001a
.dword 0x12
.dword 0x44
.dword 0x42ce1e1e1e0f0f93
.dword 0x47
.dword 0x2
.dword 0x431ffffffff80064
.dword 0x33
.dword 0x44
.dword 0x42ce1e1e1e1a5ac4
.dword 0x39
.dword 0x2a
.dword 0x42d8618618600049
.dword 0x31
.dword 0x19
.dword 0x42e47ae147ad7120
.dword 0x62
.dword 0x49
.dword 0x42cc0e07038150fe
.dword 0x32
.dword 0x4a
.dword 0x42cbacf914c18376
.dword 0x1
.dword 0x1f
.dword 0x42e0842108420049
.dword 0x48
.dword 0x61
.dword 0x42c51d07eae2edbb
.dword 0x29
.dword 0x59
.dword 0x42c702e05c0b7bcc
.dword 0x15
.dword 0x11
.dword 0x42ee1e1e1e1e1abe
.dword 0x36
.dword 0x49
.dword 0x42cc0e070381bfbf
.dword 0x5c
.dword 0x1d
.dword 0x42e1a7b9611a7b6b
.dword 0x5a
.dword 0x32
.dword 0x42d47ae147ae144d
.dword 0x1d
.dword 0x41
.dword 0x42cf81f81f81f86e
.dword 0x49
.dword 0x5f
.dword 0x42c58ed2308158f1
.dword 0x14
.dword 0x18
.dword 0x42e555555555557b
.dword 0x25
.dword 0x5b
.dword 0x42c681681681682c
.dword 0x14
.dword 0x18
.dword 0x42e55555555555ac
.dword 0x44
.dword 0x43
.dword 0x42ce9131abf0b76b
.dword 0x4
.dword 0xa
.dword 0xc2f99999993332ea
.dword 0x2d
.dword 0xa
.dword 0xc2f999999966664a
.dword 0x11
.dword 0x40
.dword 0xc2cfffffffdfff5a
.dword 0x52
.dword 0x3c
.dword 0xc2d1111111088821
.dword 0x60
.dword 0x47
.dword 0xc2ccd85688fc64d3
.dword 0x12
.dword 0xf
.dword 0xc2f11111110eeeb6
.dword 0x34
.dword 0x5e
.dword 0xc2c5c9882b91b347
.dword 0x57
.dword 0xa
.dword 0xc2f999999998ccaa
.dword 0x15
.dword 0x38
.dword 0xc2d249249248db3a
.dword 0x2c
.dword 0x1b
.dword 0xc2e2f684bda1090f
.dword 0x5a
.dword 0x62
.dword 0xc2c4e5e0a72eefd4
.dword 0x61
.dword 0x7
.dword 0xc302492492491b00
.dword 0x5f
.dword 0x30
.dword 0xc2d5555555554ff8
.dword 0x5
.dword 0x17
.dword 0xc2e642c8590b1e5d
.dword 0x2c
.dword 0x5
.dword 0xc309999999999766
.dword 0x5f
.dword 0x45
.dword 0xc2cdae6076b9803a
.dword 0x60
.dword 0x52
.dword 0xc2c8f9c18f9c1864
.dword 0x1f
.dword 0x20
.dword 0xc2dfffffffffff22
.dword 0x4e
.dword 0x5c
.dword 0xc2c642c8590b213d
.dword 0xb
.dword 0x30
.dword 0xc2d5555555555543
.dword 0x5
.dword 0x38
.dword 0xc2d249249249244b
.dword 0x39
.dword 0x24
.dword 0xc2dc71c71c71c6ab
.dword 0x3d
.dword 0x24
.dword 0xc2dc71c71c71c6d9
.dword 0x24
.dword 0xb
.dword 0x411745e9745d1746
.dword 0x41
.dword 0x2f
.dword 0x40e5c98c415c9883
.dword 0x5
.dword 0x2f
.dword 0x40d5c9bbea3677d4
.dword 0x25
.dword 0x9
.dword 0x40ec7251c71c71c7
.dword 0x26
.dword 0x5c
.dword 0x40a6446f4de9bd38
.dword 0x4b
.dword 0x24
.dword 0x40ac75471c71c71c
.dword 0x3e
.dword 0x3a
.dword 0x4091acc234f72c23
.dword 0x48
.dword 0x3e
.dword 0x40808b9ce739ce74
.dword 0x39
.dword 0x19
.dword 0x40848d70a3d70a3d
.dword 0x39
.dword 0x52
.dword 0x40590895da895da9
.dword 0x12
.dword 0x59
.dword 0x404708a114228451
.dword 0x3
.dword 0x3a
.dword 0x4042372c234f72c2
.dword 0x40
.dword 0x22
.dword 0x40404f0f0f0f0f0f
.dword 0x54
.dword 0x50
.dword 0x401db33333333333
.dword 0x51
.dword 0xb
.dword 0x403945d1745d1746
.dword 0x15
.dword 0x11
.dword 0x4028787878787878
.dword 0x4f
.dword 0x5a
.dword 0x3ff82d82d82d82d8
.dword 0x47
.dword 0x51
.dword 0x3fdd3c0ca4587e6b
.dword 0x4
.dword 0x5d
.dword 0x3fd1e4791e4791e4
.dword 0x9
.dword 0x3e
.dword 0x3ff1ce739ce739ce
.dword 0x3c
.dword 0x6
.dword 0x402d555555555555
.dword 0x53
.dword 0x5c
.dword 0x3fc7a6f4de9bd37a
.dword 0xe
.dword 0x56
.dword 0x3fc3594d653594d6
.dword 0xd
.dword 0x5
.dword 0xc12999799999999a
.dword 0x51
.dword 0x29
.dword 0xc0e8f9b3831f3832
.dword 0x13
.dword 0x20
.dword 0xc0dfff6600000000
.dword 0x4e
.dword 0x58
.dword 0xc0b744e8ba2e8ba3
.dword 0x51
.dword 0x2f
.dword 0xc0b5c92620ae4c41
.dword 0x13
.dword 0xd
.dword 0xc0c3af6c4ec4ec4f
.dword 0x30
.dword 0x3d
.dword 0xc090c78a7de6d1d6
.dword 0x1e
.dword 0x3f
.dword 0xc0803fdf7df7df7e
.dword 0xa
.dword 0x37
.dword 0xc0728ac37dac37db
.dword 0x44
.dword 0x4f
.dword 0xc059ebbf309b8b57
.dword 0x2
.dword 0x14
.dword 0xc069633333333333
.dword 0x23
.dword 0x8
.dword 0xc06fa00000000000
.dword 0x19
.dword 0x40
.dword 0xc02da80000000000
.dword 0x4c
.dword 0x30
.dword 0xc0236aaaaaaaaaab
.dword 0x2f
.dword 0x58
.dword 0xbffe000000000000
.dword 0x5c
.dword 0x49
.dword 0xbff8fc7e3f1f8fc8
.dword 0xf
.dword 0x4
.dword 0x400c000000000000
.dword 0x4f
.dword 0x8
.dword 0xbff2000000000000
.dword 0x18
.dword 0x50
.dword 0x3fe0666666666666
.dword 0x3a
.dword 0x48
.dword 0xbfbc71c71c71c71c
.dword 0x1
.dword 0x15
.dword 0x3ff9249249249249
.dword 0x26
.dword 0x3f
.dword 0x3ff71c71c71c71c7
.dword 0x5e
.dword 0x53
.dword 0x3fe3a9a3784a062b
.dword 0x33
.dword 0x3f80000000000023
.dword 0x40000000001ffff1
.dword 0x3f80000000000029
.dword 0x3f80000000000059
.dword 0x40000000000fffce
.dword 0x3f8000000000004e
.dword 0x3f80000000000050
.dword 0x400000000007ffc8
.dword 0x3f80000000000031
.dword 0x3f80000000000055
.dword 0x400000000003ffb5
.dword 0x3f80000000000015
.dword 0x3f8000000000002a
.dword 0x400000000001ffee
.dword 0x3f8000000000002f
.dword 0x3f80000000000052
.dword 0x400000000000ffcc
.dword 0x3f8000000000003c
.dword 0x3f80000000000040
.dword 0x4000000000007fd4
.dword 0x3f80000000000028
.dword 0x3f8000000000005d
.dword 0x4000000000003fbb
.dword 0x3f80000000000031
.dword 0x3f8000000000003f
.dword 0x4000000000001fcb
.dword 0x3f80000000000013
.dword 0x3f80000000000055
.dword 0x4000000000000fca
.dword 0x3f8000000000003e
.dword 0x3f8000000000004e
.dword 0x40000000000007d0
.dword 0x3f8000000000003d
.dword 0x3f8000000000003f
.dword 0x40000000000003d3
.dword 0x3f80000000000023
.dword 0x3f80000000000036
.dword 0x40000000000001f2
.dword 0x3f8000000000004f
.dword 0x3f80000000000021
.dword 0x40000000000000f9
.dword 0x3f80000000000035
.dword 0x3f8000000000002b
.dword 0x4000000000000077
.dword 0x3f80000000000043
.dword 0x3f80000000000041
.dword 0x400000000000001c
.dword 0x3f8000000000003a
.dword 0x3f80000000000019
.dword 0x4000000000000017
.dword 0x3f80000000000021
.dword 0x3f8000000000004c
.dword 0x3fffffffffffffb8
.dword 0x3f8000000000002f
.dword 0x3f80000000000010
.dword 0x4000000000000008
.dword 0x3f80000000000021
.dword 0x3f80000000000003
.dword 0x4000000000000023
.dword 0x3f80000000000045
.dword 0x3f80000000000017
.dword 0x3fffffffffffffda
.dword 0x3f80000000000003
.dword 0x3f8000000000003f
.dword 0x3fffffffffffffe2
.dword 0x3f8000000000005d
.dword 0x3f80000000000023
.dword 0x3ffffffffffffff6
.dword 0x3f8000000000003a
.dword 0x3ff0000000000060
.dword 0xbe0fffd3ffffff40
.dword 0x3ff0000000000058
.dword 0x3ff000000000000b
.dword 0xbdffffe6ffffffea
.dword 0x3ff0000000000019
.dword 0x3ff000000000005b
.dword 0xbdefff95ffffff4a
.dword 0x3ff0000000000035
.dword 0x3ff000000000003d
.dword 0xbddfff63ffffff86
.dword 0x3ff0000000000027
.dword 0x3ff0000000000043
.dword 0xbdcffe47ffffff7a
.dword 0x3ff0000000000037
.dword 0x3ff0000000000031
.dword 0xbdbfff5fffffff9e
.dword 0x3ff000000000000a
.dword 0x3ff000000000003a
.dword 0xbdaff8bfffffff8c
.dword 0x3ff000000000003a
.dword 0x3ff000000000004e
.dword 0xbd9fea7fffffff64
.dword 0x3ff0000000000056
.dword 0x3ff0000000000020
.dword 0xbd8ff9ffffffffc0
.dword 0x3ff000000000000c
.dword 0x3ff000000000000d
.dword 0xbd7fc6ffffffffe6
.dword 0x3ff0000000000039
.dword 0x3ff0000000000060
.dword 0xbd6f99ffffffff42
.dword 0x3ff0000000000033
.dword 0x3ff0000000000037
.dword 0xbd5ecbffffffff96
.dword 0x3ff000000000004d
.dword 0x3ff0000000000007
.dword 0xbd4f3ffffffffff2
.dword 0x3ff0000000000018
.dword 0x3ff0000000000057
.dword 0xbd3c0fffffffff67
.dword 0x3ff000000000003f
.dword 0x3ff0000000000026
.dword 0xbd2ddfffffffffb9
.dword 0x3ff0000000000011
.dword 0x3ff0000000000044
.dword 0xbd137fffffffffad
.dword 0x3ff0000000000032
.dword 0x3ff0000000000030
.dword 0xbcedffffffffffa6
.dword 0x3ff0000000000031
.dword 0x3ff0000000000050
.dword 0x3cdfffffffffff60
.dword 0x3ff0000000000028
.dword 0x3ff0000000000056
.dword 0x3d0fffffffffff54
.dword 0x3ff0000000000050
.dword 0x3ff000000000002b
.dword 0x3d0fffffffffffaa
.dword 0x3ff0000000000048
.dword 0x3ff0000000000003
.dword 0x3d13bffffffffffc
.dword 0x3ff0000000000053
.dword 0x3ff0000000000019
.dword 0x3cf3ffffffffffe1
.dword 0x3ff0000000000016
.dword 0x3ff0000000000043
.dword 0x3cafffffffffff7a
.dword 0x3ff0000000000002
.dword 0x1b
.dword 0x4102f69f684bda13
.dword 0x5a
.dword 0x12
.dword 0x40fc720b8e38e38e
.dword 0x4d
.dword 0x3e
.dword 0x40d0843ef7bdef7c
.dword 0x1d
.dword 0x1a
.dword 0x40d3b1b3b13b13b1
.dword 0x31
.dword 0x28
.dword 0x40b99beccccccccd
.dword 0x5d
.dword 0x55
.dword 0x409819bdbdbdbdbe
.dword 0x23
.dword 0xf
.dword 0x40b1164444444444
.dword 0x4e
.dword 0x44
.dword 0x407e243c3c3c3c3c
.dword 0x1a
.dword 0x41
.dword 0x406faccccccccccd
.dword 0x57
.dword 0x10
.dword 0x4080060000000000
.dword 0xc
.dword 0x2e
.dword 0x4056ac8590b21643
.dword 0x4c
.dword 0x38
.dword 0x4042a24924924925
.dword 0x27
.dword 0x20
.dword 0x4041380000000000
.dword 0x4e
.dword 0x52
.dword 0x401b44aed44aed45
.dword 0x2f
.dword 0x41
.dword 0x4010000000000000
.dword 0x4
.dword 0x53
.dword 0x400503159721ed7e
.dword 0x5a
.dword 0x42
.dword 0x4000ba2e8ba2e8ba
.dword 0x4a
.dword 0x3f
.dword 0x3fecf3cf3cf3cf3d
.dword 0x19
.dword 0x54
.dword 0x3fe8000000000000
.dword 0x2f
.dword 0x4c
.dword 0x3fdca1af286bca1b
.dword 0x1a
.dword 0xd
.dword 0x3fe89d89d89d89d9
.dword 0x6
.dword 0x52
.dword 0x3fdf3831f3831f38
.dword 0x26
.dword 0x1a
.dword 0x400c000000000000
.dword 0x5a
.dword 0xd
.dword 0xc113b11d3b13b13b
.dword 0x61
.dword 0x39
.dword 0xc0e1f6d1f7047dc1
.dword 0x5a
.dword 0x35
.dword 0xc0d351f521cfb2b8
.dword 0x21
.dword 0xc
.dword 0xc0e554d800000000
.dword 0x2f
.dword 0x37
.dword 0xc0b29d7904a7904a
.dword 0x2b
.dword 0x58
.dword 0xc0974545d1745d17
.dword 0xc
.dword 0x55
.dword 0xc08810a8a8a8a8a9
.dword 0x4f
.dword 0x5e
.dword 0xc075c3bea3677d47
.dword 0x22
.dword 0x47
.dword 0xc06cafc64f52edf9
.dword 0x5a
.dword 0x19
.dword 0xc0744c28f5c28f5c
.dword 0x49
.dword 0x58
.dword 0xc04732e8ba2e8ba3
.dword 0xd
.dword 0x45
.dword 0xc03caaaaaaaaaaab
.dword 0x46
.dword 0x5e
.dword 0xc024a8d9df51b3bf
.dword 0x35
.dword 0x3f
.dword 0xc01edb6db6db6db7
.dword 0x1a
.dword 0x3
.dword 0xc0526aaaaaaaaaab
.dword 0x23
.dword 0x29
.dword 0xbfe6a2576a2576a2
.dword 0x63
.dword 0x5f
.dword 0xbfc58ed2308158ed
.dword 0x30
.dword 0x3d
.dword 0x3ff14fbcda3ac10d
.dword 0x62
.dword 0x55
.dword 0x3fe6969696969697
.dword 0x4c
.dword 0x1
.dword 0x4026000000000000
.dword 0x13
.dword 0x22
.dword 0x3f9e1e1e1e1e1e1e
.dword 0x5
.dword 0x3f
.dword 0x3ff8618618618618
.dword 0x62
.dword 0x7fe0000000000031
.dword 0x7ff0000000000000
.dword 0x7fe0000000000035
.dword 0x7fe000000000000c
.dword 0x7ff0000000000000
.dword 0x7fe0000000000019
.dword 0x7fe000000000001e
.dword 0x7ff0000000000000
.dword 0x7fe0000000000053
.dword 0x7fe0000000000035
.dword 0x7ff0000000000000
.dword 0x7fe0000000000050
.dword 0x7fe0000000000017
.dword 0x7ff0000000000000
.dword 0x7fe000000000000b
.dword 0x7fe000000000002f
.dword 0x7ff0000000000000
.dword 0x7fe000000000001d
.dword 0x7fe000000000004c
.dword 0x7ff0000000000000
.dword 0x7fe0000000000057
.dword 0x7fe0000000000025
.dword 0x7ff0000000000000
.dword 0x7fe0000000000030
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 254*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 60*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
