
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.6
// timestamp : Mon Sep 20 15:10:16 2021 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /scratch/compliance_fd/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV64D/rv64d_fsd.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2021. IIT Madras. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fsd instruction of the RISC-V FD extension for the fsd-align covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFD")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",d_fsd-align)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x16,test_fp)
RVTEST_SIGBASE(x15,signature_x15_1)

inst_0:// rs1==x21, rs2==f0, ea_align == 0 and (imm_val % 4) == 0, imm_val > 0
// opcode: fsd; op1:x21; op2:f0; op2val:0x40000; immval:0x40; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x21,f0,0x40000,0x40,0,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_1:// rs1==x11, rs2==f18, ea_align == 0 and (imm_val % 4) == 1, 
// opcode: fsd; op1:x11; op2:f18; op2val:0x2000000000000000; immval:0x5; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x11,f18,0x2000000000000000,0x5,16,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_2:// rs1==x25, rs2==f30, ea_align == 0 and (imm_val % 4) == 2, imm_val < 0
// opcode: fsd; op1:x25; op2:f30; op2val:-0x400000000000001; immval:-0x556; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x25,f30,-0x400000000000001,-0x556,32,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_3:// rs1==x9, rs2==f14, ea_align == 0 and (imm_val % 4) == 3, 
// opcode: fsd; op1:x9; op2:f14; op2val:-0x801; immval:-0x1; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x9,f14,-0x801,-0x1,48,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_4:// rs1==x3, rs2==f16, imm_val == 0, 
// opcode: fsd; op1:x3; op2:f16; op2val:0x4000000000000000; immval:0x0; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x3,f16,0x4000000000000000,0x0,64,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_5:// rs1==x14, rs2==f1, 
// opcode: fsd; op1:x14; op2:f1; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x14,f1,0x0,-0x800,80,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_6:// rs1==x19, rs2==f17, 
// opcode: fsd; op1:x19; op2:f17; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x19,f17,0x0,-0x800,96,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_7:// rs1==x29, rs2==f10, 
// opcode: fsd; op1:x29; op2:f10; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x29,f10,0x0,-0x800,112,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_8:// rs1==x1, rs2==f20, 
// opcode: fsd; op1:x1; op2:f20; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x1,f20,0x0,-0x800,128,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_9:// rs1==x18, rs2==f19, 
// opcode: fsd; op1:x18; op2:f19; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x22,0,x18,f19,0x0,-0x800,144,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_10:// rs1==x27, rs2==f15, 
// opcode: fsd; op1:x27; op2:f15; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x27,f15,0x0,-0x800,160,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_11:// rs1==x30, rs2==f25, 
// opcode: fsd; op1:x30; op2:f25; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x30,f25,0x0,-0x800,176,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_12:// rs1==x12, rs2==f22, 
// opcode: fsd; op1:x12; op2:f22; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x12,f22,0x0,-0x800,192,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_13:// rs1==x24, rs2==f11, 
// opcode: fsd; op1:x24; op2:f11; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x24,f11,0x0,-0x800,208,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_14:// rs1==x13, rs2==f2, 
// opcode: fsd; op1:x13; op2:f2; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x13,f2,0x0,-0x800,224,fsd,0,x17)
RVTEST_VALBASEUPD(x16)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_0)

inst_15:// rs1==x15, rs2==f3, 
// opcode: fsd; op1:x15; op2:f3; op2val:0x0; immval:-0x800; align:0; flagreg:x21;
TEST_STORE_F(x19,x18,0,x15,f3,0x0,-0x800,0,fsd,0,x21)
RVTEST_VALBASEUPD(x20)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_2)

inst_16:// rs1==x7, rs2==f27, 
// opcode: fsd; op1:x7; op2:f27; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x7,f27,0x0,-0x800,0,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_17:// rs1==x2, rs2==f9, 
// opcode: fsd; op1:x2; op2:f9; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x2,f9,0x0,-0x800,16,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_18:// rs1==x10, rs2==f6, 
// opcode: fsd; op1:x10; op2:f6; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x10,f6,0x0,-0x800,32,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_19:// rs1==x28, rs2==f23, 
// opcode: fsd; op1:x28; op2:f23; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x28,f23,0x0,-0x800,48,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_20:// rs1==x4, rs2==f5, 
// opcode: fsd; op1:x4; op2:f5; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x4,f5,0x0,-0x800,64,fsd,0,x17)
RVTEST_VALBASEUPD(x16)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_1)

inst_21:// rs1==x16, rs2==f28, 
// opcode: fsd; op1:x16; op2:f28; op2val:0x0; immval:-0x800; align:0; flagreg:x21;
TEST_STORE_F(x19,x18,0,x16,f28,0x0,-0x800,0,fsd,0,x21)
RVTEST_VALBASEUPD(x20)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_3)

inst_22:// rs1==x26, rs2==f26, 
// opcode: fsd; op1:x26; op2:f26; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x26,f26,0x0,-0x800,0,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_23:// rs1==x22, rs2==f21, 
// opcode: fsd; op1:x22; op2:f21; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x22,f21,0x0,-0x800,16,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_24:// rs1==x23, rs2==f12, 
// opcode: fsd; op1:x23; op2:f12; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x23,f12,0x0,-0x800,32,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_25:// rs1==x31, rs2==f13, 
// opcode: fsd; op1:x31; op2:f13; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x31,f13,0x0,-0x800,48,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_26:// rs1==x8, rs2==f7, 
// opcode: fsd; op1:x8; op2:f7; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x8,f7,0x0,-0x800,64,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_27:// rs1==x5, rs2==f24, 
// opcode: fsd; op1:x5; op2:f24; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x5,f24,0x0,-0x800,80,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_28:// rs1==x6, rs2==f4, 
// opcode: fsd; op1:x6; op2:f4; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x6,f4,0x0,-0x800,96,fsd,0,x17)
RVTEST_VALBASEUPD(x16)
RVTEST_VALBASEMOV(x20, x16)
RVTEST_SIGBASE(x19,signature_x19_2)

inst_29:// rs1==x17, rs2==f29, 
// opcode: fsd; op1:x17; op2:f29; op2val:0x0; immval:-0x800; align:0; flagreg:x21;
TEST_STORE_F(x19,x18,0,x17,f29,0x0,-0x800,0,fsd,0,x21)
RVTEST_VALBASEUPD(x20)
RVTEST_VALBASEMOV(x16, x20)
RVTEST_SIGBASE(x15,signature_x15_4)

inst_30:// rs1==x20, rs2==f8, 
// opcode: fsd; op1:x20; op2:f8; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x20,f8,0x0,-0x800,0,fsd,0,x17)
RVTEST_VALBASEUPD(x16)

inst_31:// rs2==f31, 
// opcode: fsd; op1:x2; op2:f31; op2val:0x0; immval:-0x800; align:0; flagreg:x17;
TEST_STORE_F(x15,x18,0,x2,f31,0x0,-0x800,16,fsd,0,x17)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_fp:
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x15_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x15_1:
    .fill 30*(XLEN/32),4,0xdeadbeef


signature_x19_0:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_2:
    .fill 10*(XLEN/32),4,0xdeadbeef


signature_x19_1:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_3:
    .fill 14*(XLEN/32),4,0xdeadbeef


signature_x19_2:
    .fill 2*(XLEN/32),4,0xdeadbeef


signature_x15_4:
    .fill 4*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
